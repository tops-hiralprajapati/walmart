<?php

/**
 * ItemCountResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Event Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\CA\Events;

use Walmart\Models\BaseModel;

/**
 * ItemCountResponse Class Doc Comment
 *
 * @category Class

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class ItemCountResponse extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ItemCountResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'eventId' => 'string',
        'partnerId' => 'string',
        'submitted' => 'int',
        'processed' => 'int',
        'failed' => 'int',
        'rejected' => 'int',
        'selected' => 'int',
        'all' => 'int',
        'lastUpdatedTime' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'eventId' => null,
        'partnerId' => null,
        'submitted' => 'int32',
        'processed' => 'int32',
        'failed' => 'int32',
        'rejected' => 'int32',
        'selected' => 'int32',
        'all' => 'int32',
        'lastUpdatedTime' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'eventId' => false,
        'partnerId' => false,
        'submitted' => false,
        'processed' => false,
        'failed' => false,
        'rejected' => false,
        'selected' => false,
        'all' => false,
        'lastUpdatedTime' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'eventId' => 'eventId',
        'partnerId' => 'partnerId',
        'submitted' => 'submitted',
        'processed' => 'processed',
        'failed' => 'failed',
        'rejected' => 'rejected',
        'selected' => 'selected',
        'all' => 'all',
        'lastUpdatedTime' => 'lastUpdatedTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'eventId' => 'setEventId',
        'partnerId' => 'setPartnerId',
        'submitted' => 'setSubmitted',
        'processed' => 'setProcessed',
        'failed' => 'setFailed',
        'rejected' => 'setRejected',
        'selected' => 'setSelected',
        'all' => 'setAll',
        'lastUpdatedTime' => 'setLastUpdatedTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'eventId' => 'getEventId',
        'partnerId' => 'getPartnerId',
        'submitted' => 'getSubmitted',
        'processed' => 'getProcessed',
        'failed' => 'getFailed',
        'rejected' => 'getRejected',
        'selected' => 'getSelected',
        'all' => 'getAll',
        'lastUpdatedTime' => 'getLastUpdatedTime'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('eventId', $data ?? [], null);
        $this->setIfExists('partnerId', $data ?? [], null);
        $this->setIfExists('submitted', $data ?? [], null);
        $this->setIfExists('processed', $data ?? [], null);
        $this->setIfExists('failed', $data ?? [], null);
        $this->setIfExists('rejected', $data ?? [], null);
        $this->setIfExists('selected', $data ?? [], null);
        $this->setIfExists('all', $data ?? [], null);
        $this->setIfExists('lastUpdatedTime', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];


        return $invalidProperties;
    }

    /**
     * Gets eventId
     *
     * @return string|null
    
     */
    public function getEventId()
    {
        return $this->container['eventId'];
    }

    /**
     * Sets eventId
     *
     * @param string|null $eventId The Event ID
     *
     * @return self
    
     */
    public function setEventId($eventId)
    {
        if (is_null($eventId)) {
            throw new \InvalidArgumentException('non-nullable eventId cannot be null');
        }

        $this->container['eventId'] = $eventId;
        return $this;
    }

    /**
     * Gets partnerId
     *
     * @return string|null
    
     */
    public function getPartnerId()
    {
        return $this->container['partnerId'];
    }

    /**
     * Sets partnerId
     *
     * @param string|null $partnerId The Partner ID
     *
     * @return self
    
     */
    public function setPartnerId($partnerId)
    {
        if (is_null($partnerId)) {
            throw new \InvalidArgumentException('non-nullable partnerId cannot be null');
        }

        $this->container['partnerId'] = $partnerId;
        return $this;
    }

    /**
     * Gets submitted
     *
     * @return int|null
    
     */
    public function getSubmitted()
    {
        return $this->container['submitted'];
    }

    /**
     * Sets submitted
     *
     * @param int|null $submitted The submitted number of items
     *
     * @return self
    
     */
    public function setSubmitted($submitted)
    {
        if (is_null($submitted)) {
            throw new \InvalidArgumentException('non-nullable submitted cannot be null');
        }

        $this->container['submitted'] = $submitted;
        return $this;
    }

    /**
     * Gets processed
     *
     * @return int|null
    
     */
    public function getProcessed()
    {
        return $this->container['processed'];
    }

    /**
     * Sets processed
     *
     * @param int|null $processed The processed number of items
     *
     * @return self
    
     */
    public function setProcessed($processed)
    {
        if (is_null($processed)) {
            throw new \InvalidArgumentException('non-nullable processed cannot be null');
        }

        $this->container['processed'] = $processed;
        return $this;
    }

    /**
     * Gets failed
     *
     * @return int|null
    
     */
    public function getFailed()
    {
        return $this->container['failed'];
    }

    /**
     * Sets failed
     *
     * @param int|null $failed The failed number of items
     *
     * @return self
    
     */
    public function setFailed($failed)
    {
        if (is_null($failed)) {
            throw new \InvalidArgumentException('non-nullable failed cannot be null');
        }

        $this->container['failed'] = $failed;
        return $this;
    }

    /**
     * Gets rejected
     *
     * @return int|null
    
     */
    public function getRejected()
    {
        return $this->container['rejected'];
    }

    /**
     * Sets rejected
     *
     * @param int|null $rejected Rejected count of items
     *
     * @return self
    
     */
    public function setRejected($rejected)
    {
        if (is_null($rejected)) {
            throw new \InvalidArgumentException('non-nullable rejected cannot be null');
        }

        $this->container['rejected'] = $rejected;
        return $this;
    }

    /**
     * Gets selected
     *
     * @return int|null
    
     */
    public function getSelected()
    {
        return $this->container['selected'];
    }

    /**
     * Sets selected
     *
     * @param int|null $selected The selected count of items
     *
     * @return self
    
     */
    public function setSelected($selected)
    {
        if (is_null($selected)) {
            throw new \InvalidArgumentException('non-nullable selected cannot be null');
        }

        $this->container['selected'] = $selected;
        return $this;
    }

    /**
     * Gets all
     *
     * @return int|null
    
     */
    public function getAll()
    {
        return $this->container['all'];
    }

    /**
     * Sets all
     *
     * @param int|null $all Full count
     *
     * @return self
    
     */
    public function setAll($all)
    {
        if (is_null($all)) {
            throw new \InvalidArgumentException('non-nullable all cannot be null');
        }

        $this->container['all'] = $all;
        return $this;
    }

    /**
     * Gets lastUpdatedTime
     *
     * @return int|null
    
     */
    public function getLastUpdatedTime()
    {
        return $this->container['lastUpdatedTime'];
    }

    /**
     * Sets lastUpdatedTime
     *
     * @param int|null $lastUpdatedTime The last time of update for items
     *
     * @return self
    
     */
    public function setLastUpdatedTime($lastUpdatedTime)
    {
        if (is_null($lastUpdatedTime)) {
            throw new \InvalidArgumentException('non-nullable lastUpdatedTime cannot be null');
        }

        $this->container['lastUpdatedTime'] = $lastUpdatedTime;
        return $this;
    }
}
