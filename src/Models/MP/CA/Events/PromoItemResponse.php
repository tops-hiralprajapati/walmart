<?php

/**
 * PromoItemResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Event Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\CA\Events;

use Walmart\Models\BaseModel;

/**
 * PromoItemResponse Class Doc Comment
 *
 * @category Class

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class PromoItemResponse extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PromoItemResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'eventId' => 'string',
        'id' => 'string',
        'partnerId' => 'string',
        'sellerSkuId' => 'string',
        'eventName' => 'string',
        'eventType' => 'string',
        'createdDate' => '\DateTime',
        'status' => 'string',
        'currentRetailPrice' => 'float',
        'price' => 'float',
        'eligibleStartDate' => '\DateTime',
        'eligibleEndDate' => '\DateTime',
        'walmartSkuId' => 'string',
        'inventory' => 'string',
        'wmtExclusive' => 'string',
        'lastUpdatedDate' => '\DateTime',
        'confirmedEventStartDate' => '\DateTime',
        'confirmedEventEndDate' => '\DateTime',
        'feedback' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'eventId' => null,
        'id' => null,
        'partnerId' => null,
        'sellerSkuId' => null,
        'eventName' => null,
        'eventType' => null,
        'createdDate' => 'date-time',
        'status' => null,
        'currentRetailPrice' => null,
        'price' => null,
        'eligibleStartDate' => 'date-time',
        'eligibleEndDate' => 'date-time',
        'walmartSkuId' => null,
        'inventory' => null,
        'wmtExclusive' => null,
        'lastUpdatedDate' => 'date-time',
        'confirmedEventStartDate' => 'date-time',
        'confirmedEventEndDate' => 'date-time',
        'feedback' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'eventId' => false,
        'id' => false,
        'partnerId' => false,
        'sellerSkuId' => false,
        'eventName' => false,
        'eventType' => false,
        'createdDate' => false,
        'status' => false,
        'currentRetailPrice' => false,
        'price' => false,
        'eligibleStartDate' => false,
        'eligibleEndDate' => false,
        'walmartSkuId' => false,
        'inventory' => false,
        'wmtExclusive' => false,
        'lastUpdatedDate' => false,
        'confirmedEventStartDate' => false,
        'confirmedEventEndDate' => false,
        'feedback' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'eventId' => 'eventId',
        'id' => 'id',
        'partnerId' => 'partnerId',
        'sellerSkuId' => 'sellerSkuId',
        'eventName' => 'eventName',
        'eventType' => 'eventType',
        'createdDate' => 'createdDate',
        'status' => 'status',
        'currentRetailPrice' => 'currentRetailPrice',
        'price' => 'price',
        'eligibleStartDate' => 'eligibleStartDate',
        'eligibleEndDate' => 'eligibleEndDate',
        'walmartSkuId' => 'walmartSkuId',
        'inventory' => 'inventory',
        'wmtExclusive' => 'wmtExclusive',
        'lastUpdatedDate' => 'lastUpdatedDate',
        'confirmedEventStartDate' => 'confirmedEventStartDate',
        'confirmedEventEndDate' => 'confirmedEventEndDate',
        'feedback' => 'feedback'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'eventId' => 'setEventId',
        'id' => 'setId',
        'partnerId' => 'setPartnerId',
        'sellerSkuId' => 'setSellerSkuId',
        'eventName' => 'setEventName',
        'eventType' => 'setEventType',
        'createdDate' => 'setCreatedDate',
        'status' => 'setStatus',
        'currentRetailPrice' => 'setCurrentRetailPrice',
        'price' => 'setPrice',
        'eligibleStartDate' => 'setEligibleStartDate',
        'eligibleEndDate' => 'setEligibleEndDate',
        'walmartSkuId' => 'setWalmartSkuId',
        'inventory' => 'setInventory',
        'wmtExclusive' => 'setWmtExclusive',
        'lastUpdatedDate' => 'setLastUpdatedDate',
        'confirmedEventStartDate' => 'setConfirmedEventStartDate',
        'confirmedEventEndDate' => 'setConfirmedEventEndDate',
        'feedback' => 'setFeedback'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'eventId' => 'getEventId',
        'id' => 'getId',
        'partnerId' => 'getPartnerId',
        'sellerSkuId' => 'getSellerSkuId',
        'eventName' => 'getEventName',
        'eventType' => 'getEventType',
        'createdDate' => 'getCreatedDate',
        'status' => 'getStatus',
        'currentRetailPrice' => 'getCurrentRetailPrice',
        'price' => 'getPrice',
        'eligibleStartDate' => 'getEligibleStartDate',
        'eligibleEndDate' => 'getEligibleEndDate',
        'walmartSkuId' => 'getWalmartSkuId',
        'inventory' => 'getInventory',
        'wmtExclusive' => 'getWmtExclusive',
        'lastUpdatedDate' => 'getLastUpdatedDate',
        'confirmedEventStartDate' => 'getConfirmedEventStartDate',
        'confirmedEventEndDate' => 'getConfirmedEventEndDate',
        'feedback' => 'getFeedback'
    ];


    public const EVENT_TYPE_FLASH = 'Flash';

    public const EVENT_TYPE_DAILY = 'Daily';

    public const EVENT_TYPE_WEEKLY = 'Weekly';

    public const EVENT_TYPE_SEASONAL = 'Seasonal';

    public const STATUS_SUBMITTED = 'Submitted';

    public const STATUS_FAILED = 'Failed';

    public const STATUS_SELECTED = 'Selected';

    public const STATUS_REJECTED = 'Rejected';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventTypeAllowableValues()
    {
        return [
            self::EVENT_TYPE_FLASH,
            self::EVENT_TYPE_DAILY,
            self::EVENT_TYPE_WEEKLY,
            self::EVENT_TYPE_SEASONAL,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_SUBMITTED,
            self::STATUS_FAILED,
            self::STATUS_SELECTED,
            self::STATUS_REJECTED,
        ];
    }

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('eventId', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('partnerId', $data ?? [], null);
        $this->setIfExists('sellerSkuId', $data ?? [], null);
        $this->setIfExists('eventName', $data ?? [], null);
        $this->setIfExists('eventType', $data ?? [], null);
        $this->setIfExists('createdDate', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('currentRetailPrice', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('eligibleStartDate', $data ?? [], null);
        $this->setIfExists('eligibleEndDate', $data ?? [], null);
        $this->setIfExists('walmartSkuId', $data ?? [], null);
        $this->setIfExists('inventory', $data ?? [], null);
        $this->setIfExists('wmtExclusive', $data ?? [], null);
        $this->setIfExists('lastUpdatedDate', $data ?? [], null);
        $this->setIfExists('confirmedEventStartDate', $data ?? [], null);
        $this->setIfExists('confirmedEventEndDate', $data ?? [], null);
        $this->setIfExists('feedback', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEventTypeAllowableValues();
        if (!is_null($this->container['eventType']) && !in_array($this->container['eventType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'eventType', must be one of '%s'",
                $this->container['eventType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }


        return $invalidProperties;
    }

    /**
     * Gets eventId
     *
     * @return string|null
    
     */
    public function getEventId()
    {
        return $this->container['eventId'];
    }

    /**
     * Sets eventId
     *
     * @param string|null $eventId The Event ID
     *
     * @return self
    
     */
    public function setEventId($eventId)
    {
        if (is_null($eventId)) {
            throw new \InvalidArgumentException('non-nullable eventId cannot be null');
        }

        $this->container['eventId'] = $eventId;
        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
    
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The response ID
     *
     * @return self
    
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;
        return $this;
    }

    /**
     * Gets partnerId
     *
     * @return string|null
    
     */
    public function getPartnerId()
    {
        return $this->container['partnerId'];
    }

    /**
     * Sets partnerId
     *
     * @param string|null $partnerId Partner ID with seller
     *
     * @return self
    
     */
    public function setPartnerId($partnerId)
    {
        if (is_null($partnerId)) {
            throw new \InvalidArgumentException('non-nullable partnerId cannot be null');
        }

        $this->container['partnerId'] = $partnerId;
        return $this;
    }

    /**
     * Gets sellerSkuId
     *
     * @return string|null
    
     */
    public function getSellerSkuId()
    {
        return $this->container['sellerSkuId'];
    }

    /**
     * Sets sellerSkuId
     *
     * @param string|null $sellerSkuId Unique ID for seller
     *
     * @return self
    
     */
    public function setSellerSkuId($sellerSkuId)
    {
        if (is_null($sellerSkuId)) {
            throw new \InvalidArgumentException('non-nullable sellerSkuId cannot be null');
        }

        $this->container['sellerSkuId'] = $sellerSkuId;
        return $this;
    }

    /**
     * Gets eventName
     *
     * @return string|null
    
     */
    public function getEventName()
    {
        return $this->container['eventName'];
    }

    /**
     * Sets eventName
     *
     * @param string|null $eventName The Event Name is unique and setup by the business
     *
     * @return self
    
     */
    public function setEventName($eventName)
    {
        if (is_null($eventName)) {
            throw new \InvalidArgumentException('non-nullable eventName cannot be null');
        }

        $this->container['eventName'] = $eventName;
        return $this;
    }

    /**
     * Gets eventType
     *
     * @return string|null
    
     */
    public function getEventType()
    {
        return $this->container['eventType'];
    }

    /**
     * Sets eventType
     *
     * @param string|null $eventType The type of event
     *
     * @return self
    
     */
    public function setEventType($eventType)
    {
        if (is_null($eventType)) {
            throw new \InvalidArgumentException('non-nullable eventType cannot be null');
        }
        $allowedValues = $this->getEventTypeAllowableValues();
        if (!in_array($eventType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'eventType', must be one of '%s'",
                    $eventType,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['eventType'] = $eventType;
        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \DateTime|null
    
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \DateTime|null $createdDate The date and time for the created Event
     *
     * @return self
    
     */
    public function setCreatedDate($createdDate)
    {
        if (is_null($createdDate)) {
            throw new \InvalidArgumentException('non-nullable createdDate cannot be null');
        }

        $this->container['createdDate'] = $createdDate;
        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
    
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The status of the Event
     *
     * @return self
    
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['status'] = $status;
        return $this;
    }

    /**
     * Gets currentRetailPrice
     *
     * @return float|null
    
     */
    public function getCurrentRetailPrice()
    {
        return $this->container['currentRetailPrice'];
    }

    /**
     * Sets currentRetailPrice
     *
     * @param float|null $currentRetailPrice The Current retails price for the item
     *
     * @return self
    
     */
    public function setCurrentRetailPrice($currentRetailPrice)
    {
        if (is_null($currentRetailPrice)) {
            throw new \InvalidArgumentException('non-nullable currentRetailPrice cannot be null');
        }

        $this->container['currentRetailPrice'] = $currentRetailPrice;
        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
    
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price The price for item
     *
     * @return self
    
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }

        $this->container['price'] = $price;
        return $this;
    }

    /**
     * Gets eligibleStartDate
     *
     * @return \DateTime|null
    
     */
    public function getEligibleStartDate()
    {
        return $this->container['eligibleStartDate'];
    }

    /**
     * Sets eligibleStartDate
     *
     * @param \DateTime|null $eligibleStartDate The eligible start date for event
     *
     * @return self
    
     */
    public function setEligibleStartDate($eligibleStartDate)
    {
        if (is_null($eligibleStartDate)) {
            throw new \InvalidArgumentException('non-nullable eligibleStartDate cannot be null');
        }

        $this->container['eligibleStartDate'] = $eligibleStartDate;
        return $this;
    }

    /**
     * Gets eligibleEndDate
     *
     * @return \DateTime|null
    
     */
    public function getEligibleEndDate()
    {
        return $this->container['eligibleEndDate'];
    }

    /**
     * Sets eligibleEndDate
     *
     * @param \DateTime|null $eligibleEndDate The end date for Event
     *
     * @return self
    
     */
    public function setEligibleEndDate($eligibleEndDate)
    {
        if (is_null($eligibleEndDate)) {
            throw new \InvalidArgumentException('non-nullable eligibleEndDate cannot be null');
        }

        $this->container['eligibleEndDate'] = $eligibleEndDate;
        return $this;
    }

    /**
     * Gets walmartSkuId
     *
     * @return string|null
    
     */
    public function getWalmartSkuId()
    {
        return $this->container['walmartSkuId'];
    }

    /**
     * Sets walmartSkuId
     *
     * @param string|null $walmartSkuId SKU Id assigned to a product by walmart
     *
     * @return self
    
     */
    public function setWalmartSkuId($walmartSkuId)
    {
        if (is_null($walmartSkuId)) {
            throw new \InvalidArgumentException('non-nullable walmartSkuId cannot be null');
        }

        $this->container['walmartSkuId'] = $walmartSkuId;
        return $this;
    }

    /**
     * Gets inventory
     *
     * @return string|null
    
     */
    public function getInventory()
    {
        return $this->container['inventory'];
    }

    /**
     * Sets inventory
     *
     * @param string|null $inventory The count of items in inventory
     *
     * @return self
    
     */
    public function setInventory($inventory)
    {
        if (is_null($inventory)) {
            throw new \InvalidArgumentException('non-nullable inventory cannot be null');
        }

        $this->container['inventory'] = $inventory;
        return $this;
    }

    /**
     * Gets wmtExclusive
     *
     * @return string|null
    
     */
    public function getWmtExclusive()
    {
        return $this->container['wmtExclusive'];
    }

    /**
     * Sets wmtExclusive
     *
     * @param string|null $wmtExclusive If the Item is Walmart exclusive
     *
     * @return self
    
     */
    public function setWmtExclusive($wmtExclusive)
    {
        if (is_null($wmtExclusive)) {
            throw new \InvalidArgumentException('non-nullable wmtExclusive cannot be null');
        }

        $this->container['wmtExclusive'] = $wmtExclusive;
        return $this;
    }

    /**
     * Gets lastUpdatedDate
     *
     * @return \DateTime|null
    
     */
    public function getLastUpdatedDate()
    {
        return $this->container['lastUpdatedDate'];
    }

    /**
     * Sets lastUpdatedDate
     *
     * @param \DateTime|null $lastUpdatedDate The [last updated date for Event]
     *
     * @return self
    
     */
    public function setLastUpdatedDate($lastUpdatedDate)
    {
        if (is_null($lastUpdatedDate)) {
            throw new \InvalidArgumentException('non-nullable lastUpdatedDate cannot be null');
        }

        $this->container['lastUpdatedDate'] = $lastUpdatedDate;
        return $this;
    }

    /**
     * Gets confirmedEventStartDate
     *
     * @return \DateTime|null
    
     */
    public function getConfirmedEventStartDate()
    {
        return $this->container['confirmedEventStartDate'];
    }

    /**
     * Sets confirmedEventStartDate
     *
     * @param \DateTime|null $confirmedEventStartDate The start date of Event
     *
     * @return self
    
     */
    public function setConfirmedEventStartDate($confirmedEventStartDate)
    {
        if (is_null($confirmedEventStartDate)) {
            throw new \InvalidArgumentException('non-nullable confirmedEventStartDate cannot be null');
        }

        $this->container['confirmedEventStartDate'] = $confirmedEventStartDate;
        return $this;
    }

    /**
     * Gets confirmedEventEndDate
     *
     * @return \DateTime|null
    
     */
    public function getConfirmedEventEndDate()
    {
        return $this->container['confirmedEventEndDate'];
    }

    /**
     * Sets confirmedEventEndDate
     *
     * @param \DateTime|null $confirmedEventEndDate The end date for Event
     *
     * @return self
    
     */
    public function setConfirmedEventEndDate($confirmedEventEndDate)
    {
        if (is_null($confirmedEventEndDate)) {
            throw new \InvalidArgumentException('non-nullable confirmedEventEndDate cannot be null');
        }

        $this->container['confirmedEventEndDate'] = $confirmedEventEndDate;
        return $this;
    }

    /**
     * Gets feedback
     *
     * @return string|null
    
     */
    public function getFeedback()
    {
        return $this->container['feedback'];
    }

    /**
     * Sets feedback
     *
     * @param string|null $feedback The Feedback
     *
     * @return self
    
     */
    public function setFeedback($feedback)
    {
        if (is_null($feedback)) {
            throw new \InvalidArgumentException('non-nullable feedback cannot be null');
        }

        $this->container['feedback'] = $feedback;
        return $this;
    }
}
