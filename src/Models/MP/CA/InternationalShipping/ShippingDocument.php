<?php

/**
 * ShippingDocument
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * International Shipping
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\CA\InternationalShipping;

use Walmart\Models\BaseModel;

/**
 * ShippingDocument Class Doc Comment
 *
 * @category Class

 * @description Shipping Documents

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class ShippingDocument extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ShippingDocument';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'documentFormat' => 'string',
        'documentType' => 'string',
        'base64EncodedDocument' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'documentFormat' => null,
        'documentType' => null,
        'base64EncodedDocument' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'documentFormat' => false,
        'documentType' => false,
        'base64EncodedDocument' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'documentFormat' => 'documentFormat',
        'documentType' => 'documentType',
        'base64EncodedDocument' => 'base64EncodedDocument'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'documentFormat' => 'setDocumentFormat',
        'documentType' => 'setDocumentType',
        'base64EncodedDocument' => 'setBase64EncodedDocument'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'documentFormat' => 'getDocumentFormat',
        'documentType' => 'getDocumentType',
        'base64EncodedDocument' => 'getBase64EncodedDocument'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('documentFormat', $data ?? [], null);
        $this->setIfExists('documentType', $data ?? [], null);
        $this->setIfExists('base64EncodedDocument', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];


        return $invalidProperties;
    }

    /**
     * Gets documentFormat
     *
     * @return string|null
    
     */
    public function getDocumentFormat()
    {
        return $this->container['documentFormat'];
    }

    /**
     * Sets documentFormat
     *
     * @param string|null $documentFormat documentFormat
     *
     * @return self
    
     */
    public function setDocumentFormat($documentFormat)
    {
        if (is_null($documentFormat)) {
            throw new \InvalidArgumentException('non-nullable documentFormat cannot be null');
        }

        $this->container['documentFormat'] = $documentFormat;
        return $this;
    }

    /**
     * Gets documentType
     *
     * @return string|null
    
     */
    public function getDocumentType()
    {
        return $this->container['documentType'];
    }

    /**
     * Sets documentType
     *
     * @param string|null $documentType documentType
     *
     * @return self
    
     */
    public function setDocumentType($documentType)
    {
        if (is_null($documentType)) {
            throw new \InvalidArgumentException('non-nullable documentType cannot be null');
        }

        $this->container['documentType'] = $documentType;
        return $this;
    }

    /**
     * Gets base64EncodedDocument
     *
     * @return string|null
    
     */
    public function getBase64EncodedDocument()
    {
        return $this->container['base64EncodedDocument'];
    }

    /**
     * Sets base64EncodedDocument
     *
     * @param string|null $base64EncodedDocument base64EncodedDocument
     *
     * @return self
    
     */
    public function setBase64EncodedDocument($base64EncodedDocument)
    {
        if (is_null($base64EncodedDocument)) {
            throw new \InvalidArgumentException('non-nullable base64EncodedDocument cannot be null');
        }

        $this->container['base64EncodedDocument'] = $base64EncodedDocument;
        return $this;
    }
}
