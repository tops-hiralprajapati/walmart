<?php

/**
 * Scopes
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Authentication & Authorization Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\MX\Authentication;

use Walmart\Models\BaseModel;

/**
 * Scopes Class Doc Comment
 *
 * @category Class

 * @description The API categories with their corresponding access levels

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class Scopes extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Scopes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'reports' => 'string',
        'item' => 'string',
        'shipping' => 'string',
        'price' => 'string',
        'lagtime' => 'string',
        'feeds' => 'string',
        'returns' => 'string',
        'orders' => 'string',
        'rules' => 'string',
        'inventory' => 'string',
        'content' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'reports' => null,
        'item' => null,
        'shipping' => null,
        'price' => null,
        'lagtime' => null,
        'feeds' => null,
        'returns' => null,
        'orders' => null,
        'rules' => null,
        'inventory' => null,
        'content' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'reports' => false,
        'item' => false,
        'shipping' => false,
        'price' => false,
        'lagtime' => false,
        'feeds' => false,
        'returns' => false,
        'orders' => false,
        'rules' => false,
        'inventory' => false,
        'content' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'reports' => 'reports',
        'item' => 'item',
        'shipping' => 'shipping',
        'price' => 'price',
        'lagtime' => 'lagtime',
        'feeds' => 'feeds',
        'returns' => 'returns',
        'orders' => 'orders',
        'rules' => 'rules',
        'inventory' => 'inventory',
        'content' => 'content'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'reports' => 'setReports',
        'item' => 'setItem',
        'shipping' => 'setShipping',
        'price' => 'setPrice',
        'lagtime' => 'setLagtime',
        'feeds' => 'setFeeds',
        'returns' => 'setReturns',
        'orders' => 'setOrders',
        'rules' => 'setRules',
        'inventory' => 'setInventory',
        'content' => 'setContent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'reports' => 'getReports',
        'item' => 'getItem',
        'shipping' => 'getShipping',
        'price' => 'getPrice',
        'lagtime' => 'getLagtime',
        'feeds' => 'getFeeds',
        'returns' => 'getReturns',
        'orders' => 'getOrders',
        'rules' => 'getRules',
        'inventory' => 'getInventory',
        'content' => 'getContent'
    ];


    public const REPORTS_FULL_ACCESS = 'full_access';

    public const REPORTS_VIEW_ONLY = 'view_only';

    public const REPORTS_NO_ACCESS = 'no_access';

    public const ITEM_FULL_ACCESS = 'full_access';

    public const ITEM_VIEW_ONLY = 'view_only';

    public const ITEM_NO_ACCESS = 'no_access';

    public const SHIPPING_FULL_ACCESS = 'full_access';

    public const SHIPPING_VIEW_ONLY = 'view_only';

    public const SHIPPING_NO_ACCESS = 'no_access';

    public const PRICE_FULL_ACCESS = 'full_access';

    public const PRICE_VIEW_ONLY = 'view_only';

    public const PRICE_NO_ACCESS = 'no_access';

    public const LAGTIME_FULL_ACCESS = 'full_access';

    public const LAGTIME_VIEW_ONLY = 'view_only';

    public const LAGTIME_NO_ACCESS = 'no_access';

    public const FEEDS_FULL_ACCESS = 'full_access';

    public const FEEDS_VIEW_ONLY = 'view_only';

    public const FEEDS_NO_ACCESS = 'no_access';

    public const RETURNS_FULL_ACCESS = 'full_access';

    public const RETURNS_VIEW_ONLY = 'view_only';

    public const RETURNS_NO_ACCESS = 'no_access';

    public const ORDERS_FULL_ACCESS = 'full_access';

    public const ORDERS_VIEW_ONLY = 'view_only';

    public const ORDERS_NO_ACCESS = 'no_access';

    public const RULES_FULL_ACCESS = 'full_access';

    public const RULES_VIEW_ONLY = 'view_only';

    public const RULES_NO_ACCESS = 'no_access';

    public const INVENTORY_FULL_ACCESS = 'full_access';

    public const INVENTORY_VIEW_ONLY = 'view_only';

    public const INVENTORY_NO_ACCESS = 'no_access';

    public const CONTENT_FULL_ACCESS = 'full_access';

    public const CONTENT_VIEW_ONLY = 'view_only';

    public const CONTENT_NO_ACCESS = 'no_access';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReportsAllowableValues()
    {
        return [
            self::REPORTS_FULL_ACCESS,
            self::REPORTS_VIEW_ONLY,
            self::REPORTS_NO_ACCESS,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getItemAllowableValues()
    {
        return [
            self::ITEM_FULL_ACCESS,
            self::ITEM_VIEW_ONLY,
            self::ITEM_NO_ACCESS,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShippingAllowableValues()
    {
        return [
            self::SHIPPING_FULL_ACCESS,
            self::SHIPPING_VIEW_ONLY,
            self::SHIPPING_NO_ACCESS,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPriceAllowableValues()
    {
        return [
            self::PRICE_FULL_ACCESS,
            self::PRICE_VIEW_ONLY,
            self::PRICE_NO_ACCESS,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLagtimeAllowableValues()
    {
        return [
            self::LAGTIME_FULL_ACCESS,
            self::LAGTIME_VIEW_ONLY,
            self::LAGTIME_NO_ACCESS,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFeedsAllowableValues()
    {
        return [
            self::FEEDS_FULL_ACCESS,
            self::FEEDS_VIEW_ONLY,
            self::FEEDS_NO_ACCESS,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReturnsAllowableValues()
    {
        return [
            self::RETURNS_FULL_ACCESS,
            self::RETURNS_VIEW_ONLY,
            self::RETURNS_NO_ACCESS,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrdersAllowableValues()
    {
        return [
            self::ORDERS_FULL_ACCESS,
            self::ORDERS_VIEW_ONLY,
            self::ORDERS_NO_ACCESS,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRulesAllowableValues()
    {
        return [
            self::RULES_FULL_ACCESS,
            self::RULES_VIEW_ONLY,
            self::RULES_NO_ACCESS,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInventoryAllowableValues()
    {
        return [
            self::INVENTORY_FULL_ACCESS,
            self::INVENTORY_VIEW_ONLY,
            self::INVENTORY_NO_ACCESS,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContentAllowableValues()
    {
        return [
            self::CONTENT_FULL_ACCESS,
            self::CONTENT_VIEW_ONLY,
            self::CONTENT_NO_ACCESS,
        ];
    }

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('reports', $data ?? [], null);
        $this->setIfExists('item', $data ?? [], null);
        $this->setIfExists('shipping', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('lagtime', $data ?? [], null);
        $this->setIfExists('feeds', $data ?? [], null);
        $this->setIfExists('returns', $data ?? [], null);
        $this->setIfExists('orders', $data ?? [], null);
        $this->setIfExists('rules', $data ?? [], null);
        $this->setIfExists('inventory', $data ?? [], null);
        $this->setIfExists('content', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getReportsAllowableValues();
        if (!is_null($this->container['reports']) && !in_array($this->container['reports'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'reports', must be one of '%s'",
                $this->container['reports'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getItemAllowableValues();
        if (!is_null($this->container['item']) && !in_array($this->container['item'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'item', must be one of '%s'",
                $this->container['item'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getShippingAllowableValues();
        if (!is_null($this->container['shipping']) && !in_array($this->container['shipping'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shipping', must be one of '%s'",
                $this->container['shipping'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPriceAllowableValues();
        if (!is_null($this->container['price']) && !in_array($this->container['price'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'price', must be one of '%s'",
                $this->container['price'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLagtimeAllowableValues();
        if (!is_null($this->container['lagtime']) && !in_array($this->container['lagtime'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'lagtime', must be one of '%s'",
                $this->container['lagtime'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFeedsAllowableValues();
        if (!is_null($this->container['feeds']) && !in_array($this->container['feeds'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'feeds', must be one of '%s'",
                $this->container['feeds'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getReturnsAllowableValues();
        if (!is_null($this->container['returns']) && !in_array($this->container['returns'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'returns', must be one of '%s'",
                $this->container['returns'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrdersAllowableValues();
        if (!is_null($this->container['orders']) && !in_array($this->container['orders'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'orders', must be one of '%s'",
                $this->container['orders'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRulesAllowableValues();
        if (!is_null($this->container['rules']) && !in_array($this->container['rules'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rules', must be one of '%s'",
                $this->container['rules'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInventoryAllowableValues();
        if (!is_null($this->container['inventory']) && !in_array($this->container['inventory'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'inventory', must be one of '%s'",
                $this->container['inventory'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getContentAllowableValues();
        if (!is_null($this->container['content']) && !in_array($this->container['content'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'content', must be one of '%s'",
                $this->container['content'],
                implode("', '", $allowedValues)
            );
        }


        return $invalidProperties;
    }

    /**
     * Gets reports
     *
     * @return string|null
    
     */
    public function getReports()
    {
        return $this->container['reports'];
    }

    /**
     * Sets reports
     *
     * @param string|null $reports reports
     *
     * @return self
    
     */
    public function setReports($reports)
    {
        if (is_null($reports)) {
            throw new \InvalidArgumentException('non-nullable reports cannot be null');
        }
        $allowedValues = $this->getReportsAllowableValues();
        if (!in_array($reports, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'reports', must be one of '%s'",
                    $reports,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['reports'] = $reports;
        return $this;
    }

    /**
     * Gets item
     *
     * @return string|null
    
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param string|null $item item
     *
     * @return self
    
     */
    public function setItem($item)
    {
        if (is_null($item)) {
            throw new \InvalidArgumentException('non-nullable item cannot be null');
        }
        $allowedValues = $this->getItemAllowableValues();
        if (!in_array($item, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'item', must be one of '%s'",
                    $item,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['item'] = $item;
        return $this;
    }

    /**
     * Gets shipping
     *
     * @return string|null
    
     */
    public function getShipping()
    {
        return $this->container['shipping'];
    }

    /**
     * Sets shipping
     *
     * @param string|null $shipping shipping
     *
     * @return self
    
     */
    public function setShipping($shipping)
    {
        if (is_null($shipping)) {
            throw new \InvalidArgumentException('non-nullable shipping cannot be null');
        }
        $allowedValues = $this->getShippingAllowableValues();
        if (!in_array($shipping, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shipping', must be one of '%s'",
                    $shipping,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['shipping'] = $shipping;
        return $this;
    }

    /**
     * Gets price
     *
     * @return string|null
    
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string|null $price price
     *
     * @return self
    
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $allowedValues = $this->getPriceAllowableValues();
        if (!in_array($price, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'price', must be one of '%s'",
                    $price,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['price'] = $price;
        return $this;
    }

    /**
     * Gets lagtime
     *
     * @return string|null
    
     */
    public function getLagtime()
    {
        return $this->container['lagtime'];
    }

    /**
     * Sets lagtime
     *
     * @param string|null $lagtime lagtime
     *
     * @return self
    
     */
    public function setLagtime($lagtime)
    {
        if (is_null($lagtime)) {
            throw new \InvalidArgumentException('non-nullable lagtime cannot be null');
        }
        $allowedValues = $this->getLagtimeAllowableValues();
        if (!in_array($lagtime, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'lagtime', must be one of '%s'",
                    $lagtime,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['lagtime'] = $lagtime;
        return $this;
    }

    /**
     * Gets feeds
     *
     * @return string|null
    
     */
    public function getFeeds()
    {
        return $this->container['feeds'];
    }

    /**
     * Sets feeds
     *
     * @param string|null $feeds feeds
     *
     * @return self
    
     */
    public function setFeeds($feeds)
    {
        if (is_null($feeds)) {
            throw new \InvalidArgumentException('non-nullable feeds cannot be null');
        }
        $allowedValues = $this->getFeedsAllowableValues();
        if (!in_array($feeds, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'feeds', must be one of '%s'",
                    $feeds,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['feeds'] = $feeds;
        return $this;
    }

    /**
     * Gets returns
     *
     * @return string|null
    
     */
    public function getReturns()
    {
        return $this->container['returns'];
    }

    /**
     * Sets returns
     *
     * @param string|null $returns returns
     *
     * @return self
    
     */
    public function setReturns($returns)
    {
        if (is_null($returns)) {
            throw new \InvalidArgumentException('non-nullable returns cannot be null');
        }
        $allowedValues = $this->getReturnsAllowableValues();
        if (!in_array($returns, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'returns', must be one of '%s'",
                    $returns,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['returns'] = $returns;
        return $this;
    }

    /**
     * Gets orders
     *
     * @return string|null
    
     */
    public function getOrders()
    {
        return $this->container['orders'];
    }

    /**
     * Sets orders
     *
     * @param string|null $orders orders
     *
     * @return self
    
     */
    public function setOrders($orders)
    {
        if (is_null($orders)) {
            throw new \InvalidArgumentException('non-nullable orders cannot be null');
        }
        $allowedValues = $this->getOrdersAllowableValues();
        if (!in_array($orders, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'orders', must be one of '%s'",
                    $orders,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['orders'] = $orders;
        return $this;
    }

    /**
     * Gets rules
     *
     * @return string|null
    
     */
    public function getRules()
    {
        return $this->container['rules'];
    }

    /**
     * Sets rules
     *
     * @param string|null $rules rules
     *
     * @return self
    
     */
    public function setRules($rules)
    {
        if (is_null($rules)) {
            throw new \InvalidArgumentException('non-nullable rules cannot be null');
        }
        $allowedValues = $this->getRulesAllowableValues();
        if (!in_array($rules, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rules', must be one of '%s'",
                    $rules,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['rules'] = $rules;
        return $this;
    }

    /**
     * Gets inventory
     *
     * @return string|null
    
     */
    public function getInventory()
    {
        return $this->container['inventory'];
    }

    /**
     * Sets inventory
     *
     * @param string|null $inventory inventory
     *
     * @return self
    
     */
    public function setInventory($inventory)
    {
        if (is_null($inventory)) {
            throw new \InvalidArgumentException('non-nullable inventory cannot be null');
        }
        $allowedValues = $this->getInventoryAllowableValues();
        if (!in_array($inventory, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'inventory', must be one of '%s'",
                    $inventory,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['inventory'] = $inventory;
        return $this;
    }

    /**
     * Gets content
     *
     * @return string|null
    
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string|null $content content
     *
     * @return self
    
     */
    public function setContent($content)
    {
        if (is_null($content)) {
            throw new \InvalidArgumentException('non-nullable content cannot be null');
        }
        $allowedValues = $this->getContentAllowableValues();
        if (!in_array($content, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'content', must be one of '%s'",
                    $content,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['content'] = $content;
        return $this;
    }
}
