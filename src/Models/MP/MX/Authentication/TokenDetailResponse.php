<?php

/**
 * TokenDetailResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Authentication & Authorization Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\MX\Authentication;

use Walmart\Models\BaseModel;

/**
 * TokenDetailResponse Class Doc Comment
 *
 * @category Class

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class TokenDetailResponse extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'TokenDetailResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'scopes' => '\Walmart\Models\MP\MX\Authentication\Scopes',
        'expireAt' => 'string',
        'issuedAt' => 'string',
        'isValid' => 'bool',
        'isChannelMatch' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'scopes' => null,
        'expireAt' => null,
        'issuedAt' => null,
        'isValid' => null,
        'isChannelMatch' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'scopes' => false,
        'expireAt' => false,
        'issuedAt' => false,
        'isValid' => false,
        'isChannelMatch' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'scopes' => 'scopes',
        'expireAt' => 'expire_at',
        'issuedAt' => 'issued_at',
        'isValid' => 'is_valid',
        'isChannelMatch' => 'is_channel_match'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'scopes' => 'setScopes',
        'expireAt' => 'setExpireAt',
        'issuedAt' => 'setIssuedAt',
        'isValid' => 'setIsValid',
        'isChannelMatch' => 'setIsChannelMatch'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'scopes' => 'getScopes',
        'expireAt' => 'getExpireAt',
        'issuedAt' => 'getIssuedAt',
        'isValid' => 'getIsValid',
        'isChannelMatch' => 'getIsChannelMatch'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('scopes', $data ?? [], null);
        $this->setIfExists('expireAt', $data ?? [], '1560973098000');
        $this->setIfExists('issuedAt', $data ?? [], '1560973098000');
        $this->setIfExists('isValid', $data ?? [], true);
        $this->setIfExists('isChannelMatch', $data ?? [], true);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['scopes'] === null) {
            $invalidProperties[] = "'scopes' can't be null";
        }
        if ($this->container['expireAt'] === null) {
            $invalidProperties[] = "'expireAt' can't be null";
        }
        if ($this->container['issuedAt'] === null) {
            $invalidProperties[] = "'issuedAt' can't be null";
        }
        if ($this->container['isValid'] === null) {
            $invalidProperties[] = "'isValid' can't be null";
        }
        if ($this->container['isChannelMatch'] === null) {
            $invalidProperties[] = "'isChannelMatch' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Gets scopes
     *
     * @return \Walmart\Models\MP\MX\Authentication\Scopes
    
     */
    public function getScopes()
    {
        return $this->container['scopes'];
    }

    /**
     * Sets scopes
     *
     * @param \Walmart\Models\MP\MX\Authentication\Scopes $scopes scopes
     *
     * @return self
    
     */
    public function setScopes($scopes)
    {
        if (is_null($scopes)) {
            throw new \InvalidArgumentException('non-nullable scopes cannot be null');
        }

        $this->container['scopes'] = $scopes;
        return $this;
    }

    /**
     * Gets expireAt
     *
     * @return string
    
     */
    public function getExpireAt()
    {
        return $this->container['expireAt'];
    }

    /**
     * Sets expireAt
     *
     * @param string $expireAt The timestamp when the token expires
     *
     * @return self
    
     */
    public function setExpireAt($expireAt)
    {
        if (is_null($expireAt)) {
            throw new \InvalidArgumentException('non-nullable expireAt cannot be null');
        }

        $this->container['expireAt'] = $expireAt;
        return $this;
    }

    /**
     * Gets issuedAt
     *
     * @return string
    
     */
    public function getIssuedAt()
    {
        return $this->container['issuedAt'];
    }

    /**
     * Sets issuedAt
     *
     * @param string $issuedAt The timestamp when the token is issued
     *
     * @return self
    
     */
    public function setIssuedAt($issuedAt)
    {
        if (is_null($issuedAt)) {
            throw new \InvalidArgumentException('non-nullable issuedAt cannot be null');
        }

        $this->container['issuedAt'] = $issuedAt;
        return $this;
    }

    /**
     * Gets isValid
     *
     * @return bool
    
     */
    public function getIsValid()
    {
        return $this->container['isValid'];
    }

    /**
     * Sets isValid
     *
     * @param bool $isValid Whether the token is valid; boolean value of true or false
     *
     * @return self
    
     */
    public function setIsValid($isValid)
    {
        if (is_null($isValid)) {
            throw new \InvalidArgumentException('non-nullable isValid cannot be null');
        }

        $this->container['isValid'] = $isValid;
        return $this;
    }

    /**
     * Gets isChannelMatch
     *
     * @return bool
    
     */
    public function getIsChannelMatch()
    {
        return $this->container['isChannelMatch'];
    }

    /**
     * Sets isChannelMatch
     *
     * @param bool $isChannelMatch Whether the keys Seller used are correctly associated
     *
     * @return self
    
     */
    public function setIsChannelMatch($isChannelMatch)
    {
        if (is_null($isChannelMatch)) {
            throw new \InvalidArgumentException('non-nullable isChannelMatch cannot be null');
        }

        $this->container['isChannelMatch'] = $isChannelMatch;
        return $this;
    }
}
