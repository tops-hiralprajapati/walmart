<?php

/**
 * ShipmentAdditionalDate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Returns Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\MX\Returns;

use Walmart\Models\BaseModel;

/**
 * ShipmentAdditionalDate Class Doc Comment
 *
 * @category Class

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class ShipmentAdditionalDate extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ShipmentAdditionalDate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'shipmentActualCreatedDate' => 'string',
        'expectedShipmentACKDate' => 'string',
        'shipmentACKDate' => 'string',
        'expectedShipmentShippedDate' => 'string',
        'shipmentShippedDate' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'shipmentActualCreatedDate' => null,
        'expectedShipmentACKDate' => null,
        'shipmentACKDate' => null,
        'expectedShipmentShippedDate' => null,
        'shipmentShippedDate' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'shipmentActualCreatedDate' => false,
        'expectedShipmentACKDate' => false,
        'shipmentACKDate' => false,
        'expectedShipmentShippedDate' => false,
        'shipmentShippedDate' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'shipmentActualCreatedDate' => 'shipmentActualCreatedDate',
        'expectedShipmentACKDate' => 'expectedShipmentACKDate',
        'shipmentACKDate' => 'shipmentACKDate',
        'expectedShipmentShippedDate' => 'expectedShipmentShippedDate',
        'shipmentShippedDate' => 'shipmentShippedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'shipmentActualCreatedDate' => 'setShipmentActualCreatedDate',
        'expectedShipmentACKDate' => 'setExpectedShipmentACKDate',
        'shipmentACKDate' => 'setShipmentACKDate',
        'expectedShipmentShippedDate' => 'setExpectedShipmentShippedDate',
        'shipmentShippedDate' => 'setShipmentShippedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'shipmentActualCreatedDate' => 'getShipmentActualCreatedDate',
        'expectedShipmentACKDate' => 'getExpectedShipmentACKDate',
        'shipmentACKDate' => 'getShipmentACKDate',
        'expectedShipmentShippedDate' => 'getExpectedShipmentShippedDate',
        'shipmentShippedDate' => 'getShipmentShippedDate'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('shipmentActualCreatedDate', $data ?? [], null);
        $this->setIfExists('expectedShipmentACKDate', $data ?? [], null);
        $this->setIfExists('shipmentACKDate', $data ?? [], null);
        $this->setIfExists('expectedShipmentShippedDate', $data ?? [], null);
        $this->setIfExists('shipmentShippedDate', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];


        return $invalidProperties;
    }

    /**
     * Gets shipmentActualCreatedDate
     *
     * @return string|null
    
     */
    public function getShipmentActualCreatedDate()
    {
        return $this->container['shipmentActualCreatedDate'];
    }

    /**
     * Sets shipmentActualCreatedDate
     *
     * @param string|null $shipmentActualCreatedDate shipmentActualCreatedDate
     *
     * @return self
    
     */
    public function setShipmentActualCreatedDate($shipmentActualCreatedDate)
    {
        if (is_null($shipmentActualCreatedDate)) {
            throw new \InvalidArgumentException('non-nullable shipmentActualCreatedDate cannot be null');
        }

        $this->container['shipmentActualCreatedDate'] = $shipmentActualCreatedDate;
        return $this;
    }

    /**
     * Gets expectedShipmentACKDate
     *
     * @return string|null
    
     */
    public function getExpectedShipmentACKDate()
    {
        return $this->container['expectedShipmentACKDate'];
    }

    /**
     * Sets expectedShipmentACKDate
     *
     * @param string|null $expectedShipmentACKDate expectedShipmentACKDate
     *
     * @return self
    
     */
    public function setExpectedShipmentACKDate($expectedShipmentACKDate)
    {
        if (is_null($expectedShipmentACKDate)) {
            throw new \InvalidArgumentException('non-nullable expectedShipmentACKDate cannot be null');
        }

        $this->container['expectedShipmentACKDate'] = $expectedShipmentACKDate;
        return $this;
    }

    /**
     * Gets shipmentACKDate
     *
     * @return string|null
    
     */
    public function getShipmentACKDate()
    {
        return $this->container['shipmentACKDate'];
    }

    /**
     * Sets shipmentACKDate
     *
     * @param string|null $shipmentACKDate shipmentACKDate
     *
     * @return self
    
     */
    public function setShipmentACKDate($shipmentACKDate)
    {
        if (is_null($shipmentACKDate)) {
            throw new \InvalidArgumentException('non-nullable shipmentACKDate cannot be null');
        }

        $this->container['shipmentACKDate'] = $shipmentACKDate;
        return $this;
    }

    /**
     * Gets expectedShipmentShippedDate
     *
     * @return string|null
    
     */
    public function getExpectedShipmentShippedDate()
    {
        return $this->container['expectedShipmentShippedDate'];
    }

    /**
     * Sets expectedShipmentShippedDate
     *
     * @param string|null $expectedShipmentShippedDate expectedShipmentShippedDate
     *
     * @return self
    
     */
    public function setExpectedShipmentShippedDate($expectedShipmentShippedDate)
    {
        if (is_null($expectedShipmentShippedDate)) {
            throw new \InvalidArgumentException('non-nullable expectedShipmentShippedDate cannot be null');
        }

        $this->container['expectedShipmentShippedDate'] = $expectedShipmentShippedDate;
        return $this;
    }

    /**
     * Gets shipmentShippedDate
     *
     * @return string|null
    
     */
    public function getShipmentShippedDate()
    {
        return $this->container['shipmentShippedDate'];
    }

    /**
     * Sets shipmentShippedDate
     *
     * @param string|null $shipmentShippedDate shipmentShippedDate
     *
     * @return self
    
     */
    public function setShipmentShippedDate($shipmentShippedDate)
    {
        if (is_null($shipmentShippedDate)) {
            throw new \InvalidArgumentException('non-nullable shipmentShippedDate cannot be null');
        }

        $this->container['shipmentShippedDate'] = $shipmentShippedDate;
        return $this;
    }
}
