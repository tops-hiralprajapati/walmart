<?php

/**
 * ItemRecommendationDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Assortment Recommendations
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\AssortmentRecommendations;

use Walmart\Models\BaseModel;

/**
 * ItemRecommendationDetails Class Doc Comment
 *
 * @category Class

 * @description Details of the recommended item.

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class ItemRecommendationDetails extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ItemRecommendationDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'title' => 'string',
        'brand' => 'string',
        'category' => 'string',
        'gtin' => 'string',
        'upc' => 'string',
        'isbn' => 'string',
        'ean' => 'string',
        'itemAvailabilityStatus' => 'string',
        'potentialSales' => 'string',
        'shoppingTrends' => 'string[]',
        'walmart' => '\Walmart\Models\MP\US\AssortmentRecommendations\WalmartItemInfo',
        'competitors' => '\Walmart\Models\MP\US\AssortmentRecommendations\CompetitorItemInfo[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'title' => null,
        'brand' => null,
        'category' => null,
        'gtin' => null,
        'upc' => null,
        'isbn' => null,
        'ean' => null,
        'itemAvailabilityStatus' => null,
        'potentialSales' => null,
        'shoppingTrends' => null,
        'walmart' => null,
        'competitors' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'title' => false,
        'brand' => false,
        'category' => false,
        'gtin' => false,
        'upc' => false,
        'isbn' => false,
        'ean' => false,
        'itemAvailabilityStatus' => false,
        'potentialSales' => false,
        'shoppingTrends' => false,
        'walmart' => false,
        'competitors' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'title' => 'title',
        'brand' => 'brand',
        'category' => 'category',
        'gtin' => 'gtin',
        'upc' => 'upc',
        'isbn' => 'isbn',
        'ean' => 'ean',
        'itemAvailabilityStatus' => 'itemAvailabilityStatus',
        'potentialSales' => 'potentialSales',
        'shoppingTrends' => 'shoppingTrends',
        'walmart' => 'walmart',
        'competitors' => 'competitors'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'title' => 'setTitle',
        'brand' => 'setBrand',
        'category' => 'setCategory',
        'gtin' => 'setGtin',
        'upc' => 'setUpc',
        'isbn' => 'setIsbn',
        'ean' => 'setEan',
        'itemAvailabilityStatus' => 'setItemAvailabilityStatus',
        'potentialSales' => 'setPotentialSales',
        'shoppingTrends' => 'setShoppingTrends',
        'walmart' => 'setWalmart',
        'competitors' => 'setCompetitors'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'title' => 'getTitle',
        'brand' => 'getBrand',
        'category' => 'getCategory',
        'gtin' => 'getGtin',
        'upc' => 'getUpc',
        'isbn' => 'getIsbn',
        'ean' => 'getEan',
        'itemAvailabilityStatus' => 'getItemAvailabilityStatus',
        'potentialSales' => 'getPotentialSales',
        'shoppingTrends' => 'getShoppingTrends',
        'walmart' => 'getWalmart',
        'competitors' => 'getCompetitors'
    ];


    public const ITEM_AVAILABILITY_STATUS_EXISTING_IN_WALMART = 'EXISTING_IN_WALMART';

    public const ITEM_AVAILABILITY_STATUS_NEW_TO_WALMART = 'NEW_TO_WALMART';

    public const SHOPPING_TRENDS_MOST_SEARCHED_FOR = 'MOST_SEARCHED_FOR';

    public const SHOPPING_TRENDS_BEST_SELLERS = 'BEST_SELLERS';

    public const SHOPPING_TRENDS_DEAL_ITEMS = 'DEAL_ITEMS';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getItemAvailabilityStatusAllowableValues()
    {
        return [
            self::ITEM_AVAILABILITY_STATUS_EXISTING_IN_WALMART,
            self::ITEM_AVAILABILITY_STATUS_NEW_TO_WALMART,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShoppingTrendsAllowableValues()
    {
        return [
            self::SHOPPING_TRENDS_MOST_SEARCHED_FOR,
            self::SHOPPING_TRENDS_BEST_SELLERS,
            self::SHOPPING_TRENDS_DEAL_ITEMS,
        ];
    }

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('brand', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('gtin', $data ?? [], null);
        $this->setIfExists('upc', $data ?? [], null);
        $this->setIfExists('isbn', $data ?? [], null);
        $this->setIfExists('ean', $data ?? [], null);
        $this->setIfExists('itemAvailabilityStatus', $data ?? [], null);
        $this->setIfExists('potentialSales', $data ?? [], null);
        $this->setIfExists('shoppingTrends', $data ?? [], null);
        $this->setIfExists('walmart', $data ?? [], null);
        $this->setIfExists('competitors', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getItemAvailabilityStatusAllowableValues();
        if (!is_null($this->container['itemAvailabilityStatus']) && !in_array($this->container['itemAvailabilityStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'itemAvailabilityStatus', must be one of '%s'",
                $this->container['itemAvailabilityStatus'],
                implode("', '", $allowedValues)
            );
        }


        return $invalidProperties;
    }

    /**
     * Gets title
     *
     * @return string|null
    
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Title of the recommended item
     *
     * @return self
    
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }

        $this->container['title'] = $title;
        return $this;
    }

    /**
     * Gets brand
     *
     * @return string|null
    
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string|null $brand Brand of the recommended item
     *
     * @return self
    
     */
    public function setBrand($brand)
    {
        if (is_null($brand)) {
            throw new \InvalidArgumentException('non-nullable brand cannot be null');
        }

        $this->container['brand'] = $brand;
        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
    
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category Category of the recommended item
     *
     * @return self
    
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }

        $this->container['category'] = $category;
        return $this;
    }

    /**
     * Gets gtin
     *
     * @return string|null
    
     */
    public function getGtin()
    {
        return $this->container['gtin'];
    }

    /**
     * Sets gtin
     *
     * @param string|null $gtin GTIN of the recommended item
     *
     * @return self
    
     */
    public function setGtin($gtin)
    {
        if (is_null($gtin)) {
            throw new \InvalidArgumentException('non-nullable gtin cannot be null');
        }

        $this->container['gtin'] = $gtin;
        return $this;
    }

    /**
     * Gets upc
     *
     * @return string|null
    
     */
    public function getUpc()
    {
        return $this->container['upc'];
    }

    /**
     * Sets upc
     *
     * @param string|null $upc UPC of the recommended item
     *
     * @return self
    
     */
    public function setUpc($upc)
    {
        if (is_null($upc)) {
            throw new \InvalidArgumentException('non-nullable upc cannot be null');
        }

        $this->container['upc'] = $upc;
        return $this;
    }

    /**
     * Gets isbn
     *
     * @return string|null
    
     */
    public function getIsbn()
    {
        return $this->container['isbn'];
    }

    /**
     * Sets isbn
     *
     * @param string|null $isbn ISBN of the recommended item
     *
     * @return self
    
     */
    public function setIsbn($isbn)
    {
        if (is_null($isbn)) {
            throw new \InvalidArgumentException('non-nullable isbn cannot be null');
        }

        $this->container['isbn'] = $isbn;
        return $this;
    }

    /**
     * Gets ean
     *
     * @return string|null
    
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string|null $ean EAN of the recommended item
     *
     * @return self
    
     */
    public function setEan($ean)
    {
        if (is_null($ean)) {
            throw new \InvalidArgumentException('non-nullable ean cannot be null');
        }

        $this->container['ean'] = $ean;
        return $this;
    }

    /**
     * Gets itemAvailabilityStatus
     *
     * @return string|null
    
     */
    public function getItemAvailabilityStatus()
    {
        return $this->container['itemAvailabilityStatus'];
    }

    /**
     * Sets itemAvailabilityStatus
     *
     * @param string|null $itemAvailabilityStatus Item availability status of the recommended item.   | Attribute | Description | Data Type | | --- | ----------- | ------- | | EXISTING_IN_WALMART | Indicates that item is existing in Walmart. | string | | NEW_TO_WALMART | Indicates that item is new to Walmart. | string |
     *
     * @return self
    
     */
    public function setItemAvailabilityStatus($itemAvailabilityStatus)
    {
        if (is_null($itemAvailabilityStatus)) {
            throw new \InvalidArgumentException('non-nullable itemAvailabilityStatus cannot be null');
        }
        $allowedValues = $this->getItemAvailabilityStatusAllowableValues();
        if (!in_array($itemAvailabilityStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'itemAvailabilityStatus', must be one of '%s'",
                    $itemAvailabilityStatus,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['itemAvailabilityStatus'] = $itemAvailabilityStatus;
        return $this;
    }

    /**
     * Gets potentialSales
     *
     * @return string|null
    
     */
    public function getPotentialSales()
    {
        return $this->container['potentialSales'];
    }

    /**
     * Sets potentialSales
     *
     * @param string|null $potentialSales Indicates the potential revenue the recommended item can bring in over a year.  This field does not promise the numbers indicated.
     *
     * @return self
    
     */
    public function setPotentialSales($potentialSales)
    {
        if (is_null($potentialSales)) {
            throw new \InvalidArgumentException('non-nullable potentialSales cannot be null');
        }

        $this->container['potentialSales'] = $potentialSales;
        return $this;
    }

    /**
     * Gets shoppingTrends
     *
     * @return string[]|null
    
     */
    public function getShoppingTrends()
    {
        return $this->container['shoppingTrends'];
    }

    /**
     * Sets shoppingTrends
     *
     * @param string[]|null $shoppingTrends Indicates the demand type for an item.   | Attribute | Description | Data Type | | --- | ----------- | ------- | | MOST_SEARCHED_FOR | Item is most searched for in the market. | string | | BEST_SELLERS | Item is best seller in the market. | string | | DEAL_ITEMS | Item is in demand and is a part of deals in the other marketplaces. | string |
     *
     * @return self
    
     */
    public function setShoppingTrends($shoppingTrends)
    {
        if (is_null($shoppingTrends)) {
            throw new \InvalidArgumentException('non-nullable shoppingTrends cannot be null');
        }
        $allowedValues = $this->getShoppingTrendsAllowableValues();
        if (array_diff($shoppingTrends, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'shoppingTrends', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shoppingTrends'] = $shoppingTrends;
        return $this;
    }

    /**
     * Gets walmart
     *
     * @return \Walmart\Models\MP\US\AssortmentRecommendations\WalmartItemInfo|null
    
     */
    public function getWalmart()
    {
        return $this->container['walmart'];
    }

    /**
     * Sets walmart
     *
     * @param \Walmart\Models\MP\US\AssortmentRecommendations\WalmartItemInfo|null $walmart walmart
     *
     * @return self
    
     */
    public function setWalmart($walmart)
    {
        if (is_null($walmart)) {
            throw new \InvalidArgumentException('non-nullable walmart cannot be null');
        }

        $this->container['walmart'] = $walmart;
        return $this;
    }

    /**
     * Gets competitors
     *
     * @return \Walmart\Models\MP\US\AssortmentRecommendations\CompetitorItemInfo[]|null
    
     */
    public function getCompetitors()
    {
        return $this->container['competitors'];
    }

    /**
     * Sets competitors
     *
     * @param \Walmart\Models\MP\US\AssortmentRecommendations\CompetitorItemInfo[]|null $competitors Competitor's item information
     *
     * @return self
    
     */
    public function setCompetitors($competitors)
    {
        if (is_null($competitors)) {
            throw new \InvalidArgumentException('non-nullable competitors cannot be null');
        }

        $this->container['competitors'] = $competitors;
        return $this;
    }
}
