<?php

/**
 * RecommendationRequestFilter
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Assortment Recommendations
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\AssortmentRecommendations;

use Walmart\Models\BaseModel;

/**
 * RecommendationRequestFilter Class Doc Comment
 *
 * @category Class

 * @description Different type of filters can be passed in this object.

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class RecommendationRequestFilter extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'RecommendationRequestFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'searchText' => 'string',
        'multiValueFilter' => '\Walmart\Models\MP\US\AssortmentRecommendations\MultiValueFilterCriteria[]',
        'enumFilter' => '\Walmart\Models\MP\US\AssortmentRecommendations\EnumFilterCriteria[]',
        'rangeFilter' => '\Walmart\Models\MP\US\AssortmentRecommendations\RangeFilterCriteria[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'searchText' => null,
        'multiValueFilter' => null,
        'enumFilter' => null,
        'rangeFilter' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'searchText' => false,
        'multiValueFilter' => false,
        'enumFilter' => false,
        'rangeFilter' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'searchText' => 'searchText',
        'multiValueFilter' => 'multiValueFilter',
        'enumFilter' => 'enumFilter',
        'rangeFilter' => 'rangeFilter'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'searchText' => 'setSearchText',
        'multiValueFilter' => 'setMultiValueFilter',
        'enumFilter' => 'setEnumFilter',
        'rangeFilter' => 'setRangeFilter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'searchText' => 'getSearchText',
        'multiValueFilter' => 'getMultiValueFilter',
        'enumFilter' => 'getEnumFilter',
        'rangeFilter' => 'getRangeFilter'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('searchText', $data ?? [], null);
        $this->setIfExists('multiValueFilter', $data ?? [], null);
        $this->setIfExists('enumFilter', $data ?? [], null);
        $this->setIfExists('rangeFilter', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];


        if (!is_null($this->container['searchText']) && (mb_strlen($this->container['searchText']) < 3)) {
            $invalidProperties[] = "invalid value for 'searchText', the character length must be bigger than or equal to 3.";
        }







        return $invalidProperties;
    }

    /**
     * Gets searchText
     *
     * @return string|null
    
     */
    public function getSearchText()
    {
        return $this->container['searchText'];
    }

    /**
     * Sets searchText
     *
     * @param string|null $searchText To filter with a search text having a word that can be part of the recommended data.
     *
     * @return self
    
     */
    public function setSearchText($searchText)
    {
        if (is_null($searchText)) {
            throw new \InvalidArgumentException('non-nullable searchText cannot be null');
        }

        if ((mb_strlen($searchText) < 3)) {
            throw new \InvalidArgumentException('invalid length for $searchText when calling RecommendationRequestFilter., must be bigger than or equal to 3.');
        }






        $this->container['searchText'] = $searchText;
        return $this;
    }

    /**
     * Gets multiValueFilter
     *
     * @return \Walmart\Models\MP\US\AssortmentRecommendations\MultiValueFilterCriteria[]|null
    
     */
    public function getMultiValueFilter()
    {
        return $this->container['multiValueFilter'];
    }

    /**
     * Sets multiValueFilter
     *
     * @param \Walmart\Models\MP\US\AssortmentRecommendations\MultiValueFilterCriteria[]|null $multiValueFilter Filters based on multiple values associated with a specific parameter.  No parameter should be repeated.
     *
     * @return self
    
     */
    public function setMultiValueFilter($multiValueFilter)
    {
        if (is_null($multiValueFilter)) {
            throw new \InvalidArgumentException('non-nullable multiValueFilter cannot be null');
        }

        $this->container['multiValueFilter'] = $multiValueFilter;
        return $this;
    }

    /**
     * Gets enumFilter
     *
     * @return \Walmart\Models\MP\US\AssortmentRecommendations\EnumFilterCriteria[]|null
    
     */
    public function getEnumFilter()
    {
        return $this->container['enumFilter'];
    }

    /**
     * Sets enumFilter
     *
     * @param \Walmart\Models\MP\US\AssortmentRecommendations\EnumFilterCriteria[]|null $enumFilter Filter based on preset parameters and their associated values is possible with EnumFilter.   No parameter should be repeated.
     *
     * @return self
    
     */
    public function setEnumFilter($enumFilter)
    {
        if (is_null($enumFilter)) {
            throw new \InvalidArgumentException('non-nullable enumFilter cannot be null');
        }

        $this->container['enumFilter'] = $enumFilter;
        return $this;
    }

    /**
     * Gets rangeFilter
     *
     * @return \Walmart\Models\MP\US\AssortmentRecommendations\RangeFilterCriteria[]|null
    
     */
    public function getRangeFilter()
    {
        return $this->container['rangeFilter'];
    }

    /**
     * Sets rangeFilter
     *
     * @param \Walmart\Models\MP\US\AssortmentRecommendations\RangeFilterCriteria[]|null $rangeFilter Filter based on a range with RangeFilter. You must also pass a parameter along with any of the beginning or the ending points or both.  No parameter should be repeated.
     *
     * @return self
    
     */
    public function setRangeFilter($rangeFilter)
    {
        if (is_null($rangeFilter)) {
            throw new \InvalidArgumentException('non-nullable rangeFilter cannot be null');
        }

        $this->container['rangeFilter'] = $rangeFilter;
        return $this;
    }
}
