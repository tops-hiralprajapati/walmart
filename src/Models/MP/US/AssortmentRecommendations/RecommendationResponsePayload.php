<?php

/**
 * RecommendationResponsePayload
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Assortment Recommendations
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\AssortmentRecommendations;

use Walmart\Models\BaseModel;

/**
 * RecommendationResponsePayload Class Doc Comment
 *
 * @category Class

 * @description Payload in the response having the details about the item recommendations.

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class RecommendationResponsePayload extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'RecommendationResponsePayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'recommendationType' => 'string',
        'meta' => '\Walmart\Models\MP\US\AssortmentRecommendations\MetaDataResponse',
        'records' => '\Walmart\Models\MP\US\AssortmentRecommendations\ItemRecommendationPayload[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'recommendationType' => null,
        'meta' => null,
        'records' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'recommendationType' => false,
        'meta' => false,
        'records' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'recommendationType' => 'recommendationType',
        'meta' => 'meta',
        'records' => 'records'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'recommendationType' => 'setRecommendationType',
        'meta' => 'setMeta',
        'records' => 'setRecords'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'recommendationType' => 'getRecommendationType',
        'meta' => 'getMeta',
        'records' => 'getRecords'
    ];


    public const RECOMMENDATION_TYPE_ITEM = 'ITEM';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRecommendationTypeAllowableValues()
    {
        return [
            self::RECOMMENDATION_TYPE_ITEM,
        ];
    }

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('recommendationType', $data ?? [], null);
        $this->setIfExists('meta', $data ?? [], null);
        $this->setIfExists('records', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['recommendationType'] === null) {
            $invalidProperties[] = "'recommendationType' can't be null";
        }
        $allowedValues = $this->getRecommendationTypeAllowableValues();
        if (!is_null($this->container['recommendationType']) && !in_array($this->container['recommendationType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'recommendationType', must be one of '%s'",
                $this->container['recommendationType'],
                implode("', '", $allowedValues)
            );
        }


        return $invalidProperties;
    }

    /**
     * Gets recommendationType
     *
     * @return string
    
     */
    public function getRecommendationType()
    {
        return $this->container['recommendationType'];
    }

    /**
     * Sets recommendationType
     *
     * @param string $recommendationType | Attribute | Description | Data Type | | --- | ----------- | ------- | | ITEM | To get list of recommended items | string |
     *
     * @return self
    
     */
    public function setRecommendationType($recommendationType)
    {
        if (is_null($recommendationType)) {
            throw new \InvalidArgumentException('non-nullable recommendationType cannot be null');
        }
        $allowedValues = $this->getRecommendationTypeAllowableValues();
        if (!in_array($recommendationType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'recommendationType', must be one of '%s'",
                    $recommendationType,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['recommendationType'] = $recommendationType;
        return $this;
    }

    /**
     * Gets meta
     *
     * @return \Walmart\Models\MP\US\AssortmentRecommendations\MetaDataResponse|null
    
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param \Walmart\Models\MP\US\AssortmentRecommendations\MetaDataResponse|null $meta meta
     *
     * @return self
    
     */
    public function setMeta($meta)
    {
        if (is_null($meta)) {
            throw new \InvalidArgumentException('non-nullable meta cannot be null');
        }

        $this->container['meta'] = $meta;
        return $this;
    }

    /**
     * Gets records
     *
     * @return \Walmart\Models\MP\US\AssortmentRecommendations\ItemRecommendationPayload[]|null
    
     */
    public function getRecords()
    {
        return $this->container['records'];
    }

    /**
     * Sets records
     *
     * @param \Walmart\Models\MP\US\AssortmentRecommendations\ItemRecommendationPayload[]|null $records Information related to the item recommendations.
     *
     * @return self
    
     */
    public function setRecords($records)
    {
        if (is_null($records)) {
            throw new \InvalidArgumentException('non-nullable records cannot be null');
        }

        $this->container['records'] = $records;
        return $this;
    }
}
