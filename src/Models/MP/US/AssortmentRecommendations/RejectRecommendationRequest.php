<?php

/**
 * RejectRecommendationRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Assortment Recommendations
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\AssortmentRecommendations;

use Walmart\Models\BaseModel;

/**
 * RejectRecommendationRequest Class Doc Comment
 *
 * @category Class

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class RejectRecommendationRequest extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'RejectRecommendationRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'recommendationType' => 'string',
        'filterCriteria' => '\Walmart\Models\MP\US\AssortmentRecommendations\RecommendationRequestFilter',
        'itemRecommendationUniqueIds' => 'string[]',
        'rejectionCodes' => 'string[]',
        'customRejectionMessage' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'recommendationType' => null,
        'filterCriteria' => null,
        'itemRecommendationUniqueIds' => null,
        'rejectionCodes' => null,
        'customRejectionMessage' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'recommendationType' => false,
        'filterCriteria' => false,
        'itemRecommendationUniqueIds' => false,
        'rejectionCodes' => false,
        'customRejectionMessage' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'recommendationType' => 'recommendationType',
        'filterCriteria' => 'filterCriteria',
        'itemRecommendationUniqueIds' => 'itemRecommendationUniqueIds',
        'rejectionCodes' => 'rejectionCodes',
        'customRejectionMessage' => 'customRejectionMessage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'recommendationType' => 'setRecommendationType',
        'filterCriteria' => 'setFilterCriteria',
        'itemRecommendationUniqueIds' => 'setItemRecommendationUniqueIds',
        'rejectionCodes' => 'setRejectionCodes',
        'customRejectionMessage' => 'setCustomRejectionMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'recommendationType' => 'getRecommendationType',
        'filterCriteria' => 'getFilterCriteria',
        'itemRecommendationUniqueIds' => 'getItemRecommendationUniqueIds',
        'rejectionCodes' => 'getRejectionCodes',
        'customRejectionMessage' => 'getCustomRejectionMessage'
    ];


    public const RECOMMENDATION_TYPE_ITEM = 'ITEM';

    public const REJECTION_CODES_NOT_SELLING_THESE_ITEMS = 'NOT_SELLING_THESE_ITEMS';

    public const REJECTION_CODES_NOT_SELLING_THESE_BRANDS = 'NOT_SELLING_THESE_BRANDS';

    public const REJECTION_CODES_NOT_SELLING_THESE_CATEGORIES = 'NOT_SELLING_THESE_CATEGORIES';

    public const REJECTION_CODES_LIMITED_TO_OTHER_MARKETPLACE = 'LIMITED_TO_OTHER_MARKETPLACE';

    public const REJECTION_CODES_ALREADY_SELLING_ON_WALMART = 'ALREADY_SELLING_ON_WALMART';

    public const REJECTION_CODES_OTHER_REASON = 'OTHER_REASON';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRecommendationTypeAllowableValues()
    {
        return [
            self::RECOMMENDATION_TYPE_ITEM,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRejectionCodesAllowableValues()
    {
        return [
            self::REJECTION_CODES_NOT_SELLING_THESE_ITEMS,
            self::REJECTION_CODES_NOT_SELLING_THESE_BRANDS,
            self::REJECTION_CODES_NOT_SELLING_THESE_CATEGORIES,
            self::REJECTION_CODES_LIMITED_TO_OTHER_MARKETPLACE,
            self::REJECTION_CODES_ALREADY_SELLING_ON_WALMART,
            self::REJECTION_CODES_OTHER_REASON,
        ];
    }

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('recommendationType', $data ?? [], null);
        $this->setIfExists('filterCriteria', $data ?? [], null);
        $this->setIfExists('itemRecommendationUniqueIds', $data ?? [], null);
        $this->setIfExists('rejectionCodes', $data ?? [], null);
        $this->setIfExists('customRejectionMessage', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['recommendationType'] === null) {
            $invalidProperties[] = "'recommendationType' can't be null";
        }
        $allowedValues = $this->getRecommendationTypeAllowableValues();
        if (!is_null($this->container['recommendationType']) && !in_array($this->container['recommendationType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'recommendationType', must be one of '%s'",
                $this->container['recommendationType'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['rejectionCodes'] === null) {
            $invalidProperties[] = "'rejectionCodes' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Gets recommendationType
     *
     * @return string
    
     */
    public function getRecommendationType()
    {
        return $this->container['recommendationType'];
    }

    /**
     * Sets recommendationType
     *
     * @param string $recommendationType | Attribute | Description | Data Type | | --- | ----------- | ------- | | ITEM | To reject list of recommended items | string |
     *
     * @return self
    
     */
    public function setRecommendationType($recommendationType)
    {
        if (is_null($recommendationType)) {
            throw new \InvalidArgumentException('non-nullable recommendationType cannot be null');
        }
        $allowedValues = $this->getRecommendationTypeAllowableValues();
        if (!in_array($recommendationType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'recommendationType', must be one of '%s'",
                    $recommendationType,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['recommendationType'] = $recommendationType;
        return $this;
    }

    /**
     * Gets filterCriteria
     *
     * @return \Walmart\Models\MP\US\AssortmentRecommendations\RecommendationRequestFilter|null
    
     */
    public function getFilterCriteria()
    {
        return $this->container['filterCriteria'];
    }

    /**
     * Sets filterCriteria
     *
     * @param \Walmart\Models\MP\US\AssortmentRecommendations\RecommendationRequestFilter|null $filterCriteria filterCriteria
     *
     * @return self
    
     */
    public function setFilterCriteria($filterCriteria)
    {
        if (is_null($filterCriteria)) {
            throw new \InvalidArgumentException('non-nullable filterCriteria cannot be null');
        }

        $this->container['filterCriteria'] = $filterCriteria;
        return $this;
    }

    /**
     * Gets itemRecommendationUniqueIds
     *
     * @return string[]|null
    
     */
    public function getItemRecommendationUniqueIds()
    {
        return $this->container['itemRecommendationUniqueIds'];
    }

    /**
     * Sets itemRecommendationUniqueIds
     *
     * @param string[]|null $itemRecommendationUniqueIds List of item recommendation unique ids to reject.  The size of the list should not exceed 100.  You cannot add filter criteria along with the itemRecommendationUniqueIds list
     *
     * @return self
    
     */
    public function setItemRecommendationUniqueIds($itemRecommendationUniqueIds)
    {
        if (is_null($itemRecommendationUniqueIds)) {
            throw new \InvalidArgumentException('non-nullable itemRecommendationUniqueIds cannot be null');
        }

        $this->container['itemRecommendationUniqueIds'] = $itemRecommendationUniqueIds;
        return $this;
    }

    /**
     * Gets rejectionCodes
     *
     * @return string[]
    
     */
    public function getRejectionCodes()
    {
        return $this->container['rejectionCodes'];
    }

    /**
     * Sets rejectionCodes
     *
     * @param string[] $rejectionCodes List of rejection codes   | Attribute | Description | Data Type | | --- | ----------- | ------- | | NOT_SELLING_THESE_ITEMS | As a seller, I don’t intend to sell these items on Walmart  | string | | NOT_SELLING_THESE_BRANDS | As a seller, I don’t intend to sell these brands on Walmart  | string | | NOT_SELLING_THESE_CATEGORIES | As a seller, I don’t intend to sell these categories on Walmart  | string | | LIMITED_TO_OTHER_MARKETPLACE | As a seller, I intend to sell the rejected items only on other marketplaces  | string | | ALREADY_SELLING_ON_WALMART | I am already selling these items on Walmart  | string | | OTHER_REASON | Other reason for rejecting the items. customRejectionMessage is mandatory to pass if rejectionCode is OTHER_REASON.  | string |
     *
     * @return self
    
     */
    public function setRejectionCodes($rejectionCodes)
    {
        if (is_null($rejectionCodes)) {
            throw new \InvalidArgumentException('non-nullable rejectionCodes cannot be null');
        }
        $allowedValues = $this->getRejectionCodesAllowableValues();
        if (array_diff($rejectionCodes, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'rejectionCodes', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rejectionCodes'] = $rejectionCodes;
        return $this;
    }

    /**
     * Gets customRejectionMessage
     *
     * @return string|null
    
     */
    public function getCustomRejectionMessage()
    {
        return $this->container['customRejectionMessage'];
    }

    /**
     * Sets customRejectionMessage
     *
     * @param string|null $customRejectionMessage Custom rejection message if the rejection code is OTHER_REASON. This is required only when the rejectionCodes has OTHER_REASON in the list. Maximum length of the message is 500
     *
     * @return self
    
     */
    public function setCustomRejectionMessage($customRejectionMessage)
    {
        if (is_null($customRejectionMessage)) {
            throw new \InvalidArgumentException('non-nullable customRejectionMessage cannot be null');
        }

        $this->container['customRejectionMessage'] = $customRejectionMessage;
        return $this;
    }
}
