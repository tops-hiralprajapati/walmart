<?php

/**
 * ChargeDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Fulfillment Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\Fulfillment;

use Walmart\Models\BaseModel;

/**
 * ChargeDetails Class Doc Comment
 *
 * @category Class

 * @description Item charge details

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class ChargeDetails extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ChargeDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'chargeCategory' => 'string',
        'chargeName' => 'string',
        'chargePerUnit' => '\Walmart\Models\MP\US\Fulfillment\CurrencyType',
        'taxDetails' => '\Walmart\Models\MP\US\Fulfillment\TaxDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'chargeCategory' => null,
        'chargeName' => null,
        'chargePerUnit' => null,
        'taxDetails' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'chargeCategory' => false,
        'chargeName' => false,
        'chargePerUnit' => false,
        'taxDetails' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'chargeCategory' => 'chargeCategory',
        'chargeName' => 'chargeName',
        'chargePerUnit' => 'chargePerUnit',
        'taxDetails' => 'taxDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'chargeCategory' => 'setChargeCategory',
        'chargeName' => 'setChargeName',
        'chargePerUnit' => 'setChargePerUnit',
        'taxDetails' => 'setTaxDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'chargeCategory' => 'getChargeCategory',
        'chargeName' => 'getChargeName',
        'chargePerUnit' => 'getChargePerUnit',
        'taxDetails' => 'getTaxDetails'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('chargeCategory', $data ?? [], null);
        $this->setIfExists('chargeName', $data ?? [], null);
        $this->setIfExists('chargePerUnit', $data ?? [], null);
        $this->setIfExists('taxDetails', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['chargeCategory'] === null) {
            $invalidProperties[] = "'chargeCategory' can't be null";
        }
        if ($this->container['chargeName'] === null) {
            $invalidProperties[] = "'chargeName' can't be null";
        }
        if ($this->container['chargePerUnit'] === null) {
            $invalidProperties[] = "'chargePerUnit' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Gets chargeCategory
     *
     * @return string
    
     */
    public function getChargeCategory()
    {
        return $this->container['chargeCategory'];
    }

    /**
     * Sets chargeCategory
     *
     * @param string $chargeCategory Charge category, for example: 'PRODUCT'
     *
     * @return self
    
     */
    public function setChargeCategory($chargeCategory)
    {
        if (is_null($chargeCategory)) {
            throw new \InvalidArgumentException('non-nullable chargeCategory cannot be null');
        }

        $this->container['chargeCategory'] = $chargeCategory;
        return $this;
    }

    /**
     * Gets chargeName
     *
     * @return string
    
     */
    public function getChargeName()
    {
        return $this->container['chargeName'];
    }

    /**
     * Sets chargeName
     *
     * @param string $chargeName Name of the charge, for example: 'Sale Price'
     *
     * @return self
    
     */
    public function setChargeName($chargeName)
    {
        if (is_null($chargeName)) {
            throw new \InvalidArgumentException('non-nullable chargeName cannot be null');
        }

        $this->container['chargeName'] = $chargeName;
        return $this;
    }

    /**
     * Gets chargePerUnit
     *
     * @return \Walmart\Models\MP\US\Fulfillment\CurrencyType
    
     */
    public function getChargePerUnit()
    {
        return $this->container['chargePerUnit'];
    }

    /**
     * Sets chargePerUnit
     *
     * @param \Walmart\Models\MP\US\Fulfillment\CurrencyType $chargePerUnit chargePerUnit
     *
     * @return self
    
     */
    public function setChargePerUnit($chargePerUnit)
    {
        if (is_null($chargePerUnit)) {
            throw new \InvalidArgumentException('non-nullable chargePerUnit cannot be null');
        }

        $this->container['chargePerUnit'] = $chargePerUnit;
        return $this;
    }

    /**
     * Gets taxDetails
     *
     * @return \Walmart\Models\MP\US\Fulfillment\TaxDetails|null
    
     */
    public function getTaxDetails()
    {
        return $this->container['taxDetails'];
    }

    /**
     * Sets taxDetails
     *
     * @param \Walmart\Models\MP\US\Fulfillment\TaxDetails|null $taxDetails taxDetails
     *
     * @return self
    
     */
    public function setTaxDetails($taxDetails)
    {
        if (is_null($taxDetails)) {
            throw new \InvalidArgumentException('non-nullable taxDetails cannot be null');
        }

        $this->container['taxDetails'] = $taxDetails;
        return $this;
    }
}
