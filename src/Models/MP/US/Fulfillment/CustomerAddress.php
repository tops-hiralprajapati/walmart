<?php

/**
 * CustomerAddress
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Fulfillment Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\Fulfillment;

use Walmart\Models\BaseModel;

/**
 * CustomerAddress Class Doc Comment
 *
 * @category Class

 * @description Customer address details

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class CustomerAddress extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'CustomerAddress';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'line1' => 'string',
        'line2' => 'string',
        'city' => 'string',
        'state' => 'string',
        'country' => 'string',
        'zip' => 'string',
        'addressType' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'line1' => null,
        'line2' => null,
        'city' => null,
        'state' => null,
        'country' => null,
        'zip' => null,
        'addressType' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'line1' => false,
        'line2' => false,
        'city' => false,
        'state' => false,
        'country' => false,
        'zip' => false,
        'addressType' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'line1' => 'line1',
        'line2' => 'line2',
        'city' => 'city',
        'state' => 'state',
        'country' => 'country',
        'zip' => 'zip',
        'addressType' => 'addressType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'line1' => 'setLine1',
        'line2' => 'setLine2',
        'city' => 'setCity',
        'state' => 'setState',
        'country' => 'setCountry',
        'zip' => 'setZip',
        'addressType' => 'setAddressType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'line1' => 'getLine1',
        'line2' => 'getLine2',
        'city' => 'getCity',
        'state' => 'getState',
        'country' => 'getCountry',
        'zip' => 'getZip',
        'addressType' => 'getAddressType'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('line1', $data ?? [], null);
        $this->setIfExists('line2', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('zip', $data ?? [], null);
        $this->setIfExists('addressType', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['line1'] === null) {
            $invalidProperties[] = "'line1' can't be null";
        }
        if ((mb_strlen($this->container['line1']) > 120)) {
            $invalidProperties[] = "invalid value for 'line1', the character length must be smaller than or equal to 120.";
        }


        if ((mb_strlen($this->container['line1']) < 1)) {
            $invalidProperties[] = "invalid value for 'line1', the character length must be bigger than or equal to 1.";
        }






        if (!is_null($this->container['line2']) && (mb_strlen($this->container['line2']) > 120)) {
            $invalidProperties[] = "invalid value for 'line2', the character length must be smaller than or equal to 120.";
        }


        if (!is_null($this->container['line2']) && (mb_strlen($this->container['line2']) < 1)) {
            $invalidProperties[] = "invalid value for 'line2', the character length must be bigger than or equal to 1.";
        }






        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ((mb_strlen($this->container['city']) > 32)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 32.";
        }


        if ((mb_strlen($this->container['city']) < 1)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 1.";
        }






        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ((mb_strlen($this->container['state']) > 2)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be smaller than or equal to 2.";
        }


        if ((mb_strlen($this->container['state']) < 1)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be bigger than or equal to 1.";
        }






        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ((mb_strlen($this->container['country']) > 3)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 3.";
        }


        if ((mb_strlen($this->container['country']) < 1)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be bigger than or equal to 1.";
        }






        if ($this->container['zip'] === null) {
            $invalidProperties[] = "'zip' can't be null";
        }
        if ((mb_strlen($this->container['zip']) > 5)) {
            $invalidProperties[] = "invalid value for 'zip', the character length must be smaller than or equal to 5.";
        }


        if ((mb_strlen($this->container['zip']) < 1)) {
            $invalidProperties[] = "invalid value for 'zip', the character length must be bigger than or equal to 1.";
        }







        return $invalidProperties;
    }

    /**
     * Gets line1
     *
     * @return string
    
     */
    public function getLine1()
    {
        return $this->container['line1'];
    }

    /**
     * Sets line1
     *
     * @param string $line1 First line of the address
     *
     * @return self
    
     */
    public function setLine1($line1)
    {
        if (is_null($line1)) {
            throw new \InvalidArgumentException('non-nullable line1 cannot be null');
        }
        if ((mb_strlen($line1) > 120)) {
            throw new \InvalidArgumentException('invalid length for $line1 when calling CustomerAddress., must be smaller than or equal to 120.');
        }
        if ((mb_strlen($line1) < 1)) {
            throw new \InvalidArgumentException('invalid length for $line1 when calling CustomerAddress., must be bigger than or equal to 1.');
        }






        $this->container['line1'] = $line1;
        return $this;
    }

    /**
     * Gets line2
     *
     * @return string|null
    
     */
    public function getLine2()
    {
        return $this->container['line2'];
    }

    /**
     * Sets line2
     *
     * @param string|null $line2 Second line of the address
     *
     * @return self
    
     */
    public function setLine2($line2)
    {
        if (is_null($line2)) {
            throw new \InvalidArgumentException('non-nullable line2 cannot be null');
        }
        if ((mb_strlen($line2) > 120)) {
            throw new \InvalidArgumentException('invalid length for $line2 when calling CustomerAddress., must be smaller than or equal to 120.');
        }
        if ((mb_strlen($line2) < 1)) {
            throw new \InvalidArgumentException('invalid length for $line2 when calling CustomerAddress., must be bigger than or equal to 1.');
        }






        $this->container['line2'] = $line2;
        return $this;
    }

    /**
     * Gets city
     *
     * @return string
    
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city City where the address is located in
     *
     * @return self
    
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        if ((mb_strlen($city) > 32)) {
            throw new \InvalidArgumentException('invalid length for $city when calling CustomerAddress., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($city) < 1)) {
            throw new \InvalidArgumentException('invalid length for $city when calling CustomerAddress., must be bigger than or equal to 1.');
        }






        $this->container['city'] = $city;
        return $this;
    }

    /**
     * Gets state
     *
     * @return string
    
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State (two letter) code where the address is located in, for example: 'MI'
     *
     * @return self
    
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        if ((mb_strlen($state) > 2)) {
            throw new \InvalidArgumentException('invalid length for $state when calling CustomerAddress., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($state) < 1)) {
            throw new \InvalidArgumentException('invalid length for $state when calling CustomerAddress., must be bigger than or equal to 1.');
        }






        $this->container['state'] = $state;
        return $this;
    }

    /**
     * Gets country
     *
     * @return string
    
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Country code where the address is located in, for example: 'USA'
     *
     * @return self
    
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        if ((mb_strlen($country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $country when calling CustomerAddress., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($country) < 1)) {
            throw new \InvalidArgumentException('invalid length for $country when calling CustomerAddress., must be bigger than or equal to 1.');
        }






        $this->container['country'] = $country;
        return $this;
    }

    /**
     * Gets zip
     *
     * @return string
    
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string $zip ZIP or postal code where the address is located in, for example: '48083'
     *
     * @return self
    
     */
    public function setZip($zip)
    {
        if (is_null($zip)) {
            throw new \InvalidArgumentException('non-nullable zip cannot be null');
        }
        if ((mb_strlen($zip) > 5)) {
            throw new \InvalidArgumentException('invalid length for $zip when calling CustomerAddress., must be smaller than or equal to 5.');
        }
        if ((mb_strlen($zip) < 1)) {
            throw new \InvalidArgumentException('invalid length for $zip when calling CustomerAddress., must be bigger than or equal to 1.');
        }






        $this->container['zip'] = $zip;
        return $this;
    }

    /**
     * Gets addressType
     *
     * @return string|null
    
     */
    public function getAddressType()
    {
        return $this->container['addressType'];
    }

    /**
     * Sets addressType
     *
     * @param string|null $addressType The address type. Currently supported: 'RESIDENTIAL'
     *
     * @return self
    
     */
    public function setAddressType($addressType)
    {
        if (is_null($addressType)) {
            throw new \InvalidArgumentException('non-nullable addressType cannot be null');
        }

        $this->container['addressType'] = $addressType;
        return $this;
    }
}
