<?php

/**
 * OrderCancelItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Fulfillment Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\Fulfillment;

use Walmart\Models\BaseModel;

/**
 * OrderCancelItem Class Doc Comment
 *
 * @category Class

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class OrderCancelItem extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'OrderCancelItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'sellerLineId' => 'string',
        'qty' => '\Walmart\Models\MP\US\Fulfillment\CustomerOrderItemQuantityType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'sellerLineId' => null,
        'qty' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sellerLineId' => false,
        'qty' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'sellerLineId' => 'sellerLineId',
        'qty' => 'qty'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'sellerLineId' => 'setSellerLineId',
        'qty' => 'setQty'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'sellerLineId' => 'getSellerLineId',
        'qty' => 'getQty'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sellerLineId', $data ?? [], null);
        $this->setIfExists('qty', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sellerLineId'] === null) {
            $invalidProperties[] = "'sellerLineId' can't be null";
        }
        if ((mb_strlen($this->container['sellerLineId']) > 32)) {
            $invalidProperties[] = "invalid value for 'sellerLineId', the character length must be smaller than or equal to 32.";
        }


        if ((mb_strlen($this->container['sellerLineId']) < 1)) {
            $invalidProperties[] = "invalid value for 'sellerLineId', the character length must be bigger than or equal to 1.";
        }






        if ($this->container['qty'] === null) {
            $invalidProperties[] = "'qty' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Gets sellerLineId
     *
     * @return string
    
     */
    public function getSellerLineId()
    {
        return $this->container['sellerLineId'];
    }

    /**
     * Sets sellerLineId
     *
     * @param string $sellerLineId sellerLineId
     *
     * @return self
    
     */
    public function setSellerLineId($sellerLineId)
    {
        if (is_null($sellerLineId)) {
            throw new \InvalidArgumentException('non-nullable sellerLineId cannot be null');
        }
        if ((mb_strlen($sellerLineId) > 32)) {
            throw new \InvalidArgumentException('invalid length for $sellerLineId when calling OrderCancelItem., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($sellerLineId) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sellerLineId when calling OrderCancelItem., must be bigger than or equal to 1.');
        }






        $this->container['sellerLineId'] = $sellerLineId;
        return $this;
    }

    /**
     * Gets qty
     *
     * @return \Walmart\Models\MP\US\Fulfillment\CustomerOrderItemQuantityType
    
     */
    public function getQty()
    {
        return $this->container['qty'];
    }

    /**
     * Sets qty
     *
     * @param \Walmart\Models\MP\US\Fulfillment\CustomerOrderItemQuantityType $qty qty
     *
     * @return self
    
     */
    public function setQty($qty)
    {
        if (is_null($qty)) {
            throw new \InvalidArgumentException('non-nullable qty cannot be null');
        }

        $this->container['qty'] = $qty;
        return $this;
    }
}
