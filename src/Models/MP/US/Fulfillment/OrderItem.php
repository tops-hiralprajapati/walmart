<?php

/**
 * OrderItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Fulfillment Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\Fulfillment;

use Walmart\Models\BaseModel;

/**
 * OrderItem Class Doc Comment
 *
 * @category Class

 * @description inbound shipment request line items

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class OrderItem extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'OrderItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'productId' => 'string',
        'productType' => 'string',
        'sku' => 'string',
        'itemDesc' => 'string',
        'itemQty' => 'int',
        'vendorPackQty' => 'int',
        'innerPackQty' => 'int',
        'expectedDeliveryDate' => '\DateTime',
        'addOnServices' => 'string[]',
        'itemNbr' => 'int',
        'dimensions' => 'float[]',
        'itemWeightQty' => 'float',
        'nonSortItem' => 'bool',
        'shipNode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'productId' => null,
        'productType' => null,
        'sku' => null,
        'itemDesc' => null,
        'itemQty' => 'int32',
        'vendorPackQty' => 'int32',
        'innerPackQty' => 'int32',
        'expectedDeliveryDate' => 'date-time',
        'addOnServices' => null,
        'itemNbr' => 'int32',
        'dimensions' => 'float',
        'itemWeightQty' => 'float',
        'nonSortItem' => null,
        'shipNode' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'productId' => false,
        'productType' => false,
        'sku' => false,
        'itemDesc' => false,
        'itemQty' => false,
        'vendorPackQty' => false,
        'innerPackQty' => false,
        'expectedDeliveryDate' => false,
        'addOnServices' => false,
        'itemNbr' => false,
        'dimensions' => false,
        'itemWeightQty' => false,
        'nonSortItem' => false,
        'shipNode' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'productId' => 'productId',
        'productType' => 'productType',
        'sku' => 'sku',
        'itemDesc' => 'itemDesc',
        'itemQty' => 'itemQty',
        'vendorPackQty' => 'vendorPackQty',
        'innerPackQty' => 'innerPackQty',
        'expectedDeliveryDate' => 'expectedDeliveryDate',
        'addOnServices' => 'addOnServices',
        'itemNbr' => 'itemNbr',
        'dimensions' => 'dimensions',
        'itemWeightQty' => 'itemWeightQty',
        'nonSortItem' => 'nonSortItem',
        'shipNode' => 'shipNode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'productId' => 'setProductId',
        'productType' => 'setProductType',
        'sku' => 'setSku',
        'itemDesc' => 'setItemDesc',
        'itemQty' => 'setItemQty',
        'vendorPackQty' => 'setVendorPackQty',
        'innerPackQty' => 'setInnerPackQty',
        'expectedDeliveryDate' => 'setExpectedDeliveryDate',
        'addOnServices' => 'setAddOnServices',
        'itemNbr' => 'setItemNbr',
        'dimensions' => 'setDimensions',
        'itemWeightQty' => 'setItemWeightQty',
        'nonSortItem' => 'setNonSortItem',
        'shipNode' => 'setShipNode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'productId' => 'getProductId',
        'productType' => 'getProductType',
        'sku' => 'getSku',
        'itemDesc' => 'getItemDesc',
        'itemQty' => 'getItemQty',
        'vendorPackQty' => 'getVendorPackQty',
        'innerPackQty' => 'getInnerPackQty',
        'expectedDeliveryDate' => 'getExpectedDeliveryDate',
        'addOnServices' => 'getAddOnServices',
        'itemNbr' => 'getItemNbr',
        'dimensions' => 'getDimensions',
        'itemWeightQty' => 'getItemWeightQty',
        'nonSortItem' => 'getNonSortItem',
        'shipNode' => 'getShipNode'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('productId', $data ?? [], null);
        $this->setIfExists('productType', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('itemDesc', $data ?? [], null);
        $this->setIfExists('itemQty', $data ?? [], null);
        $this->setIfExists('vendorPackQty', $data ?? [], null);
        $this->setIfExists('innerPackQty', $data ?? [], null);
        $this->setIfExists('expectedDeliveryDate', $data ?? [], null);
        $this->setIfExists('addOnServices', $data ?? [], null);
        $this->setIfExists('itemNbr', $data ?? [], null);
        $this->setIfExists('dimensions', $data ?? [], null);
        $this->setIfExists('itemWeightQty', $data ?? [], null);
        $this->setIfExists('nonSortItem', $data ?? [], null);
        $this->setIfExists('shipNode', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['productId'] === null) {
            $invalidProperties[] = "'productId' can't be null";
        }
        if ($this->container['productType'] === null) {
            $invalidProperties[] = "'productType' can't be null";
        }
        if ($this->container['sku'] === null) {
            $invalidProperties[] = "'sku' can't be null";
        }
        if ($this->container['itemDesc'] === null) {
            $invalidProperties[] = "'itemDesc' can't be null";
        }
        if ($this->container['itemQty'] === null) {
            $invalidProperties[] = "'itemQty' can't be null";
        }



        if (($this->container['itemQty'] < 1)) {
            $invalidProperties[] = "invalid value for 'itemQty', must be bigger than or equal to 1.";
        }




        if ($this->container['vendorPackQty'] === null) {
            $invalidProperties[] = "'vendorPackQty' can't be null";
        }



        if (($this->container['vendorPackQty'] < 1)) {
            $invalidProperties[] = "invalid value for 'vendorPackQty', must be bigger than or equal to 1.";
        }




        if ($this->container['innerPackQty'] === null) {
            $invalidProperties[] = "'innerPackQty' can't be null";
        }



        if (($this->container['innerPackQty'] < 1)) {
            $invalidProperties[] = "invalid value for 'innerPackQty', must be bigger than or equal to 1.";
        }




        if ($this->container['expectedDeliveryDate'] === null) {
            $invalidProperties[] = "'expectedDeliveryDate' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Gets productId
     *
     * @return string
    
     */
    public function getProductId()
    {
        return $this->container['productId'];
    }

    /**
     * Sets productId
     *
     * @param string $productId Unique ID identifying product
     *
     * @return self
    
     */
    public function setProductId($productId)
    {
        if (is_null($productId)) {
            throw new \InvalidArgumentException('non-nullable productId cannot be null');
        }

        $this->container['productId'] = $productId;
        return $this;
    }

    /**
     * Gets productType
     *
     * @return string
    
     */
    public function getProductType()
    {
        return $this->container['productType'];
    }

    /**
     * Sets productType
     *
     * @param string $productType Supported product types are GTIN
     *
     * @return self
    
     */
    public function setProductType($productType)
    {
        if (is_null($productType)) {
            throw new \InvalidArgumentException('non-nullable productType cannot be null');
        }

        $this->container['productType'] = $productType;
        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
    
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku Seller Item ID
     *
     * @return self
    
     */
    public function setSku($sku)
    {
        if (is_null($sku)) {
            throw new \InvalidArgumentException('non-nullable sku cannot be null');
        }

        $this->container['sku'] = $sku;
        return $this;
    }

    /**
     * Gets itemDesc
     *
     * @return string
    
     */
    public function getItemDesc()
    {
        return $this->container['itemDesc'];
    }

    /**
     * Sets itemDesc
     *
     * @param string $itemDesc Item description
     *
     * @return self
    
     */
    public function setItemDesc($itemDesc)
    {
        if (is_null($itemDesc)) {
            throw new \InvalidArgumentException('non-nullable itemDesc cannot be null');
        }

        $this->container['itemDesc'] = $itemDesc;
        return $this;
    }

    /**
     * Gets itemQty
     *
     * @return int
    
     */
    public function getItemQty()
    {
        return $this->container['itemQty'];
    }

    /**
     * Sets itemQty
     *
     * @param int $itemQty Total number of sellable units
     *
     * @return self
    
     */
    public function setItemQty($itemQty)
    {
        if (is_null($itemQty)) {
            throw new \InvalidArgumentException('non-nullable itemQty cannot be null');
        }



        if (($itemQty < 1)) {
            throw new \InvalidArgumentException('invalid value for $itemQty when calling OrderItem., must be bigger than or equal to 1.');
        }




        $this->container['itemQty'] = $itemQty;
        return $this;
    }

    /**
     * Gets vendorPackQty
     *
     * @return int
    
     */
    public function getVendorPackQty()
    {
        return $this->container['vendorPackQty'];
    }

    /**
     * Sets vendorPackQty
     *
     * @param int $vendorPackQty Total number of cases
     *
     * @return self
    
     */
    public function setVendorPackQty($vendorPackQty)
    {
        if (is_null($vendorPackQty)) {
            throw new \InvalidArgumentException('non-nullable vendorPackQty cannot be null');
        }



        if (($vendorPackQty < 1)) {
            throw new \InvalidArgumentException('invalid value for $vendorPackQty when calling OrderItem., must be bigger than or equal to 1.');
        }




        $this->container['vendorPackQty'] = $vendorPackQty;
        return $this;
    }

    /**
     * Gets innerPackQty
     *
     * @return int
    
     */
    public function getInnerPackQty()
    {
        return $this->container['innerPackQty'];
    }

    /**
     * Sets innerPackQty
     *
     * @param int $innerPackQty Total number of sellable units per case
     *
     * @return self
    
     */
    public function setInnerPackQty($innerPackQty)
    {
        if (is_null($innerPackQty)) {
            throw new \InvalidArgumentException('non-nullable innerPackQty cannot be null');
        }



        if (($innerPackQty < 1)) {
            throw new \InvalidArgumentException('invalid value for $innerPackQty when calling OrderItem., must be bigger than or equal to 1.');
        }




        $this->container['innerPackQty'] = $innerPackQty;
        return $this;
    }

    /**
     * Gets expectedDeliveryDate
     *
     * @return \DateTime
    
     */
    public function getExpectedDeliveryDate()
    {
        return $this->container['expectedDeliveryDate'];
    }

    /**
     * Sets expectedDeliveryDate
     *
     * @param \DateTime $expectedDeliveryDate expected delivery date for shipment
     *
     * @return self
    
     */
    public function setExpectedDeliveryDate($expectedDeliveryDate)
    {
        if (is_null($expectedDeliveryDate)) {
            throw new \InvalidArgumentException('non-nullable expectedDeliveryDate cannot be null');
        }

        $this->container['expectedDeliveryDate'] = $expectedDeliveryDate;
        return $this;
    }

    /**
     * Gets addOnServices
     *
     * @return string[]|null
    
     */
    public function getAddOnServices()
    {
        return $this->container['addOnServices'];
    }

    /**
     * Sets addOnServices
     *
     * @param string[]|null $addOnServices Indicate whether add-on services (e.g. item labeling or poly bagging) are needed
     *
     * @return self
    
     */
    public function setAddOnServices($addOnServices)
    {
        if (is_null($addOnServices)) {
            throw new \InvalidArgumentException('non-nullable addOnServices cannot be null');
        }

        $this->container['addOnServices'] = $addOnServices;
        return $this;
    }

    /**
     * Gets itemNbr
     *
     * @return int|null
    
     */
    public function getItemNbr()
    {
        return $this->container['itemNbr'];
    }

    /**
     * Sets itemNbr
     *
     * @param int|null $itemNbr itemNbr
     *
     * @return self
    
     */
    public function setItemNbr($itemNbr)
    {
        if (is_null($itemNbr)) {
            throw new \InvalidArgumentException('non-nullable itemNbr cannot be null');
        }

        $this->container['itemNbr'] = $itemNbr;
        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return float[]|null
    
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param float[]|null $dimensions dimensions
     *
     * @return self
    
     */
    public function setDimensions($dimensions)
    {
        if (is_null($dimensions)) {
            throw new \InvalidArgumentException('non-nullable dimensions cannot be null');
        }

        $this->container['dimensions'] = $dimensions;
        return $this;
    }

    /**
     * Gets itemWeightQty
     *
     * @return float|null
    
     */
    public function getItemWeightQty()
    {
        return $this->container['itemWeightQty'];
    }

    /**
     * Sets itemWeightQty
     *
     * @param float|null $itemWeightQty itemWeightQty
     *
     * @return self
    
     */
    public function setItemWeightQty($itemWeightQty)
    {
        if (is_null($itemWeightQty)) {
            throw new \InvalidArgumentException('non-nullable itemWeightQty cannot be null');
        }

        $this->container['itemWeightQty'] = $itemWeightQty;
        return $this;
    }

    /**
     * Gets nonSortItem
     *
     * @return bool|null
    
     */
    public function getNonSortItem()
    {
        return $this->container['nonSortItem'];
    }

    /**
     * Sets nonSortItem
     *
     * @param bool|null $nonSortItem nonSortItem
     *
     * @return self
    
     */
    public function setNonSortItem($nonSortItem)
    {
        if (is_null($nonSortItem)) {
            throw new \InvalidArgumentException('non-nullable nonSortItem cannot be null');
        }

        $this->container['nonSortItem'] = $nonSortItem;
        return $this;
    }

    /**
     * Gets shipNode
     *
     * @return string|null
    
     */
    public function getShipNode()
    {
        return $this->container['shipNode'];
    }

    /**
     * Sets shipNode
     *
     * @param string|null $shipNode shipNode
     *
     * @return self
    
     */
    public function setShipNode($shipNode)
    {
        if (is_null($shipNode)) {
            throw new \InvalidArgumentException('non-nullable shipNode cannot be null');
        }

        $this->container['shipNode'] = $shipNode;
        return $this;
    }
}
