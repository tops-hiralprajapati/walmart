<?php

/**
 * RateQuoteV2
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Fulfillment Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\Fulfillment;

use Walmart\Models\BaseModel;

/**
 * RateQuoteV2 Class Doc Comment
 *
 * @category Class

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class RateQuoteV2 extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'RateQuoteV2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'quoteId' => 'string',
        'estimatedDeliveryDateTime' => '\DateTime',
        'carrier' => '\Walmart\Models\MP\US\Fulfillment\Carrier',
        'currency' => 'string',
        'discountCharge' => 'float',
        'netCharge' => 'float',
        'surchargeType' => 'string',
        'surchargeValue' => 'string',
        'totalBillingWeight' => 'float',
        'status' => 'string',
        'transitDays' => 'string',
        'effectiveDate' => '\DateTime',
        'expiryDate' => '\DateTime',
        'mode' => 'string',
        'sellerFreightClassCode' => 'string',
        'freightCharge' => 'float',
        'fuelCharge' => 'float',
        'totalWeight' => 'float',
        'totalVolume' => 'float',
        'equipmentTypeCode' => 'string',
        'serviceCode' => 'string',
        'numberOfPallets' => 'int',
        'nominalCharge' => 'float',
        'assessorialCharge' => 'float',
        'serviceCharge' => 'float',
        'minimumCharge' => 'float',
        'declaredValue' => 'string',
        'mixedSKUs' => 'int',
        'singleSKUs' => 'int',
        'freightReadyDate' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'quoteId' => null,
        'estimatedDeliveryDateTime' => 'date-time',
        'carrier' => null,
        'currency' => null,
        'discountCharge' => 'float',
        'netCharge' => 'float',
        'surchargeType' => null,
        'surchargeValue' => null,
        'totalBillingWeight' => 'float',
        'status' => null,
        'transitDays' => null,
        'effectiveDate' => 'date-time',
        'expiryDate' => 'date-time',
        'mode' => null,
        'sellerFreightClassCode' => null,
        'freightCharge' => 'float',
        'fuelCharge' => 'float',
        'totalWeight' => 'float',
        'totalVolume' => 'float',
        'equipmentTypeCode' => null,
        'serviceCode' => null,
        'numberOfPallets' => 'int32',
        'nominalCharge' => 'float',
        'assessorialCharge' => 'float',
        'serviceCharge' => 'float',
        'minimumCharge' => 'float',
        'declaredValue' => null,
        'mixedSKUs' => 'int32',
        'singleSKUs' => 'int32',
        'freightReadyDate' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'quoteId' => false,
        'estimatedDeliveryDateTime' => false,
        'carrier' => false,
        'currency' => false,
        'discountCharge' => false,
        'netCharge' => false,
        'surchargeType' => false,
        'surchargeValue' => false,
        'totalBillingWeight' => false,
        'status' => false,
        'transitDays' => false,
        'effectiveDate' => false,
        'expiryDate' => false,
        'mode' => false,
        'sellerFreightClassCode' => false,
        'freightCharge' => false,
        'fuelCharge' => false,
        'totalWeight' => false,
        'totalVolume' => false,
        'equipmentTypeCode' => false,
        'serviceCode' => false,
        'numberOfPallets' => false,
        'nominalCharge' => false,
        'assessorialCharge' => false,
        'serviceCharge' => false,
        'minimumCharge' => false,
        'declaredValue' => false,
        'mixedSKUs' => false,
        'singleSKUs' => false,
        'freightReadyDate' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'quoteId' => 'quoteId',
        'estimatedDeliveryDateTime' => 'estimatedDeliveryDateTime',
        'carrier' => 'carrier',
        'currency' => 'currency',
        'discountCharge' => 'discountCharge',
        'netCharge' => 'netCharge',
        'surchargeType' => 'surchargeType',
        'surchargeValue' => 'surchargeValue',
        'totalBillingWeight' => 'totalBillingWeight',
        'status' => 'status',
        'transitDays' => 'transitDays',
        'effectiveDate' => 'effectiveDate',
        'expiryDate' => 'expiryDate',
        'mode' => 'mode',
        'sellerFreightClassCode' => 'sellerFreightClassCode',
        'freightCharge' => 'freightCharge',
        'fuelCharge' => 'fuelCharge',
        'totalWeight' => 'totalWeight',
        'totalVolume' => 'totalVolume',
        'equipmentTypeCode' => 'equipmentTypeCode',
        'serviceCode' => 'serviceCode',
        'numberOfPallets' => 'numberOfPallets',
        'nominalCharge' => 'nominalCharge',
        'assessorialCharge' => 'assessorialCharge',
        'serviceCharge' => 'serviceCharge',
        'minimumCharge' => 'minimumCharge',
        'declaredValue' => 'declaredValue',
        'mixedSKUs' => 'mixedSKUs',
        'singleSKUs' => 'singleSKUs',
        'freightReadyDate' => 'freightReadyDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'quoteId' => 'setQuoteId',
        'estimatedDeliveryDateTime' => 'setEstimatedDeliveryDateTime',
        'carrier' => 'setCarrier',
        'currency' => 'setCurrency',
        'discountCharge' => 'setDiscountCharge',
        'netCharge' => 'setNetCharge',
        'surchargeType' => 'setSurchargeType',
        'surchargeValue' => 'setSurchargeValue',
        'totalBillingWeight' => 'setTotalBillingWeight',
        'status' => 'setStatus',
        'transitDays' => 'setTransitDays',
        'effectiveDate' => 'setEffectiveDate',
        'expiryDate' => 'setExpiryDate',
        'mode' => 'setMode',
        'sellerFreightClassCode' => 'setSellerFreightClassCode',
        'freightCharge' => 'setFreightCharge',
        'fuelCharge' => 'setFuelCharge',
        'totalWeight' => 'setTotalWeight',
        'totalVolume' => 'setTotalVolume',
        'equipmentTypeCode' => 'setEquipmentTypeCode',
        'serviceCode' => 'setServiceCode',
        'numberOfPallets' => 'setNumberOfPallets',
        'nominalCharge' => 'setNominalCharge',
        'assessorialCharge' => 'setAssessorialCharge',
        'serviceCharge' => 'setServiceCharge',
        'minimumCharge' => 'setMinimumCharge',
        'declaredValue' => 'setDeclaredValue',
        'mixedSKUs' => 'setMixedSKUs',
        'singleSKUs' => 'setSingleSKUs',
        'freightReadyDate' => 'setFreightReadyDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'quoteId' => 'getQuoteId',
        'estimatedDeliveryDateTime' => 'getEstimatedDeliveryDateTime',
        'carrier' => 'getCarrier',
        'currency' => 'getCurrency',
        'discountCharge' => 'getDiscountCharge',
        'netCharge' => 'getNetCharge',
        'surchargeType' => 'getSurchargeType',
        'surchargeValue' => 'getSurchargeValue',
        'totalBillingWeight' => 'getTotalBillingWeight',
        'status' => 'getStatus',
        'transitDays' => 'getTransitDays',
        'effectiveDate' => 'getEffectiveDate',
        'expiryDate' => 'getExpiryDate',
        'mode' => 'getMode',
        'sellerFreightClassCode' => 'getSellerFreightClassCode',
        'freightCharge' => 'getFreightCharge',
        'fuelCharge' => 'getFuelCharge',
        'totalWeight' => 'getTotalWeight',
        'totalVolume' => 'getTotalVolume',
        'equipmentTypeCode' => 'getEquipmentTypeCode',
        'serviceCode' => 'getServiceCode',
        'numberOfPallets' => 'getNumberOfPallets',
        'nominalCharge' => 'getNominalCharge',
        'assessorialCharge' => 'getAssessorialCharge',
        'serviceCharge' => 'getServiceCharge',
        'minimumCharge' => 'getMinimumCharge',
        'declaredValue' => 'getDeclaredValue',
        'mixedSKUs' => 'getMixedSKUs',
        'singleSKUs' => 'getSingleSKUs',
        'freightReadyDate' => 'getFreightReadyDate'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('quoteId', $data ?? [], null);
        $this->setIfExists('estimatedDeliveryDateTime', $data ?? [], null);
        $this->setIfExists('carrier', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('discountCharge', $data ?? [], null);
        $this->setIfExists('netCharge', $data ?? [], null);
        $this->setIfExists('surchargeType', $data ?? [], null);
        $this->setIfExists('surchargeValue', $data ?? [], null);
        $this->setIfExists('totalBillingWeight', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('transitDays', $data ?? [], null);
        $this->setIfExists('effectiveDate', $data ?? [], null);
        $this->setIfExists('expiryDate', $data ?? [], null);
        $this->setIfExists('mode', $data ?? [], null);
        $this->setIfExists('sellerFreightClassCode', $data ?? [], null);
        $this->setIfExists('freightCharge', $data ?? [], null);
        $this->setIfExists('fuelCharge', $data ?? [], null);
        $this->setIfExists('totalWeight', $data ?? [], null);
        $this->setIfExists('totalVolume', $data ?? [], null);
        $this->setIfExists('equipmentTypeCode', $data ?? [], null);
        $this->setIfExists('serviceCode', $data ?? [], null);
        $this->setIfExists('numberOfPallets', $data ?? [], null);
        $this->setIfExists('nominalCharge', $data ?? [], null);
        $this->setIfExists('assessorialCharge', $data ?? [], null);
        $this->setIfExists('serviceCharge', $data ?? [], null);
        $this->setIfExists('minimumCharge', $data ?? [], null);
        $this->setIfExists('declaredValue', $data ?? [], null);
        $this->setIfExists('mixedSKUs', $data ?? [], null);
        $this->setIfExists('singleSKUs', $data ?? [], null);
        $this->setIfExists('freightReadyDate', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];


        return $invalidProperties;
    }

    /**
     * Gets quoteId
     *
     * @return string|null
    
     */
    public function getQuoteId()
    {
        return $this->container['quoteId'];
    }

    /**
     * Sets quoteId
     *
     * @param string|null $quoteId quoteId
     *
     * @return self
    
     */
    public function setQuoteId($quoteId)
    {
        if (is_null($quoteId)) {
            throw new \InvalidArgumentException('non-nullable quoteId cannot be null');
        }

        $this->container['quoteId'] = $quoteId;
        return $this;
    }

    /**
     * Gets estimatedDeliveryDateTime
     *
     * @return \DateTime|null
    
     */
    public function getEstimatedDeliveryDateTime()
    {
        return $this->container['estimatedDeliveryDateTime'];
    }

    /**
     * Sets estimatedDeliveryDateTime
     *
     * @param \DateTime|null $estimatedDeliveryDateTime estimatedDeliveryDateTime
     *
     * @return self
    
     */
    public function setEstimatedDeliveryDateTime($estimatedDeliveryDateTime)
    {
        if (is_null($estimatedDeliveryDateTime)) {
            throw new \InvalidArgumentException('non-nullable estimatedDeliveryDateTime cannot be null');
        }

        $this->container['estimatedDeliveryDateTime'] = $estimatedDeliveryDateTime;
        return $this;
    }

    /**
     * Gets carrier
     *
     * @return \Walmart\Models\MP\US\Fulfillment\Carrier|null
    
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param \Walmart\Models\MP\US\Fulfillment\Carrier|null $carrier carrier
     *
     * @return self
    
     */
    public function setCarrier($carrier)
    {
        if (is_null($carrier)) {
            throw new \InvalidArgumentException('non-nullable carrier cannot be null');
        }

        $this->container['carrier'] = $carrier;
        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
    
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
    
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }

        $this->container['currency'] = $currency;
        return $this;
    }

    /**
     * Gets discountCharge
     *
     * @return float|null
    
     */
    public function getDiscountCharge()
    {
        return $this->container['discountCharge'];
    }

    /**
     * Sets discountCharge
     *
     * @param float|null $discountCharge discountCharge
     *
     * @return self
    
     */
    public function setDiscountCharge($discountCharge)
    {
        if (is_null($discountCharge)) {
            throw new \InvalidArgumentException('non-nullable discountCharge cannot be null');
        }

        $this->container['discountCharge'] = $discountCharge;
        return $this;
    }

    /**
     * Gets netCharge
     *
     * @return float|null
    
     */
    public function getNetCharge()
    {
        return $this->container['netCharge'];
    }

    /**
     * Sets netCharge
     *
     * @param float|null $netCharge netCharge
     *
     * @return self
    
     */
    public function setNetCharge($netCharge)
    {
        if (is_null($netCharge)) {
            throw new \InvalidArgumentException('non-nullable netCharge cannot be null');
        }

        $this->container['netCharge'] = $netCharge;
        return $this;
    }

    /**
     * Gets surchargeType
     *
     * @return string|null
    
     */
    public function getSurchargeType()
    {
        return $this->container['surchargeType'];
    }

    /**
     * Sets surchargeType
     *
     * @param string|null $surchargeType surchargeType
     *
     * @return self
    
     */
    public function setSurchargeType($surchargeType)
    {
        if (is_null($surchargeType)) {
            throw new \InvalidArgumentException('non-nullable surchargeType cannot be null');
        }

        $this->container['surchargeType'] = $surchargeType;
        return $this;
    }

    /**
     * Gets surchargeValue
     *
     * @return string|null
    
     */
    public function getSurchargeValue()
    {
        return $this->container['surchargeValue'];
    }

    /**
     * Sets surchargeValue
     *
     * @param string|null $surchargeValue surchargeValue
     *
     * @return self
    
     */
    public function setSurchargeValue($surchargeValue)
    {
        if (is_null($surchargeValue)) {
            throw new \InvalidArgumentException('non-nullable surchargeValue cannot be null');
        }

        $this->container['surchargeValue'] = $surchargeValue;
        return $this;
    }

    /**
     * Gets totalBillingWeight
     *
     * @return float|null
    
     */
    public function getTotalBillingWeight()
    {
        return $this->container['totalBillingWeight'];
    }

    /**
     * Sets totalBillingWeight
     *
     * @param float|null $totalBillingWeight totalBillingWeight
     *
     * @return self
    
     */
    public function setTotalBillingWeight($totalBillingWeight)
    {
        if (is_null($totalBillingWeight)) {
            throw new \InvalidArgumentException('non-nullable totalBillingWeight cannot be null');
        }

        $this->container['totalBillingWeight'] = $totalBillingWeight;
        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
    
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
    
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }

        $this->container['status'] = $status;
        return $this;
    }

    /**
     * Gets transitDays
     *
     * @return string|null
    
     */
    public function getTransitDays()
    {
        return $this->container['transitDays'];
    }

    /**
     * Sets transitDays
     *
     * @param string|null $transitDays transitDays
     *
     * @return self
    
     */
    public function setTransitDays($transitDays)
    {
        if (is_null($transitDays)) {
            throw new \InvalidArgumentException('non-nullable transitDays cannot be null');
        }

        $this->container['transitDays'] = $transitDays;
        return $this;
    }

    /**
     * Gets effectiveDate
     *
     * @return \DateTime|null
    
     */
    public function getEffectiveDate()
    {
        return $this->container['effectiveDate'];
    }

    /**
     * Sets effectiveDate
     *
     * @param \DateTime|null $effectiveDate effectiveDate
     *
     * @return self
    
     */
    public function setEffectiveDate($effectiveDate)
    {
        if (is_null($effectiveDate)) {
            throw new \InvalidArgumentException('non-nullable effectiveDate cannot be null');
        }

        $this->container['effectiveDate'] = $effectiveDate;
        return $this;
    }

    /**
     * Gets expiryDate
     *
     * @return \DateTime|null
    
     */
    public function getExpiryDate()
    {
        return $this->container['expiryDate'];
    }

    /**
     * Sets expiryDate
     *
     * @param \DateTime|null $expiryDate expiryDate
     *
     * @return self
    
     */
    public function setExpiryDate($expiryDate)
    {
        if (is_null($expiryDate)) {
            throw new \InvalidArgumentException('non-nullable expiryDate cannot be null');
        }

        $this->container['expiryDate'] = $expiryDate;
        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
    
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode mode
     *
     * @return self
    
     */
    public function setMode($mode)
    {
        if (is_null($mode)) {
            throw new \InvalidArgumentException('non-nullable mode cannot be null');
        }

        $this->container['mode'] = $mode;
        return $this;
    }

    /**
     * Gets sellerFreightClassCode
     *
     * @return string|null
    
     */
    public function getSellerFreightClassCode()
    {
        return $this->container['sellerFreightClassCode'];
    }

    /**
     * Sets sellerFreightClassCode
     *
     * @param string|null $sellerFreightClassCode sellerFreightClassCode
     *
     * @return self
    
     */
    public function setSellerFreightClassCode($sellerFreightClassCode)
    {
        if (is_null($sellerFreightClassCode)) {
            throw new \InvalidArgumentException('non-nullable sellerFreightClassCode cannot be null');
        }

        $this->container['sellerFreightClassCode'] = $sellerFreightClassCode;
        return $this;
    }

    /**
     * Gets freightCharge
     *
     * @return float|null
    
     */
    public function getFreightCharge()
    {
        return $this->container['freightCharge'];
    }

    /**
     * Sets freightCharge
     *
     * @param float|null $freightCharge freightCharge
     *
     * @return self
    
     */
    public function setFreightCharge($freightCharge)
    {
        if (is_null($freightCharge)) {
            throw new \InvalidArgumentException('non-nullable freightCharge cannot be null');
        }

        $this->container['freightCharge'] = $freightCharge;
        return $this;
    }

    /**
     * Gets fuelCharge
     *
     * @return float|null
    
     */
    public function getFuelCharge()
    {
        return $this->container['fuelCharge'];
    }

    /**
     * Sets fuelCharge
     *
     * @param float|null $fuelCharge fuelCharge
     *
     * @return self
    
     */
    public function setFuelCharge($fuelCharge)
    {
        if (is_null($fuelCharge)) {
            throw new \InvalidArgumentException('non-nullable fuelCharge cannot be null');
        }

        $this->container['fuelCharge'] = $fuelCharge;
        return $this;
    }

    /**
     * Gets totalWeight
     *
     * @return float|null
    
     */
    public function getTotalWeight()
    {
        return $this->container['totalWeight'];
    }

    /**
     * Sets totalWeight
     *
     * @param float|null $totalWeight totalWeight
     *
     * @return self
    
     */
    public function setTotalWeight($totalWeight)
    {
        if (is_null($totalWeight)) {
            throw new \InvalidArgumentException('non-nullable totalWeight cannot be null');
        }

        $this->container['totalWeight'] = $totalWeight;
        return $this;
    }

    /**
     * Gets totalVolume
     *
     * @return float|null
    
     */
    public function getTotalVolume()
    {
        return $this->container['totalVolume'];
    }

    /**
     * Sets totalVolume
     *
     * @param float|null $totalVolume totalVolume
     *
     * @return self
    
     */
    public function setTotalVolume($totalVolume)
    {
        if (is_null($totalVolume)) {
            throw new \InvalidArgumentException('non-nullable totalVolume cannot be null');
        }

        $this->container['totalVolume'] = $totalVolume;
        return $this;
    }

    /**
     * Gets equipmentTypeCode
     *
     * @return string|null
    
     */
    public function getEquipmentTypeCode()
    {
        return $this->container['equipmentTypeCode'];
    }

    /**
     * Sets equipmentTypeCode
     *
     * @param string|null $equipmentTypeCode equipmentTypeCode
     *
     * @return self
    
     */
    public function setEquipmentTypeCode($equipmentTypeCode)
    {
        if (is_null($equipmentTypeCode)) {
            throw new \InvalidArgumentException('non-nullable equipmentTypeCode cannot be null');
        }

        $this->container['equipmentTypeCode'] = $equipmentTypeCode;
        return $this;
    }

    /**
     * Gets serviceCode
     *
     * @return string|null
    
     */
    public function getServiceCode()
    {
        return $this->container['serviceCode'];
    }

    /**
     * Sets serviceCode
     *
     * @param string|null $serviceCode serviceCode
     *
     * @return self
    
     */
    public function setServiceCode($serviceCode)
    {
        if (is_null($serviceCode)) {
            throw new \InvalidArgumentException('non-nullable serviceCode cannot be null');
        }

        $this->container['serviceCode'] = $serviceCode;
        return $this;
    }

    /**
     * Gets numberOfPallets
     *
     * @return int|null
    
     */
    public function getNumberOfPallets()
    {
        return $this->container['numberOfPallets'];
    }

    /**
     * Sets numberOfPallets
     *
     * @param int|null $numberOfPallets numberOfPallets
     *
     * @return self
    
     */
    public function setNumberOfPallets($numberOfPallets)
    {
        if (is_null($numberOfPallets)) {
            throw new \InvalidArgumentException('non-nullable numberOfPallets cannot be null');
        }

        $this->container['numberOfPallets'] = $numberOfPallets;
        return $this;
    }

    /**
     * Gets nominalCharge
     *
     * @return float|null
    
     */
    public function getNominalCharge()
    {
        return $this->container['nominalCharge'];
    }

    /**
     * Sets nominalCharge
     *
     * @param float|null $nominalCharge nominalCharge
     *
     * @return self
    
     */
    public function setNominalCharge($nominalCharge)
    {
        if (is_null($nominalCharge)) {
            throw new \InvalidArgumentException('non-nullable nominalCharge cannot be null');
        }

        $this->container['nominalCharge'] = $nominalCharge;
        return $this;
    }

    /**
     * Gets assessorialCharge
     *
     * @return float|null
    
     */
    public function getAssessorialCharge()
    {
        return $this->container['assessorialCharge'];
    }

    /**
     * Sets assessorialCharge
     *
     * @param float|null $assessorialCharge assessorialCharge
     *
     * @return self
    
     */
    public function setAssessorialCharge($assessorialCharge)
    {
        if (is_null($assessorialCharge)) {
            throw new \InvalidArgumentException('non-nullable assessorialCharge cannot be null');
        }

        $this->container['assessorialCharge'] = $assessorialCharge;
        return $this;
    }

    /**
     * Gets serviceCharge
     *
     * @return float|null
    
     */
    public function getServiceCharge()
    {
        return $this->container['serviceCharge'];
    }

    /**
     * Sets serviceCharge
     *
     * @param float|null $serviceCharge serviceCharge
     *
     * @return self
    
     */
    public function setServiceCharge($serviceCharge)
    {
        if (is_null($serviceCharge)) {
            throw new \InvalidArgumentException('non-nullable serviceCharge cannot be null');
        }

        $this->container['serviceCharge'] = $serviceCharge;
        return $this;
    }

    /**
     * Gets minimumCharge
     *
     * @return float|null
    
     */
    public function getMinimumCharge()
    {
        return $this->container['minimumCharge'];
    }

    /**
     * Sets minimumCharge
     *
     * @param float|null $minimumCharge minimumCharge
     *
     * @return self
    
     */
    public function setMinimumCharge($minimumCharge)
    {
        if (is_null($minimumCharge)) {
            throw new \InvalidArgumentException('non-nullable minimumCharge cannot be null');
        }

        $this->container['minimumCharge'] = $minimumCharge;
        return $this;
    }

    /**
     * Gets declaredValue
     *
     * @return string|null
    
     */
    public function getDeclaredValue()
    {
        return $this->container['declaredValue'];
    }

    /**
     * Sets declaredValue
     *
     * @param string|null $declaredValue declaredValue
     *
     * @return self
    
     */
    public function setDeclaredValue($declaredValue)
    {
        if (is_null($declaredValue)) {
            throw new \InvalidArgumentException('non-nullable declaredValue cannot be null');
        }

        $this->container['declaredValue'] = $declaredValue;
        return $this;
    }

    /**
     * Gets mixedSKUs
     *
     * @return int|null
    
     */
    public function getMixedSKUs()
    {
        return $this->container['mixedSKUs'];
    }

    /**
     * Sets mixedSKUs
     *
     * @param int|null $mixedSKUs mixedSKUs
     *
     * @return self
    
     */
    public function setMixedSKUs($mixedSKUs)
    {
        if (is_null($mixedSKUs)) {
            throw new \InvalidArgumentException('non-nullable mixedSKUs cannot be null');
        }

        $this->container['mixedSKUs'] = $mixedSKUs;
        return $this;
    }

    /**
     * Gets singleSKUs
     *
     * @return int|null
    
     */
    public function getSingleSKUs()
    {
        return $this->container['singleSKUs'];
    }

    /**
     * Sets singleSKUs
     *
     * @param int|null $singleSKUs singleSKUs
     *
     * @return self
    
     */
    public function setSingleSKUs($singleSKUs)
    {
        if (is_null($singleSKUs)) {
            throw new \InvalidArgumentException('non-nullable singleSKUs cannot be null');
        }

        $this->container['singleSKUs'] = $singleSKUs;
        return $this;
    }

    /**
     * Gets freightReadyDate
     *
     * @return \DateTime|null
    
     */
    public function getFreightReadyDate()
    {
        return $this->container['freightReadyDate'];
    }

    /**
     * Sets freightReadyDate
     *
     * @param \DateTime|null $freightReadyDate freightReadyDate
     *
     * @return self
    
     */
    public function setFreightReadyDate($freightReadyDate)
    {
        if (is_null($freightReadyDate)) {
            throw new \InvalidArgumentException('non-nullable freightReadyDate cannot be null');
        }

        $this->container['freightReadyDate'] = $freightReadyDate;
        return $this;
    }
}
