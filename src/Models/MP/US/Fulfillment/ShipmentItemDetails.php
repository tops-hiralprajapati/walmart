<?php

/**
 * ShipmentItemDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Fulfillment Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\Fulfillment;

use Walmart\Models\BaseModel;

/**
 * ShipmentItemDetails Class Doc Comment
 *
 * @category Class

 * @description response payload

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class ShipmentItemDetails extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ShipmentItemDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'inboundOrderId' => 'string',
        'shipmentId' => 'string',
        'gtin' => 'string',
        'sku' => 'string',
        'itemDesc' => 'string',
        'itemQty' => 'int',
        'vendorPackQty' => 'int',
        'innerPackQty' => 'int',
        'receivedQty' => 'int',
        'damagedQty' => 'int',
        'fillRate' => 'float',
        'expectedDeliveryDate' => '\DateTime',
        'updatedExpectedDeliveryDate' => '\DateTime',
        'shipNodeName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'inboundOrderId' => null,
        'shipmentId' => null,
        'gtin' => null,
        'sku' => null,
        'itemDesc' => null,
        'itemQty' => 'int32',
        'vendorPackQty' => 'int32',
        'innerPackQty' => 'int32',
        'receivedQty' => 'int32',
        'damagedQty' => 'int32',
        'fillRate' => 'float',
        'expectedDeliveryDate' => 'date-time',
        'updatedExpectedDeliveryDate' => 'date-time',
        'shipNodeName' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'inboundOrderId' => false,
        'shipmentId' => false,
        'gtin' => false,
        'sku' => false,
        'itemDesc' => false,
        'itemQty' => false,
        'vendorPackQty' => false,
        'innerPackQty' => false,
        'receivedQty' => false,
        'damagedQty' => false,
        'fillRate' => false,
        'expectedDeliveryDate' => false,
        'updatedExpectedDeliveryDate' => false,
        'shipNodeName' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'inboundOrderId' => 'inboundOrderId',
        'shipmentId' => 'shipmentId',
        'gtin' => 'gtin',
        'sku' => 'sku',
        'itemDesc' => 'itemDesc',
        'itemQty' => 'itemQty',
        'vendorPackQty' => 'vendorPackQty',
        'innerPackQty' => 'innerPackQty',
        'receivedQty' => 'receivedQty',
        'damagedQty' => 'damagedQty',
        'fillRate' => 'fillRate',
        'expectedDeliveryDate' => 'expectedDeliveryDate',
        'updatedExpectedDeliveryDate' => 'updatedExpectedDeliveryDate',
        'shipNodeName' => 'shipNodeName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'inboundOrderId' => 'setInboundOrderId',
        'shipmentId' => 'setShipmentId',
        'gtin' => 'setGtin',
        'sku' => 'setSku',
        'itemDesc' => 'setItemDesc',
        'itemQty' => 'setItemQty',
        'vendorPackQty' => 'setVendorPackQty',
        'innerPackQty' => 'setInnerPackQty',
        'receivedQty' => 'setReceivedQty',
        'damagedQty' => 'setDamagedQty',
        'fillRate' => 'setFillRate',
        'expectedDeliveryDate' => 'setExpectedDeliveryDate',
        'updatedExpectedDeliveryDate' => 'setUpdatedExpectedDeliveryDate',
        'shipNodeName' => 'setShipNodeName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'inboundOrderId' => 'getInboundOrderId',
        'shipmentId' => 'getShipmentId',
        'gtin' => 'getGtin',
        'sku' => 'getSku',
        'itemDesc' => 'getItemDesc',
        'itemQty' => 'getItemQty',
        'vendorPackQty' => 'getVendorPackQty',
        'innerPackQty' => 'getInnerPackQty',
        'receivedQty' => 'getReceivedQty',
        'damagedQty' => 'getDamagedQty',
        'fillRate' => 'getFillRate',
        'expectedDeliveryDate' => 'getExpectedDeliveryDate',
        'updatedExpectedDeliveryDate' => 'getUpdatedExpectedDeliveryDate',
        'shipNodeName' => 'getShipNodeName'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('inboundOrderId', $data ?? [], null);
        $this->setIfExists('shipmentId', $data ?? [], null);
        $this->setIfExists('gtin', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('itemDesc', $data ?? [], null);
        $this->setIfExists('itemQty', $data ?? [], null);
        $this->setIfExists('vendorPackQty', $data ?? [], null);
        $this->setIfExists('innerPackQty', $data ?? [], null);
        $this->setIfExists('receivedQty', $data ?? [], null);
        $this->setIfExists('damagedQty', $data ?? [], null);
        $this->setIfExists('fillRate', $data ?? [], null);
        $this->setIfExists('expectedDeliveryDate', $data ?? [], null);
        $this->setIfExists('updatedExpectedDeliveryDate', $data ?? [], null);
        $this->setIfExists('shipNodeName', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];


        return $invalidProperties;
    }

    /**
     * Gets inboundOrderId
     *
     * @return string|null
    
     */
    public function getInboundOrderId()
    {
        return $this->container['inboundOrderId'];
    }

    /**
     * Sets inboundOrderId
     *
     * @param string|null $inboundOrderId Unique ID identifying inbound shipment request
     *
     * @return self
    
     */
    public function setInboundOrderId($inboundOrderId)
    {
        if (is_null($inboundOrderId)) {
            throw new \InvalidArgumentException('non-nullable inboundOrderId cannot be null');
        }

        $this->container['inboundOrderId'] = $inboundOrderId;
        return $this;
    }

    /**
     * Gets shipmentId
     *
     * @return string|null
    
     */
    public function getShipmentId()
    {
        return $this->container['shipmentId'];
    }

    /**
     * Sets shipmentId
     *
     * @param string|null $shipmentId Unique ID identifying each shipment
     *
     * @return self
    
     */
    public function setShipmentId($shipmentId)
    {
        if (is_null($shipmentId)) {
            throw new \InvalidArgumentException('non-nullable shipmentId cannot be null');
        }

        $this->container['shipmentId'] = $shipmentId;
        return $this;
    }

    /**
     * Gets gtin
     *
     * @return string|null
    
     */
    public function getGtin()
    {
        return $this->container['gtin'];
    }

    /**
     * Sets gtin
     *
     * @param string|null $gtin Item barcode
     *
     * @return self
    
     */
    public function setGtin($gtin)
    {
        if (is_null($gtin)) {
            throw new \InvalidArgumentException('non-nullable gtin cannot be null');
        }

        $this->container['gtin'] = $gtin;
        return $this;
    }

    /**
     * Gets sku
     *
     * @return string|null
    
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string|null $sku Seller Item ID
     *
     * @return self
    
     */
    public function setSku($sku)
    {
        if (is_null($sku)) {
            throw new \InvalidArgumentException('non-nullable sku cannot be null');
        }

        $this->container['sku'] = $sku;
        return $this;
    }

    /**
     * Gets itemDesc
     *
     * @return string|null
    
     */
    public function getItemDesc()
    {
        return $this->container['itemDesc'];
    }

    /**
     * Sets itemDesc
     *
     * @param string|null $itemDesc Item description
     *
     * @return self
    
     */
    public function setItemDesc($itemDesc)
    {
        if (is_null($itemDesc)) {
            throw new \InvalidArgumentException('non-nullable itemDesc cannot be null');
        }

        $this->container['itemDesc'] = $itemDesc;
        return $this;
    }

    /**
     * Gets itemQty
     *
     * @return int|null
    
     */
    public function getItemQty()
    {
        return $this->container['itemQty'];
    }

    /**
     * Sets itemQty
     *
     * @param int|null $itemQty Total number of sellable units
     *
     * @return self
    
     */
    public function setItemQty($itemQty)
    {
        if (is_null($itemQty)) {
            throw new \InvalidArgumentException('non-nullable itemQty cannot be null');
        }

        $this->container['itemQty'] = $itemQty;
        return $this;
    }

    /**
     * Gets vendorPackQty
     *
     * @return int|null
    
     */
    public function getVendorPackQty()
    {
        return $this->container['vendorPackQty'];
    }

    /**
     * Sets vendorPackQty
     *
     * @param int|null $vendorPackQty Total number of cases
     *
     * @return self
    
     */
    public function setVendorPackQty($vendorPackQty)
    {
        if (is_null($vendorPackQty)) {
            throw new \InvalidArgumentException('non-nullable vendorPackQty cannot be null');
        }

        $this->container['vendorPackQty'] = $vendorPackQty;
        return $this;
    }

    /**
     * Gets innerPackQty
     *
     * @return int|null
    
     */
    public function getInnerPackQty()
    {
        return $this->container['innerPackQty'];
    }

    /**
     * Sets innerPackQty
     *
     * @param int|null $innerPackQty Total number of sellable units per case
     *
     * @return self
    
     */
    public function setInnerPackQty($innerPackQty)
    {
        if (is_null($innerPackQty)) {
            throw new \InvalidArgumentException('non-nullable innerPackQty cannot be null');
        }

        $this->container['innerPackQty'] = $innerPackQty;
        return $this;
    }

    /**
     * Gets receivedQty
     *
     * @return int|null
    
     */
    public function getReceivedQty()
    {
        return $this->container['receivedQty'];
    }

    /**
     * Sets receivedQty
     *
     * @param int|null $receivedQty Qty received in FC
     *
     * @return self
    
     */
    public function setReceivedQty($receivedQty)
    {
        if (is_null($receivedQty)) {
            throw new \InvalidArgumentException('non-nullable receivedQty cannot be null');
        }

        $this->container['receivedQty'] = $receivedQty;
        return $this;
    }

    /**
     * Gets damagedQty
     *
     * @return int|null
    
     */
    public function getDamagedQty()
    {
        return $this->container['damagedQty'];
    }

    /**
     * Sets damagedQty
     *
     * @param int|null $damagedQty Qty damaged while receiving in FC
     *
     * @return self
    
     */
    public function setDamagedQty($damagedQty)
    {
        if (is_null($damagedQty)) {
            throw new \InvalidArgumentException('non-nullable damagedQty cannot be null');
        }

        $this->container['damagedQty'] = $damagedQty;
        return $this;
    }

    /**
     * Gets fillRate
     *
     * @return float|null
    
     */
    public function getFillRate()
    {
        return $this->container['fillRate'];
    }

    /**
     * Sets fillRate
     *
     * @param float|null $fillRate Fill rate for this shipment item
     *
     * @return self
    
     */
    public function setFillRate($fillRate)
    {
        if (is_null($fillRate)) {
            throw new \InvalidArgumentException('non-nullable fillRate cannot be null');
        }

        $this->container['fillRate'] = $fillRate;
        return $this;
    }

    /**
     * Gets expectedDeliveryDate
     *
     * @return \DateTime|null
    
     */
    public function getExpectedDeliveryDate()
    {
        return $this->container['expectedDeliveryDate'];
    }

    /**
     * Sets expectedDeliveryDate
     *
     * @param \DateTime|null $expectedDeliveryDate expected delivery date provided by seller
     *
     * @return self
    
     */
    public function setExpectedDeliveryDate($expectedDeliveryDate)
    {
        if (is_null($expectedDeliveryDate)) {
            throw new \InvalidArgumentException('non-nullable expectedDeliveryDate cannot be null');
        }

        $this->container['expectedDeliveryDate'] = $expectedDeliveryDate;
        return $this;
    }

    /**
     * Gets updatedExpectedDeliveryDate
     *
     * @return \DateTime|null
    
     */
    public function getUpdatedExpectedDeliveryDate()
    {
        return $this->container['updatedExpectedDeliveryDate'];
    }

    /**
     * Sets updatedExpectedDeliveryDate
     *
     * @param \DateTime|null $updatedExpectedDeliveryDate update expected delivery date based on network capacity
     *
     * @return self
    
     */
    public function setUpdatedExpectedDeliveryDate($updatedExpectedDeliveryDate)
    {
        if (is_null($updatedExpectedDeliveryDate)) {
            throw new \InvalidArgumentException('non-nullable updatedExpectedDeliveryDate cannot be null');
        }

        $this->container['updatedExpectedDeliveryDate'] = $updatedExpectedDeliveryDate;
        return $this;
    }

    /**
     * Gets shipNodeName
     *
     * @return string|null
    
     */
    public function getShipNodeName()
    {
        return $this->container['shipNodeName'];
    }

    /**
     * Sets shipNodeName
     *
     * @param string|null $shipNodeName FC name
     *
     * @return self
    
     */
    public function setShipNodeName($shipNodeName)
    {
        if (is_null($shipNodeName)) {
            throw new \InvalidArgumentException('non-nullable shipNodeName cannot be null');
        }

        $this->container['shipNodeName'] = $shipNodeName;
        return $this;
    }
}
