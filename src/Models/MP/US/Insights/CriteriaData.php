<?php

/**
 * CriteriaData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Insights Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\Insights;

use Walmart\Models\BaseModel;

/**
 * CriteriaData Class Doc Comment
 *
 * @category Class

 * @description Shows the criteria for the Pro Seller badge.

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class CriteriaData extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'CriteriaData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'orders' => 'int',
        'deliveryDefectRate' => 'string',
        'cancellationRate' => 'string',
        'listingQualityCatalog' => 'int',
        'activeDays' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'orders' => 'int32',
        'deliveryDefectRate' => null,
        'cancellationRate' => null,
        'listingQualityCatalog' => 'int32',
        'activeDays' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'orders' => false,
        'deliveryDefectRate' => false,
        'cancellationRate' => false,
        'listingQualityCatalog' => false,
        'activeDays' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'orders' => 'orders',
        'deliveryDefectRate' => 'deliveryDefectRate',
        'cancellationRate' => 'cancellationRate',
        'listingQualityCatalog' => 'listingQualityCatalog',
        'activeDays' => 'activeDays'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'orders' => 'setOrders',
        'deliveryDefectRate' => 'setDeliveryDefectRate',
        'cancellationRate' => 'setCancellationRate',
        'listingQualityCatalog' => 'setListingQualityCatalog',
        'activeDays' => 'setActiveDays'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'orders' => 'getOrders',
        'deliveryDefectRate' => 'getDeliveryDefectRate',
        'cancellationRate' => 'getCancellationRate',
        'listingQualityCatalog' => 'getListingQualityCatalog',
        'activeDays' => 'getActiveDays'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('orders', $data ?? [], null);
        $this->setIfExists('deliveryDefectRate', $data ?? [], null);
        $this->setIfExists('cancellationRate', $data ?? [], null);
        $this->setIfExists('listingQualityCatalog', $data ?? [], null);
        $this->setIfExists('activeDays', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];


        return $invalidProperties;
    }

    /**
     * Gets orders
     *
     * @return int|null
    
     */
    public function getOrders()
    {
        return $this->container['orders'];
    }

    /**
     * Sets orders
     *
     * @param int|null $orders Number of orders received during the last 90 days.
     *
     * @return self
    
     */
    public function setOrders($orders)
    {
        if (is_null($orders)) {
            throw new \InvalidArgumentException('non-nullable orders cannot be null');
        }

        $this->container['orders'] = $orders;
        return $this;
    }

    /**
     * Gets deliveryDefectRate
     *
     * @return string|null
    
     */
    public function getDeliveryDefectRate()
    {
        return $this->container['deliveryDefectRate'];
    }

    /**
     * Sets deliveryDefectRate
     *
     * @param string|null $deliveryDefectRate Delivery Defect rate in the given timeframe.
     *
     * @return self
    
     */
    public function setDeliveryDefectRate($deliveryDefectRate)
    {
        if (is_null($deliveryDefectRate)) {
            throw new \InvalidArgumentException('non-nullable deliveryDefectRate cannot be null');
        }

        $this->container['deliveryDefectRate'] = $deliveryDefectRate;
        return $this;
    }

    /**
     * Gets cancellationRate
     *
     * @return string|null
    
     */
    public function getCancellationRate()
    {
        return $this->container['cancellationRate'];
    }

    /**
     * Sets cancellationRate
     *
     * @param string|null $cancellationRate Cancellation rate in the given timeframe.
     *
     * @return self
    
     */
    public function setCancellationRate($cancellationRate)
    {
        if (is_null($cancellationRate)) {
            throw new \InvalidArgumentException('non-nullable cancellationRate cannot be null');
        }

        $this->container['cancellationRate'] = $cancellationRate;
        return $this;
    }

    /**
     * Gets listingQualityCatalog
     *
     * @return int|null
    
     */
    public function getListingQualityCatalog()
    {
        return $this->container['listingQualityCatalog'];
    }

    /**
     * Sets listingQualityCatalog
     *
     * @param int|null $listingQualityCatalog Trending Catalog Quality Score coverage.
     *
     * @return self
    
     */
    public function setListingQualityCatalog($listingQualityCatalog)
    {
        if (is_null($listingQualityCatalog)) {
            throw new \InvalidArgumentException('non-nullable listingQualityCatalog cannot be null');
        }

        $this->container['listingQualityCatalog'] = $listingQualityCatalog;
        return $this;
    }

    /**
     * Gets activeDays
     *
     * @return int|null
    
     */
    public function getActiveDays()
    {
        return $this->container['activeDays'];
    }

    /**
     * Sets activeDays
     *
     * @param int|null $activeDays Days active on the platform.
     *
     * @return self
    
     */
    public function setActiveDays($activeDays)
    {
        if (is_null($activeDays)) {
            throw new \InvalidArgumentException('non-nullable activeDays cannot be null');
        }

        $this->container['activeDays'] = $activeDays;
        return $this;
    }
}
