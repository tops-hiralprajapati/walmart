<?php

/**
 * Filter
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Insights Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\Insights;

use Walmart\Models\BaseModel;

/**
 * Filter Class Doc Comment
 *
 * @category Class

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class Filter extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Filter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'field' => 'string',
        'op' => 'string',
        'values' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'field' => null,
        'op' => null,
        'values' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'field' => false,
        'op' => false,
        'values' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'field' => 'field',
        'op' => 'op',
        'values' => 'values'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'field' => 'setField',
        'op' => 'setOp',
        'values' => 'setValues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'field' => 'getField',
        'op' => 'getOp',
        'values' => 'getValues'
    ];


    public const FIELD_CONTENT_DISCOVERABILITY_PERCENTAGE = 'contentDiscoverabilityPercentage';

    public const FIELD_QUALITY_SCORE_PERCENTAGE = 'qualityScorePercentage';

    public const FIELD_OFFER_PERCENTAGE = 'offerPercentage';

    public const FIELD_RATING_REVIEWS_PERCENTAGE = 'ratingReviewsPercentage';

    public const FIELD_VIEW_TRENDING_ITEMS = 'viewTrendingItems';

    public const FIELD_VIEW_POST_PURCHASE_ITEMS = 'viewPostPurchaseItems';

    public const FIELD_WFS_FLAG = 'wfsFlag';

    public const FIELD_CATEGORY_NAME = 'categoryName';

    public const FIELD_HAS_ISSUES = 'hasIssues';

    public const FIELD_PRODUCT_TYPE = 'productType';

    public const FIELD_ATTRIBUTE_LIST = 'attributeList';

    public const FIELD_PRODUCT_TYPES = 'productTypes';

    public const FIELD_BRAND_LIST = 'brandList';

    public const FIELD_OOS = 'oos';

    public const FIELD_FAST_AND_FREE_SHIPPING = 'fastAndFreeShipping';

    public const FIELD_PRICE_MEET_BEAT_FLAG = 'priceMeetBeatFlag';

    public const OP_EQUALS = 'equals';

    public const OP_BETWEEN = 'between';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFieldAllowableValues()
    {
        return [
            self::FIELD_CONTENT_DISCOVERABILITY_PERCENTAGE,
            self::FIELD_QUALITY_SCORE_PERCENTAGE,
            self::FIELD_OFFER_PERCENTAGE,
            self::FIELD_RATING_REVIEWS_PERCENTAGE,
            self::FIELD_VIEW_TRENDING_ITEMS,
            self::FIELD_VIEW_POST_PURCHASE_ITEMS,
            self::FIELD_WFS_FLAG,
            self::FIELD_CATEGORY_NAME,
            self::FIELD_HAS_ISSUES,
            self::FIELD_PRODUCT_TYPE,
            self::FIELD_ATTRIBUTE_LIST,
            self::FIELD_PRODUCT_TYPES,
            self::FIELD_BRAND_LIST,
            self::FIELD_OOS,
            self::FIELD_FAST_AND_FREE_SHIPPING,
            self::FIELD_PRICE_MEET_BEAT_FLAG,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOpAllowableValues()
    {
        return [
            self::OP_EQUALS,
            self::OP_BETWEEN,
        ];
    }

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('field', $data ?? [], null);
        $this->setIfExists('op', $data ?? [], null);
        $this->setIfExists('values', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFieldAllowableValues();
        if (!is_null($this->container['field']) && !in_array($this->container['field'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'field', must be one of '%s'",
                $this->container['field'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOpAllowableValues();
        if (!is_null($this->container['op']) && !in_array($this->container['op'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'op', must be one of '%s'",
                $this->container['op'],
                implode("', '", $allowedValues)
            );
        }


        return $invalidProperties;
    }

    /**
     * Gets field
     *
     * @return string|null
    
     */
    public function getField()
    {
        return $this->container['field'];
    }

    /**
     * Sets field
     *
     * @param string|null $field | Attribute | Description | Data Type | --- | ----------- | ------- | contentDiscoverabilityPercentage | Item's content and discoverability score expressed as a percentage. | string | | qualityScorePercentage | Item's overall Listing Quality score, rated as a percentage. | string | | offerPercentage | Item's offer score, based on: item price, shipping price and speed, and in-stock rate.| string | | ratingReviewsPercentage | Rating and reviews score, as a percentage. | string | | viewTrendingItems | Indicates to return details for trending items that have non-zero page views. Acceptable values are \"true\" if pageView > 0, or \"false\" if pageView >= 0. | string | | viewPostPurchaseItems | Show items with post-purchase quality issues. If item has post-purchase value >= 1, it filters all items greater or equal based on post purchase value. | string | | wfsFlag | Show WFS-eligible items. Value of this parameter can be true or false. | string | | categoryName | Item's category name. | string | | hasIssues | Provides a count of item with issues. | integer | | productType | Product type to classify the item (e.g. Pants). | string| | attributeList | List of all available filter attributes. | string | | productTypes | List of all available product. | List<String> | | brandList | List of all available brand. | List<String> | | oos | Filter using out of stock offer based on days. Min value = 0, Max Value = 7. | integer | | fastAndFreeShipping | Possible values are 1 for offers eligible for free shipping and 0 for offers not eligible for free shipping. No value shows all the offers. | integer | | priceMeetBeatFlag | Possible values are -1 for no match, 0 for lose, 1 for meets and 2 for beats. No value shows all the offers. | integer |
     *
     * @return self
    
     */
    public function setField($field)
    {
        if (is_null($field)) {
            throw new \InvalidArgumentException('non-nullable field cannot be null');
        }
        $allowedValues = $this->getFieldAllowableValues();
        if (!in_array($field, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'field', must be one of '%s'",
                    $field,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['field'] = $field;
        return $this;
    }

    /**
     * Gets op
     *
     * @return string|null
    
     */
    public function getOp()
    {
        return $this->container['op'];
    }

    /**
     * Sets op
     *
     * @param string|null $op op
     *
     * @return self
    
     */
    public function setOp($op)
    {
        if (is_null($op)) {
            throw new \InvalidArgumentException('non-nullable op cannot be null');
        }
        $allowedValues = $this->getOpAllowableValues();
        if (!in_array($op, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'op', must be one of '%s'",
                    $op,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['op'] = $op;
        return $this;
    }

    /**
     * Gets values
     *
     * @return int[]|null
    
     */
    public function getValues()
    {
        return $this->container['values'];
    }

    /**
     * Sets values
     *
     * @param int[]|null $values values
     *
     * @return self
    
     */
    public function setValues($values)
    {
        if (is_null($values)) {
            throw new \InvalidArgumentException('non-nullable values cannot be null');
        }

        $this->container['values'] = $values;
        return $this;
    }
}
