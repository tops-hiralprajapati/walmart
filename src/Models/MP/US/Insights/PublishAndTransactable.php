<?php

/**
 * PublishAndTransactable
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Insights Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\Insights;

use Walmart\Models\BaseModel;

/**
 * PublishAndTransactable Class Doc Comment
 *
 * @category Class

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class PublishAndTransactable extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PublishAndTransactable';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'issueTitle' => 'string',
        'totalIssue' => 'int',
        'maxIssue' => 'int',
        'issues' => '\Walmart\Models\MP\US\Insights\Issue[]',
        'score' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'issueTitle' => null,
        'totalIssue' => 'int32',
        'maxIssue' => 'int32',
        'issues' => null,
        'score' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'issueTitle' => false,
        'totalIssue' => false,
        'maxIssue' => false,
        'issues' => false,
        'score' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'issueTitle' => 'issueTitle',
        'totalIssue' => 'totalIssue',
        'maxIssue' => 'maxIssue',
        'issues' => 'issues',
        'score' => 'score'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'issueTitle' => 'setIssueTitle',
        'totalIssue' => 'setTotalIssue',
        'maxIssue' => 'setMaxIssue',
        'issues' => 'setIssues',
        'score' => 'setScore'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'issueTitle' => 'getIssueTitle',
        'totalIssue' => 'getTotalIssue',
        'maxIssue' => 'getMaxIssue',
        'issues' => 'getIssues',
        'score' => 'getScore'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('issueTitle', $data ?? [], null);
        $this->setIfExists('totalIssue', $data ?? [], null);
        $this->setIfExists('maxIssue', $data ?? [], null);
        $this->setIfExists('issues', $data ?? [], null);
        $this->setIfExists('score', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];


        return $invalidProperties;
    }

    /**
     * Gets issueTitle
     *
     * @return string|null
    
     */
    public function getIssueTitle()
    {
        return $this->container['issueTitle'];
    }

    /**
     * Sets issueTitle
     *
     * @param string|null $issueTitle issueTitle
     *
     * @return self
    
     */
    public function setIssueTitle($issueTitle)
    {
        if (is_null($issueTitle)) {
            throw new \InvalidArgumentException('non-nullable issueTitle cannot be null');
        }

        $this->container['issueTitle'] = $issueTitle;
        return $this;
    }

    /**
     * Gets totalIssue
     *
     * @return int|null
    
     */
    public function getTotalIssue()
    {
        return $this->container['totalIssue'];
    }

    /**
     * Sets totalIssue
     *
     * @param int|null $totalIssue totalIssue
     *
     * @return self
    
     */
    public function setTotalIssue($totalIssue)
    {
        if (is_null($totalIssue)) {
            throw new \InvalidArgumentException('non-nullable totalIssue cannot be null');
        }

        $this->container['totalIssue'] = $totalIssue;
        return $this;
    }

    /**
     * Gets maxIssue
     *
     * @return int|null
    
     */
    public function getMaxIssue()
    {
        return $this->container['maxIssue'];
    }

    /**
     * Sets maxIssue
     *
     * @param int|null $maxIssue maxIssue
     *
     * @return self
    
     */
    public function setMaxIssue($maxIssue)
    {
        if (is_null($maxIssue)) {
            throw new \InvalidArgumentException('non-nullable maxIssue cannot be null');
        }

        $this->container['maxIssue'] = $maxIssue;
        return $this;
    }

    /**
     * Gets issues
     *
     * @return \Walmart\Models\MP\US\Insights\Issue[]|null
    
     */
    public function getIssues()
    {
        return $this->container['issues'];
    }

    /**
     * Sets issues
     *
     * @param \Walmart\Models\MP\US\Insights\Issue[]|null $issues issues
     *
     * @return self
    
     */
    public function setIssues($issues)
    {
        if (is_null($issues)) {
            throw new \InvalidArgumentException('non-nullable issues cannot be null');
        }

        $this->container['issues'] = $issues;
        return $this;
    }

    /**
     * Gets score
     *
     * @return int|null
    
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param int|null $score score
     *
     * @return self
    
     */
    public function setScore($score)
    {
        if (is_null($score)) {
            throw new \InvalidArgumentException('non-nullable score cannot be null');
        }

        $this->container['score'] = $score;
        return $this;
    }
}
