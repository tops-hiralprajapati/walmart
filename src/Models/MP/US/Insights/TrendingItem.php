<?php

/**
 * TrendingItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Insights Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\Insights;

use Walmart\Models\BaseModel;

/**
 * TrendingItem Class Doc Comment
 *
 * @category Class

 * @description List of Qualified Items

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class TrendingItem extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'TrendingItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'categoryName' => 'string',
        'departmentName' => 'string',
        'isbn' => 'string',
        'productName' => 'string',
        'isTwoDayEligible' => 'int',
        'itemId' => 'string',
        'totalOffers' => 'int',
        'issn' => 'string',
        'existsForSeller' => 'int',
        'rank' => 'int',
        'brand' => 'string',
        'superDepartmentName' => 'string',
        'subCategoryName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'categoryName' => null,
        'departmentName' => null,
        'isbn' => null,
        'productName' => null,
        'isTwoDayEligible' => 'int32',
        'itemId' => null,
        'totalOffers' => 'int32',
        'issn' => null,
        'existsForSeller' => 'int32',
        'rank' => 'int32',
        'brand' => null,
        'superDepartmentName' => null,
        'subCategoryName' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'categoryName' => false,
        'departmentName' => false,
        'isbn' => false,
        'productName' => false,
        'isTwoDayEligible' => false,
        'itemId' => false,
        'totalOffers' => false,
        'issn' => false,
        'existsForSeller' => false,
        'rank' => false,
        'brand' => false,
        'superDepartmentName' => false,
        'subCategoryName' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'categoryName' => 'categoryName',
        'departmentName' => 'departmentName',
        'isbn' => 'isbn',
        'productName' => 'productName',
        'isTwoDayEligible' => 'isTwoDayEligible',
        'itemId' => 'itemId',
        'totalOffers' => 'totalOffers',
        'issn' => 'issn',
        'existsForSeller' => 'existsForSeller',
        'rank' => 'rank',
        'brand' => 'brand',
        'superDepartmentName' => 'superDepartmentName',
        'subCategoryName' => 'subCategoryName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'categoryName' => 'setCategoryName',
        'departmentName' => 'setDepartmentName',
        'isbn' => 'setIsbn',
        'productName' => 'setProductName',
        'isTwoDayEligible' => 'setIsTwoDayEligible',
        'itemId' => 'setItemId',
        'totalOffers' => 'setTotalOffers',
        'issn' => 'setIssn',
        'existsForSeller' => 'setExistsForSeller',
        'rank' => 'setRank',
        'brand' => 'setBrand',
        'superDepartmentName' => 'setSuperDepartmentName',
        'subCategoryName' => 'setSubCategoryName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'categoryName' => 'getCategoryName',
        'departmentName' => 'getDepartmentName',
        'isbn' => 'getIsbn',
        'productName' => 'getProductName',
        'isTwoDayEligible' => 'getIsTwoDayEligible',
        'itemId' => 'getItemId',
        'totalOffers' => 'getTotalOffers',
        'issn' => 'getIssn',
        'existsForSeller' => 'getExistsForSeller',
        'rank' => 'getRank',
        'brand' => 'getBrand',
        'superDepartmentName' => 'getSuperDepartmentName',
        'subCategoryName' => 'getSubCategoryName'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('categoryName', $data ?? [], null);
        $this->setIfExists('departmentName', $data ?? [], null);
        $this->setIfExists('isbn', $data ?? [], null);
        $this->setIfExists('productName', $data ?? [], null);
        $this->setIfExists('isTwoDayEligible', $data ?? [], null);
        $this->setIfExists('itemId', $data ?? [], null);
        $this->setIfExists('totalOffers', $data ?? [], null);
        $this->setIfExists('issn', $data ?? [], null);
        $this->setIfExists('existsForSeller', $data ?? [], null);
        $this->setIfExists('rank', $data ?? [], null);
        $this->setIfExists('brand', $data ?? [], null);
        $this->setIfExists('superDepartmentName', $data ?? [], null);
        $this->setIfExists('subCategoryName', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];


        return $invalidProperties;
    }

    /**
     * Gets categoryName
     *
     * @return string|null
    
     */
    public function getCategoryName()
    {
        return $this->container['categoryName'];
    }

    /**
     * Sets categoryName
     *
     * @param string|null $categoryName The categories this item belongs to
     *
     * @return self
    
     */
    public function setCategoryName($categoryName)
    {
        if (is_null($categoryName)) {
            throw new \InvalidArgumentException('non-nullable categoryName cannot be null');
        }

        $this->container['categoryName'] = $categoryName;
        return $this;
    }

    /**
     * Gets departmentName
     *
     * @return string|null
    
     */
    public function getDepartmentName()
    {
        return $this->container['departmentName'];
    }

    /**
     * Sets departmentName
     *
     * @param string|null $departmentName The department this product belongs to
     *
     * @return self
    
     */
    public function setDepartmentName($departmentName)
    {
        if (is_null($departmentName)) {
            throw new \InvalidArgumentException('non-nullable departmentName cannot be null');
        }

        $this->container['departmentName'] = $departmentName;
        return $this;
    }

    /**
     * Gets isbn
     *
     * @return string|null
    
     */
    public function getIsbn()
    {
        return $this->container['isbn'];
    }

    /**
     * Sets isbn
     *
     * @param string|null $isbn International Standard Book Number
     *
     * @return self
    
     */
    public function setIsbn($isbn)
    {
        if (is_null($isbn)) {
            throw new \InvalidArgumentException('non-nullable isbn cannot be null');
        }

        $this->container['isbn'] = $isbn;
        return $this;
    }

    /**
     * Gets productName
     *
     * @return string|null
    
     */
    public function getProductName()
    {
        return $this->container['productName'];
    }

    /**
     * Sets productName
     *
     * @param string|null $productName A seller-specified, alphanumeric string uniquely identifying the product name
     *
     * @return self
    
     */
    public function setProductName($productName)
    {
        if (is_null($productName)) {
            throw new \InvalidArgumentException('non-nullable productName cannot be null');
        }

        $this->container['productName'] = $productName;
        return $this;
    }

    /**
     * Gets isTwoDayEligible
     *
     * @return int|null
    
     */
    public function getIsTwoDayEligible()
    {
        return $this->container['isTwoDayEligible'];
    }

    /**
     * Sets isTwoDayEligible
     *
     * @param int|null $isTwoDayEligible if the item can be shipped in two days
     *
     * @return self
    
     */
    public function setIsTwoDayEligible($isTwoDayEligible)
    {
        if (is_null($isTwoDayEligible)) {
            throw new \InvalidArgumentException('non-nullable isTwoDayEligible cannot be null');
        }

        $this->container['isTwoDayEligible'] = $isTwoDayEligible;
        return $this;
    }

    /**
     * Gets itemId
     *
     * @return string|null
    
     */
    public function getItemId()
    {
        return $this->container['itemId'];
    }

    /**
     * Sets itemId
     *
     * @param string|null $itemId Specifies the item identifier generated by Walmart
     *
     * @return self
    
     */
    public function setItemId($itemId)
    {
        if (is_null($itemId)) {
            throw new \InvalidArgumentException('non-nullable itemId cannot be null');
        }

        $this->container['itemId'] = $itemId;
        return $this;
    }

    /**
     * Gets totalOffers
     *
     * @return int|null
    
     */
    public function getTotalOffers()
    {
        return $this->container['totalOffers'];
    }

    /**
     * Sets totalOffers
     *
     * @param int|null $totalOffers Total number of item stored by seller
     *
     * @return self
    
     */
    public function setTotalOffers($totalOffers)
    {
        if (is_null($totalOffers)) {
            throw new \InvalidArgumentException('non-nullable totalOffers cannot be null');
        }

        $this->container['totalOffers'] = $totalOffers;
        return $this;
    }

    /**
     * Gets issn
     *
     * @return string|null
    
     */
    public function getIssn()
    {
        return $this->container['issn'];
    }

    /**
     * Sets issn
     *
     * @param string|null $issn International Standard Serial Number
     *
     * @return self
    
     */
    public function setIssn($issn)
    {
        if (is_null($issn)) {
            throw new \InvalidArgumentException('non-nullable issn cannot be null');
        }

        $this->container['issn'] = $issn;
        return $this;
    }

    /**
     * Gets existsForSeller
     *
     * @return int|null
    
     */
    public function getExistsForSeller()
    {
        return $this->container['existsForSeller'];
    }

    /**
     * Sets existsForSeller
     *
     * @param int|null $existsForSeller if seller is selling this item
     *
     * @return self
    
     */
    public function setExistsForSeller($existsForSeller)
    {
        if (is_null($existsForSeller)) {
            throw new \InvalidArgumentException('non-nullable existsForSeller cannot be null');
        }

        $this->container['existsForSeller'] = $existsForSeller;
        return $this;
    }

    /**
     * Gets rank
     *
     * @return int|null
    
     */
    public function getRank()
    {
        return $this->container['rank'];
    }

    /**
     * Sets rank
     *
     * @param int|null $rank Level of trending for this item
     *
     * @return self
    
     */
    public function setRank($rank)
    {
        if (is_null($rank)) {
            throw new \InvalidArgumentException('non-nullable rank cannot be null');
        }

        $this->container['rank'] = $rank;
        return $this;
    }

    /**
     * Gets brand
     *
     * @return string|null
    
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string|null $brand Specifies the item brand
     *
     * @return self
    
     */
    public function setBrand($brand)
    {
        if (is_null($brand)) {
            throw new \InvalidArgumentException('non-nullable brand cannot be null');
        }

        $this->container['brand'] = $brand;
        return $this;
    }

    /**
     * Gets superDepartmentName
     *
     * @return string|null
    
     */
    public function getSuperDepartmentName()
    {
        return $this->container['superDepartmentName'];
    }

    /**
     * Sets superDepartmentName
     *
     * @param string|null $superDepartmentName The superDepartmentName this item belongs to
     *
     * @return self
    
     */
    public function setSuperDepartmentName($superDepartmentName)
    {
        if (is_null($superDepartmentName)) {
            throw new \InvalidArgumentException('non-nullable superDepartmentName cannot be null');
        }

        $this->container['superDepartmentName'] = $superDepartmentName;
        return $this;
    }

    /**
     * Gets subCategoryName
     *
     * @return string|null
    
     */
    public function getSubCategoryName()
    {
        return $this->container['subCategoryName'];
    }

    /**
     * Sets subCategoryName
     *
     * @param string|null $subCategoryName The subCategoryName this item belongs to
     *
     * @return self
    
     */
    public function setSubCategoryName($subCategoryName)
    {
        if (is_null($subCategoryName)) {
            throw new \InvalidArgumentException('non-nullable subCategoryName cannot be null');
        }

        $this->container['subCategoryName'] = $subCategoryName;
        return $this;
    }
}
