<?php

/**
 * ShipNodes
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Inventory Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\Inventory;

use Walmart\Models\BaseModel;

/**
 * ShipNodes Class Doc Comment
 *
 * @category Class

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class ShipNodes extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ShipNodes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'modifiedDate' => 'string',
        'availToSellQty' => 'int',
        'onHandQty' => 'int',
        'shipNodeType' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'modifiedDate' => null,
        'availToSellQty' => 'int32',
        'onHandQty' => 'int32',
        'shipNodeType' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'modifiedDate' => false,
        'availToSellQty' => false,
        'onHandQty' => false,
        'shipNodeType' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'modifiedDate' => 'modifiedDate',
        'availToSellQty' => 'availToSellQty',
        'onHandQty' => 'onHandQty',
        'shipNodeType' => 'shipNodeType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'modifiedDate' => 'setModifiedDate',
        'availToSellQty' => 'setAvailToSellQty',
        'onHandQty' => 'setOnHandQty',
        'shipNodeType' => 'setShipNodeType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'modifiedDate' => 'getModifiedDate',
        'availToSellQty' => 'getAvailToSellQty',
        'onHandQty' => 'getOnHandQty',
        'shipNodeType' => 'getShipNodeType'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('modifiedDate', $data ?? [], null);
        $this->setIfExists('availToSellQty', $data ?? [], null);
        $this->setIfExists('onHandQty', $data ?? [], null);
        $this->setIfExists('shipNodeType', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];


        return $invalidProperties;
    }

    /**
     * Gets modifiedDate
     *
     * @return string|null
    
     */
    public function getModifiedDate()
    {
        return $this->container['modifiedDate'];
    }

    /**
     * Sets modifiedDate
     *
     * @param string|null $modifiedDate Last changes date for the item.
     *
     * @return self
    
     */
    public function setModifiedDate($modifiedDate)
    {
        if (is_null($modifiedDate)) {
            throw new \InvalidArgumentException('non-nullable modifiedDate cannot be null');
        }

        $this->container['modifiedDate'] = $modifiedDate;
        return $this;
    }

    /**
     * Gets availToSellQty
     *
     * @return int|null
    
     */
    public function getAvailToSellQty()
    {
        return $this->container['availToSellQty'];
    }

    /**
     * Sets availToSellQty
     *
     * @param int|null $availToSellQty The available quantity is the quantity of an item that is available to be allocated to orders.
     *
     * @return self
    
     */
    public function setAvailToSellQty($availToSellQty)
    {
        if (is_null($availToSellQty)) {
            throw new \InvalidArgumentException('non-nullable availToSellQty cannot be null');
        }

        $this->container['availToSellQty'] = $availToSellQty;
        return $this;
    }

    /**
     * Gets onHandQty
     *
     * @return int|null
    
     */
    public function getOnHandQty()
    {
        return $this->container['onHandQty'];
    }

    /**
     * Sets onHandQty
     *
     * @param int|null $onHandQty The on-hand balance is the quantity of active inventory stored at the warehouse.Active inventory is defined as the usable amount of an item that is in the warehouse.Inventory is active if it is not damaged, expired or being inspected.
     *
     * @return self
    
     */
    public function setOnHandQty($onHandQty)
    {
        if (is_null($onHandQty)) {
            throw new \InvalidArgumentException('non-nullable onHandQty cannot be null');
        }

        $this->container['onHandQty'] = $onHandQty;
        return $this;
    }

    /**
     * Gets shipNodeType
     *
     * @return string|null
    
     */
    public function getShipNodeType()
    {
        return $this->container['shipNodeType'];
    }

    /**
     * Sets shipNodeType
     *
     * @param string|null $shipNodeType Identifies fulfillment aspect of invetory. Walmart, seller or 3PL fulfilled. Possible value is 'WFSFulfilled'. In later phase we will also add seller fulfilled inventory.
     *
     * @return self
    
     */
    public function setShipNodeType($shipNodeType)
    {
        if (is_null($shipNodeType)) {
            throw new \InvalidArgumentException('non-nullable shipNodeType cannot be null');
        }

        $this->container['shipNodeType'] = $shipNodeType;
        return $this;
    }
}
