<?php

/**
 * Phone
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Order Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\Orders;

use Walmart\Models\BaseModel;

/**
 * Phone Class Doc Comment
 *
 * @category Class

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class Phone extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Phone';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'areaCode' => 'string',
        'extension' => 'string',
        'completeNumber' => 'string',
        'type' => 'string',
        'subscriberNumber' => 'string',
        'countryCode' => 'string',
        'phoneValidity' => '\Walmart\Models\MP\US\Orders\PhoneValidity'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => 'uuid',
        'areaCode' => null,
        'extension' => null,
        'completeNumber' => null,
        'type' => null,
        'subscriberNumber' => null,
        'countryCode' => null,
        'phoneValidity' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'areaCode' => false,
        'extension' => false,
        'completeNumber' => false,
        'type' => false,
        'subscriberNumber' => false,
        'countryCode' => false,
        'phoneValidity' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'areaCode' => 'areaCode',
        'extension' => 'extension',
        'completeNumber' => 'completeNumber',
        'type' => 'type',
        'subscriberNumber' => 'subscriberNumber',
        'countryCode' => 'countryCode',
        'phoneValidity' => 'phoneValidity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'id' => 'setId',
        'areaCode' => 'setAreaCode',
        'extension' => 'setExtension',
        'completeNumber' => 'setCompleteNumber',
        'type' => 'setType',
        'subscriberNumber' => 'setSubscriberNumber',
        'countryCode' => 'setCountryCode',
        'phoneValidity' => 'setPhoneValidity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'id' => 'getId',
        'areaCode' => 'getAreaCode',
        'extension' => 'getExtension',
        'completeNumber' => 'getCompleteNumber',
        'type' => 'getType',
        'subscriberNumber' => 'getSubscriberNumber',
        'countryCode' => 'getCountryCode',
        'phoneValidity' => 'getPhoneValidity'
    ];


    public const TYPE_MOBILE = 'MOBILE';

    public const TYPE_HOME = 'HOME';

    public const TYPE_WORK = 'WORK';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_MOBILE,
            self::TYPE_HOME,
            self::TYPE_WORK,
        ];
    }

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('areaCode', $data ?? [], null);
        $this->setIfExists('extension', $data ?? [], null);
        $this->setIfExists('completeNumber', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('subscriberNumber', $data ?? [], null);
        $this->setIfExists('countryCode', $data ?? [], null);
        $this->setIfExists('phoneValidity', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }


        return $invalidProperties;
    }

    /**
     * Gets id
     *
     * @return string|null
    
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
    
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;
        return $this;
    }

    /**
     * Gets areaCode
     *
     * @return string|null
    
     */
    public function getAreaCode()
    {
        return $this->container['areaCode'];
    }

    /**
     * Sets areaCode
     *
     * @param string|null $areaCode areaCode
     *
     * @return self
    
     */
    public function setAreaCode($areaCode)
    {
        if (is_null($areaCode)) {
            throw new \InvalidArgumentException('non-nullable areaCode cannot be null');
        }

        $this->container['areaCode'] = $areaCode;
        return $this;
    }

    /**
     * Gets extension
     *
     * @return string|null
    
     */
    public function getExtension()
    {
        return $this->container['extension'];
    }

    /**
     * Sets extension
     *
     * @param string|null $extension extension
     *
     * @return self
    
     */
    public function setExtension($extension)
    {
        if (is_null($extension)) {
            throw new \InvalidArgumentException('non-nullable extension cannot be null');
        }

        $this->container['extension'] = $extension;
        return $this;
    }

    /**
     * Gets completeNumber
     *
     * @return string|null
    
     */
    public function getCompleteNumber()
    {
        return $this->container['completeNumber'];
    }

    /**
     * Sets completeNumber
     *
     * @param string|null $completeNumber completeNumber
     *
     * @return self
    
     */
    public function setCompleteNumber($completeNumber)
    {
        if (is_null($completeNumber)) {
            throw new \InvalidArgumentException('non-nullable completeNumber cannot be null');
        }

        $this->container['completeNumber'] = $completeNumber;
        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
    
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
    
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['type'] = $type;
        return $this;
    }

    /**
     * Gets subscriberNumber
     *
     * @return string|null
    
     */
    public function getSubscriberNumber()
    {
        return $this->container['subscriberNumber'];
    }

    /**
     * Sets subscriberNumber
     *
     * @param string|null $subscriberNumber subscriberNumber
     *
     * @return self
    
     */
    public function setSubscriberNumber($subscriberNumber)
    {
        if (is_null($subscriberNumber)) {
            throw new \InvalidArgumentException('non-nullable subscriberNumber cannot be null');
        }

        $this->container['subscriberNumber'] = $subscriberNumber;
        return $this;
    }

    /**
     * Gets countryCode
     *
     * @return string|null
    
     */
    public function getCountryCode()
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     *
     * @param string|null $countryCode countryCode
     *
     * @return self
    
     */
    public function setCountryCode($countryCode)
    {
        if (is_null($countryCode)) {
            throw new \InvalidArgumentException('non-nullable countryCode cannot be null');
        }

        $this->container['countryCode'] = $countryCode;
        return $this;
    }

    /**
     * Gets phoneValidity
     *
     * @return \Walmart\Models\MP\US\Orders\PhoneValidity|null
    
     */
    public function getPhoneValidity()
    {
        return $this->container['phoneValidity'];
    }

    /**
     * Sets phoneValidity
     *
     * @param \Walmart\Models\MP\US\Orders\PhoneValidity|null $phoneValidity phoneValidity
     *
     * @return self
    
     */
    public function setPhoneValidity($phoneValidity)
    {
        if (is_null($phoneValidity)) {
            throw new \InvalidArgumentException('non-nullable phoneValidity cannot be null');
        }

        $this->container['phoneValidity'] = $phoneValidity;
        return $this;
    }
}
