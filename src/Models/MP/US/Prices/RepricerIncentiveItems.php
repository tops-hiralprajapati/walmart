<?php

/**
 * RepricerIncentiveItems
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Price Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\Prices;

use Walmart\Models\BaseModel;

/**
 * RepricerIncentiveItems Class Doc Comment
 *
 * @category Class

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class RepricerIncentiveItems extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'RepricerIncentiveItems';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'productName' => 'string',
        'skuId' => 'string',
        'sellerPrice' => 'float',
        'floorPrice' => 'float',
        'incentiveLimit' => 'float',
        'incentiveStartDate' => 'string',
        'incentiveEndDate' => 'string',
        'shippingPrice' => 'float',
        'competitivePrice' => 'float',
        'competitorShippingPrice' => 'float',
        'competitorUrl' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'productName' => null,
        'skuId' => null,
        'sellerPrice' => 'double',
        'floorPrice' => 'double',
        'incentiveLimit' => 'double',
        'incentiveStartDate' => null,
        'incentiveEndDate' => null,
        'shippingPrice' => 'double',
        'competitivePrice' => 'double',
        'competitorShippingPrice' => 'double',
        'competitorUrl' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'productName' => false,
        'skuId' => false,
        'sellerPrice' => false,
        'floorPrice' => false,
        'incentiveLimit' => false,
        'incentiveStartDate' => false,
        'incentiveEndDate' => false,
        'shippingPrice' => false,
        'competitivePrice' => false,
        'competitorShippingPrice' => false,
        'competitorUrl' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'productName' => 'productName',
        'skuId' => 'skuId',
        'sellerPrice' => 'sellerPrice',
        'floorPrice' => 'floorPrice',
        'incentiveLimit' => 'incentiveLimit',
        'incentiveStartDate' => 'incentiveStartDate',
        'incentiveEndDate' => 'incentiveEndDate',
        'shippingPrice' => 'shippingPrice',
        'competitivePrice' => 'competitivePrice',
        'competitorShippingPrice' => 'competitorShippingPrice',
        'competitorUrl' => 'competitorUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'productName' => 'setProductName',
        'skuId' => 'setSkuId',
        'sellerPrice' => 'setSellerPrice',
        'floorPrice' => 'setFloorPrice',
        'incentiveLimit' => 'setIncentiveLimit',
        'incentiveStartDate' => 'setIncentiveStartDate',
        'incentiveEndDate' => 'setIncentiveEndDate',
        'shippingPrice' => 'setShippingPrice',
        'competitivePrice' => 'setCompetitivePrice',
        'competitorShippingPrice' => 'setCompetitorShippingPrice',
        'competitorUrl' => 'setCompetitorUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'productName' => 'getProductName',
        'skuId' => 'getSkuId',
        'sellerPrice' => 'getSellerPrice',
        'floorPrice' => 'getFloorPrice',
        'incentiveLimit' => 'getIncentiveLimit',
        'incentiveStartDate' => 'getIncentiveStartDate',
        'incentiveEndDate' => 'getIncentiveEndDate',
        'shippingPrice' => 'getShippingPrice',
        'competitivePrice' => 'getCompetitivePrice',
        'competitorShippingPrice' => 'getCompetitorShippingPrice',
        'competitorUrl' => 'getCompetitorUrl'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('productName', $data ?? [], null);
        $this->setIfExists('skuId', $data ?? [], null);
        $this->setIfExists('sellerPrice', $data ?? [], null);
        $this->setIfExists('floorPrice', $data ?? [], null);
        $this->setIfExists('incentiveLimit', $data ?? [], null);
        $this->setIfExists('incentiveStartDate', $data ?? [], null);
        $this->setIfExists('incentiveEndDate', $data ?? [], null);
        $this->setIfExists('shippingPrice', $data ?? [], null);
        $this->setIfExists('competitivePrice', $data ?? [], null);
        $this->setIfExists('competitorShippingPrice', $data ?? [], null);
        $this->setIfExists('competitorUrl', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];


        return $invalidProperties;
    }

    /**
     * Gets productName
     *
     * @return string|null
    
     */
    public function getProductName()
    {
        return $this->container['productName'];
    }

    /**
     * Sets productName
     *
     * @param string|null $productName productName
     *
     * @return self
    
     */
    public function setProductName($productName)
    {
        if (is_null($productName)) {
            throw new \InvalidArgumentException('non-nullable productName cannot be null');
        }

        $this->container['productName'] = $productName;
        return $this;
    }

    /**
     * Gets skuId
     *
     * @return string|null
    
     */
    public function getSkuId()
    {
        return $this->container['skuId'];
    }

    /**
     * Sets skuId
     *
     * @param string|null $skuId skuId
     *
     * @return self
    
     */
    public function setSkuId($skuId)
    {
        if (is_null($skuId)) {
            throw new \InvalidArgumentException('non-nullable skuId cannot be null');
        }

        $this->container['skuId'] = $skuId;
        return $this;
    }

    /**
     * Gets sellerPrice
     *
     * @return float|null
    
     */
    public function getSellerPrice()
    {
        return $this->container['sellerPrice'];
    }

    /**
     * Sets sellerPrice
     *
     * @param float|null $sellerPrice sellerPrice
     *
     * @return self
    
     */
    public function setSellerPrice($sellerPrice)
    {
        if (is_null($sellerPrice)) {
            throw new \InvalidArgumentException('non-nullable sellerPrice cannot be null');
        }

        $this->container['sellerPrice'] = $sellerPrice;
        return $this;
    }

    /**
     * Gets floorPrice
     *
     * @return float|null
    
     */
    public function getFloorPrice()
    {
        return $this->container['floorPrice'];
    }

    /**
     * Sets floorPrice
     *
     * @param float|null $floorPrice floorPrice
     *
     * @return self
    
     */
    public function setFloorPrice($floorPrice)
    {
        if (is_null($floorPrice)) {
            throw new \InvalidArgumentException('non-nullable floorPrice cannot be null');
        }

        $this->container['floorPrice'] = $floorPrice;
        return $this;
    }

    /**
     * Gets incentiveLimit
     *
     * @return float|null
    
     */
    public function getIncentiveLimit()
    {
        return $this->container['incentiveLimit'];
    }

    /**
     * Sets incentiveLimit
     *
     * @param float|null $incentiveLimit incentiveLimit
     *
     * @return self
    
     */
    public function setIncentiveLimit($incentiveLimit)
    {
        if (is_null($incentiveLimit)) {
            throw new \InvalidArgumentException('non-nullable incentiveLimit cannot be null');
        }

        $this->container['incentiveLimit'] = $incentiveLimit;
        return $this;
    }

    /**
     * Gets incentiveStartDate
     *
     * @return string|null
    
     */
    public function getIncentiveStartDate()
    {
        return $this->container['incentiveStartDate'];
    }

    /**
     * Sets incentiveStartDate
     *
     * @param string|null $incentiveStartDate incentiveStartDate
     *
     * @return self
    
     */
    public function setIncentiveStartDate($incentiveStartDate)
    {
        if (is_null($incentiveStartDate)) {
            throw new \InvalidArgumentException('non-nullable incentiveStartDate cannot be null');
        }

        $this->container['incentiveStartDate'] = $incentiveStartDate;
        return $this;
    }

    /**
     * Gets incentiveEndDate
     *
     * @return string|null
    
     */
    public function getIncentiveEndDate()
    {
        return $this->container['incentiveEndDate'];
    }

    /**
     * Sets incentiveEndDate
     *
     * @param string|null $incentiveEndDate incentiveEndDate
     *
     * @return self
    
     */
    public function setIncentiveEndDate($incentiveEndDate)
    {
        if (is_null($incentiveEndDate)) {
            throw new \InvalidArgumentException('non-nullable incentiveEndDate cannot be null');
        }

        $this->container['incentiveEndDate'] = $incentiveEndDate;
        return $this;
    }

    /**
     * Gets shippingPrice
     *
     * @return float|null
    
     */
    public function getShippingPrice()
    {
        return $this->container['shippingPrice'];
    }

    /**
     * Sets shippingPrice
     *
     * @param float|null $shippingPrice shippingPrice
     *
     * @return self
    
     */
    public function setShippingPrice($shippingPrice)
    {
        if (is_null($shippingPrice)) {
            throw new \InvalidArgumentException('non-nullable shippingPrice cannot be null');
        }

        $this->container['shippingPrice'] = $shippingPrice;
        return $this;
    }

    /**
     * Gets competitivePrice
     *
     * @return float|null
    
     */
    public function getCompetitivePrice()
    {
        return $this->container['competitivePrice'];
    }

    /**
     * Sets competitivePrice
     *
     * @param float|null $competitivePrice competitivePrice
     *
     * @return self
    
     */
    public function setCompetitivePrice($competitivePrice)
    {
        if (is_null($competitivePrice)) {
            throw new \InvalidArgumentException('non-nullable competitivePrice cannot be null');
        }

        $this->container['competitivePrice'] = $competitivePrice;
        return $this;
    }

    /**
     * Gets competitorShippingPrice
     *
     * @return float|null
    
     */
    public function getCompetitorShippingPrice()
    {
        return $this->container['competitorShippingPrice'];
    }

    /**
     * Sets competitorShippingPrice
     *
     * @param float|null $competitorShippingPrice competitorShippingPrice
     *
     * @return self
    
     */
    public function setCompetitorShippingPrice($competitorShippingPrice)
    {
        if (is_null($competitorShippingPrice)) {
            throw new \InvalidArgumentException('non-nullable competitorShippingPrice cannot be null');
        }

        $this->container['competitorShippingPrice'] = $competitorShippingPrice;
        return $this;
    }

    /**
     * Gets competitorUrl
     *
     * @return string|null
    
     */
    public function getCompetitorUrl()
    {
        return $this->container['competitorUrl'];
    }

    /**
     * Sets competitorUrl
     *
     * @param string|null $competitorUrl competitorUrl
     *
     * @return self
    
     */
    public function setCompetitorUrl($competitorUrl)
    {
        if (is_null($competitorUrl)) {
            throw new \InvalidArgumentException('non-nullable competitorUrl cannot be null');
        }

        $this->container['competitorUrl'] = $competitorUrl;
        return $this;
    }
}
