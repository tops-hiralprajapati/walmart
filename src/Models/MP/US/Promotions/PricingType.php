<?php

/**
 * PricingType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Promotion Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\Promotions;

use Walmart\Models\BaseModel;

/**
 * PricingType Class Doc Comment
 *
 * @category Class

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class PricingType extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PricingType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'currentPrice' => '\Walmart\Models\MP\US\Promotions\PromotionsPrice',
        'currentPriceType' => 'string',
        'comparisonPrice' => '\Walmart\Models\MP\US\Promotions\PromotionsPrice',
        'comparisonPriceType' => 'string',
        'savingsAmount' => 'float',
        'savingsPercent' => 'float',
        'priceDisplayCodes' => '\Walmart\Models\MP\US\Promotions\PriceDisplayCodes',
        'pickupDiscount' => '\Walmart\Models\MP\US\Promotions\PickupDiscount',
        'effectiveDate' => 'int',
        'expirationDate' => 'int',
        'processMode' => 'string',
        'pid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'currentPrice' => null,
        'currentPriceType' => null,
        'comparisonPrice' => null,
        'comparisonPriceType' => null,
        'savingsAmount' => null,
        'savingsPercent' => null,
        'priceDisplayCodes' => null,
        'pickupDiscount' => null,
        'effectiveDate' => 'int64',
        'expirationDate' => 'int64',
        'processMode' => null,
        'pid' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'currentPrice' => false,
        'currentPriceType' => false,
        'comparisonPrice' => false,
        'comparisonPriceType' => false,
        'savingsAmount' => false,
        'savingsPercent' => false,
        'priceDisplayCodes' => false,
        'pickupDiscount' => false,
        'effectiveDate' => false,
        'expirationDate' => false,
        'processMode' => false,
        'pid' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'currentPrice' => 'currentPrice',
        'currentPriceType' => 'currentPriceType',
        'comparisonPrice' => 'comparisonPrice',
        'comparisonPriceType' => 'comparisonPriceType',
        'savingsAmount' => 'savingsAmount',
        'savingsPercent' => 'savingsPercent',
        'priceDisplayCodes' => 'priceDisplayCodes',
        'pickupDiscount' => 'pickupDiscount',
        'effectiveDate' => 'effectiveDate',
        'expirationDate' => 'expirationDate',
        'processMode' => 'processMode',
        'pid' => 'pid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'currentPrice' => 'setCurrentPrice',
        'currentPriceType' => 'setCurrentPriceType',
        'comparisonPrice' => 'setComparisonPrice',
        'comparisonPriceType' => 'setComparisonPriceType',
        'savingsAmount' => 'setSavingsAmount',
        'savingsPercent' => 'setSavingsPercent',
        'priceDisplayCodes' => 'setPriceDisplayCodes',
        'pickupDiscount' => 'setPickupDiscount',
        'effectiveDate' => 'setEffectiveDate',
        'expirationDate' => 'setExpirationDate',
        'processMode' => 'setProcessMode',
        'pid' => 'setPid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'currentPrice' => 'getCurrentPrice',
        'currentPriceType' => 'getCurrentPriceType',
        'comparisonPrice' => 'getComparisonPrice',
        'comparisonPriceType' => 'getComparisonPriceType',
        'savingsAmount' => 'getSavingsAmount',
        'savingsPercent' => 'getSavingsPercent',
        'priceDisplayCodes' => 'getPriceDisplayCodes',
        'pickupDiscount' => 'getPickupDiscount',
        'effectiveDate' => 'getEffectiveDate',
        'expirationDate' => 'getExpirationDate',
        'processMode' => 'getProcessMode',
        'pid' => 'getPid'
    ];


    public const CURRENT_PRICE_TYPE_BASE = 'BASE';

    public const CURRENT_PRICE_TYPE_REDUCED = 'REDUCED';

    public const CURRENT_PRICE_TYPE_SAVINGS_AMT = 'SAVINGS_AMT';

    public const CURRENT_PRICE_TYPE_SAVINGS_PCT = 'SAVINGS_PCT';

    public const CURRENT_PRICE_TYPE_ROLLBACK = 'ROLLBACK';

    public const CURRENT_PRICE_TYPE_CLEARANCE = 'CLEARANCE';

    public const CURRENT_PRICE_TYPE_LIST_PRICE = 'LIST_PRICE';

    public const COMPARISON_PRICE_TYPE_BASE = 'BASE';

    public const COMPARISON_PRICE_TYPE_REDUCED = 'REDUCED';

    public const COMPARISON_PRICE_TYPE_SAVINGS_AMT = 'SAVINGS_AMT';

    public const COMPARISON_PRICE_TYPE_SAVINGS_PCT = 'SAVINGS_PCT';

    public const COMPARISON_PRICE_TYPE_ROLLBACK = 'ROLLBACK';

    public const COMPARISON_PRICE_TYPE_CLEARANCE = 'CLEARANCE';

    public const COMPARISON_PRICE_TYPE_LIST_PRICE = 'LIST_PRICE';

    public const PROCESS_MODE_UPSERT = 'UPSERT';

    public const PROCESS_MODE_DELETE = 'DELETE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrentPriceTypeAllowableValues()
    {
        return [
            self::CURRENT_PRICE_TYPE_BASE,
            self::CURRENT_PRICE_TYPE_REDUCED,
            self::CURRENT_PRICE_TYPE_SAVINGS_AMT,
            self::CURRENT_PRICE_TYPE_SAVINGS_PCT,
            self::CURRENT_PRICE_TYPE_ROLLBACK,
            self::CURRENT_PRICE_TYPE_CLEARANCE,
            self::CURRENT_PRICE_TYPE_LIST_PRICE,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getComparisonPriceTypeAllowableValues()
    {
        return [
            self::COMPARISON_PRICE_TYPE_BASE,
            self::COMPARISON_PRICE_TYPE_REDUCED,
            self::COMPARISON_PRICE_TYPE_SAVINGS_AMT,
            self::COMPARISON_PRICE_TYPE_SAVINGS_PCT,
            self::COMPARISON_PRICE_TYPE_ROLLBACK,
            self::COMPARISON_PRICE_TYPE_CLEARANCE,
            self::COMPARISON_PRICE_TYPE_LIST_PRICE,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProcessModeAllowableValues()
    {
        return [
            self::PROCESS_MODE_UPSERT,
            self::PROCESS_MODE_DELETE,
        ];
    }

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('currentPrice', $data ?? [], null);
        $this->setIfExists('currentPriceType', $data ?? [], null);
        $this->setIfExists('comparisonPrice', $data ?? [], null);
        $this->setIfExists('comparisonPriceType', $data ?? [], null);
        $this->setIfExists('savingsAmount', $data ?? [], null);
        $this->setIfExists('savingsPercent', $data ?? [], null);
        $this->setIfExists('priceDisplayCodes', $data ?? [], null);
        $this->setIfExists('pickupDiscount', $data ?? [], null);
        $this->setIfExists('effectiveDate', $data ?? [], null);
        $this->setIfExists('expirationDate', $data ?? [], null);
        $this->setIfExists('processMode', $data ?? [], null);
        $this->setIfExists('pid', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['currentPrice'] === null) {
            $invalidProperties[] = "'currentPrice' can't be null";
        }
        if ($this->container['currentPriceType'] === null) {
            $invalidProperties[] = "'currentPriceType' can't be null";
        }
        $allowedValues = $this->getCurrentPriceTypeAllowableValues();
        if (!is_null($this->container['currentPriceType']) && !in_array($this->container['currentPriceType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currentPriceType', must be one of '%s'",
                $this->container['currentPriceType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getComparisonPriceTypeAllowableValues();
        if (!is_null($this->container['comparisonPriceType']) && !in_array($this->container['comparisonPriceType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'comparisonPriceType', must be one of '%s'",
                $this->container['comparisonPriceType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProcessModeAllowableValues();
        if (!is_null($this->container['processMode']) && !in_array($this->container['processMode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'processMode', must be one of '%s'",
                $this->container['processMode'],
                implode("', '", $allowedValues)
            );
        }


        return $invalidProperties;
    }

    /**
     * Gets currentPrice
     *
     * @return \Walmart\Models\MP\US\Promotions\PromotionsPrice
    
     */
    public function getCurrentPrice()
    {
        return $this->container['currentPrice'];
    }

    /**
     * Sets currentPrice
     *
     * @param \Walmart\Models\MP\US\Promotions\PromotionsPrice $currentPrice currentPrice
     *
     * @return self
    
     */
    public function setCurrentPrice($currentPrice)
    {
        if (is_null($currentPrice)) {
            throw new \InvalidArgumentException('non-nullable currentPrice cannot be null');
        }

        $this->container['currentPrice'] = $currentPrice;
        return $this;
    }

    /**
     * Gets currentPriceType
     *
     * @return string
    
     */
    public function getCurrentPriceType()
    {
        return $this->container['currentPriceType'];
    }

    /**
     * Sets currentPriceType
     *
     * @param string $currentPriceType currentPriceType
     *
     * @return self
    
     */
    public function setCurrentPriceType($currentPriceType)
    {
        if (is_null($currentPriceType)) {
            throw new \InvalidArgumentException('non-nullable currentPriceType cannot be null');
        }
        $allowedValues = $this->getCurrentPriceTypeAllowableValues();
        if (!in_array($currentPriceType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currentPriceType', must be one of '%s'",
                    $currentPriceType,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['currentPriceType'] = $currentPriceType;
        return $this;
    }

    /**
     * Gets comparisonPrice
     *
     * @return \Walmart\Models\MP\US\Promotions\PromotionsPrice|null
    
     */
    public function getComparisonPrice()
    {
        return $this->container['comparisonPrice'];
    }

    /**
     * Sets comparisonPrice
     *
     * @param \Walmart\Models\MP\US\Promotions\PromotionsPrice|null $comparisonPrice comparisonPrice
     *
     * @return self
    
     */
    public function setComparisonPrice($comparisonPrice)
    {
        if (is_null($comparisonPrice)) {
            throw new \InvalidArgumentException('non-nullable comparisonPrice cannot be null');
        }

        $this->container['comparisonPrice'] = $comparisonPrice;
        return $this;
    }

    /**
     * Gets comparisonPriceType
     *
     * @return string|null
    
     */
    public function getComparisonPriceType()
    {
        return $this->container['comparisonPriceType'];
    }

    /**
     * Sets comparisonPriceType
     *
     * @param string|null $comparisonPriceType comparisonPriceType
     *
     * @return self
    
     */
    public function setComparisonPriceType($comparisonPriceType)
    {
        if (is_null($comparisonPriceType)) {
            throw new \InvalidArgumentException('non-nullable comparisonPriceType cannot be null');
        }
        $allowedValues = $this->getComparisonPriceTypeAllowableValues();
        if (!in_array($comparisonPriceType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'comparisonPriceType', must be one of '%s'",
                    $comparisonPriceType,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['comparisonPriceType'] = $comparisonPriceType;
        return $this;
    }

    /**
     * Gets savingsAmount
     *
     * @return float|null
    
     */
    public function getSavingsAmount()
    {
        return $this->container['savingsAmount'];
    }

    /**
     * Sets savingsAmount
     *
     * @param float|null $savingsAmount savingsAmount
     *
     * @return self
    
     */
    public function setSavingsAmount($savingsAmount)
    {
        if (is_null($savingsAmount)) {
            throw new \InvalidArgumentException('non-nullable savingsAmount cannot be null');
        }

        $this->container['savingsAmount'] = $savingsAmount;
        return $this;
    }

    /**
     * Gets savingsPercent
     *
     * @return float|null
    
     */
    public function getSavingsPercent()
    {
        return $this->container['savingsPercent'];
    }

    /**
     * Sets savingsPercent
     *
     * @param float|null $savingsPercent savingsPercent
     *
     * @return self
    
     */
    public function setSavingsPercent($savingsPercent)
    {
        if (is_null($savingsPercent)) {
            throw new \InvalidArgumentException('non-nullable savingsPercent cannot be null');
        }

        $this->container['savingsPercent'] = $savingsPercent;
        return $this;
    }

    /**
     * Gets priceDisplayCodes
     *
     * @return \Walmart\Models\MP\US\Promotions\PriceDisplayCodes|null
    
     */
    public function getPriceDisplayCodes()
    {
        return $this->container['priceDisplayCodes'];
    }

    /**
     * Sets priceDisplayCodes
     *
     * @param \Walmart\Models\MP\US\Promotions\PriceDisplayCodes|null $priceDisplayCodes priceDisplayCodes
     *
     * @return self
    
     */
    public function setPriceDisplayCodes($priceDisplayCodes)
    {
        if (is_null($priceDisplayCodes)) {
            throw new \InvalidArgumentException('non-nullable priceDisplayCodes cannot be null');
        }

        $this->container['priceDisplayCodes'] = $priceDisplayCodes;
        return $this;
    }

    /**
     * Gets pickupDiscount
     *
     * @return \Walmart\Models\MP\US\Promotions\PickupDiscount|null
    
     */
    public function getPickupDiscount()
    {
        return $this->container['pickupDiscount'];
    }

    /**
     * Sets pickupDiscount
     *
     * @param \Walmart\Models\MP\US\Promotions\PickupDiscount|null $pickupDiscount pickupDiscount
     *
     * @return self
    
     */
    public function setPickupDiscount($pickupDiscount)
    {
        if (is_null($pickupDiscount)) {
            throw new \InvalidArgumentException('non-nullable pickupDiscount cannot be null');
        }

        $this->container['pickupDiscount'] = $pickupDiscount;
        return $this;
    }

    /**
     * Gets effectiveDate
     *
     * @return int|null
    
     */
    public function getEffectiveDate()
    {
        return $this->container['effectiveDate'];
    }

    /**
     * Sets effectiveDate
     *
     * @param int|null $effectiveDate effectiveDate
     *
     * @return self
    
     */
    public function setEffectiveDate($effectiveDate)
    {
        if (is_null($effectiveDate)) {
            throw new \InvalidArgumentException('non-nullable effectiveDate cannot be null');
        }

        $this->container['effectiveDate'] = $effectiveDate;
        return $this;
    }

    /**
     * Gets expirationDate
     *
     * @return int|null
    
     */
    public function getExpirationDate()
    {
        return $this->container['expirationDate'];
    }

    /**
     * Sets expirationDate
     *
     * @param int|null $expirationDate expirationDate
     *
     * @return self
    
     */
    public function setExpirationDate($expirationDate)
    {
        if (is_null($expirationDate)) {
            throw new \InvalidArgumentException('non-nullable expirationDate cannot be null');
        }

        $this->container['expirationDate'] = $expirationDate;
        return $this;
    }

    /**
     * Gets processMode
     *
     * @return string|null
    
     */
    public function getProcessMode()
    {
        return $this->container['processMode'];
    }

    /**
     * Sets processMode
     *
     * @param string|null $processMode processMode
     *
     * @return self
    
     */
    public function setProcessMode($processMode)
    {
        if (is_null($processMode)) {
            throw new \InvalidArgumentException('non-nullable processMode cannot be null');
        }
        $allowedValues = $this->getProcessModeAllowableValues();
        if (!in_array($processMode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'processMode', must be one of '%s'",
                    $processMode,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['processMode'] = $processMode;
        return $this;
    }

    /**
     * Gets pid
     *
     * @return string|null
    
     */
    public function getPid()
    {
        return $this->container['pid'];
    }

    /**
     * Sets pid
     *
     * @param string|null $pid pid
     *
     * @return self
    
     */
    public function setPid($pid)
    {
        if (is_null($pid)) {
            throw new \InvalidArgumentException('non-nullable pid cannot be null');
        }

        $this->container['pid'] = $pid;
        return $this;
    }
}
