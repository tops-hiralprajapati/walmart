<?php

/**
 * PartnerProgramAccSummary
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Pregenerated Reports retiring on June 30, 2022 :
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\Reports;

use Walmart\Models\BaseModel;

/**
 * PartnerProgramAccSummary Class Doc Comment
 *
 * @category Class

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class PartnerProgramAccSummary extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PartnerProgramAccSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'openingBalance' => 'float',
        'orderActivity' => 'float',
        'walmartFulfillmentServices' => 'float',
        'otherActivities' => 'float',
        'reserve' => 'float',
        'paidToYou' => 'float',
        'closingBalance' => 'float',
        'scheduledSettlementDate' => 'string',
        'paymentProcessor' => 'string',
        'settleCycle' => 'string',
        'reserveToDate' => 'float',
        'lastUpdatedDate' => 'string',
        'holdAmt' => 'float',
        'holdDates' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'openingBalance' => null,
        'orderActivity' => null,
        'walmartFulfillmentServices' => null,
        'otherActivities' => null,
        'reserve' => null,
        'paidToYou' => null,
        'closingBalance' => null,
        'scheduledSettlementDate' => null,
        'paymentProcessor' => null,
        'settleCycle' => null,
        'reserveToDate' => null,
        'lastUpdatedDate' => null,
        'holdAmt' => null,
        'holdDates' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'openingBalance' => false,
        'orderActivity' => false,
        'walmartFulfillmentServices' => false,
        'otherActivities' => false,
        'reserve' => false,
        'paidToYou' => false,
        'closingBalance' => false,
        'scheduledSettlementDate' => false,
        'paymentProcessor' => false,
        'settleCycle' => false,
        'reserveToDate' => false,
        'lastUpdatedDate' => false,
        'holdAmt' => false,
        'holdDates' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'openingBalance' => 'openingBalance',
        'orderActivity' => 'orderActivity',
        'walmartFulfillmentServices' => 'walmartFulfillmentServices',
        'otherActivities' => 'otherActivities',
        'reserve' => 'reserve',
        'paidToYou' => 'paidToYou',
        'closingBalance' => 'closingBalance',
        'scheduledSettlementDate' => 'scheduledSettlementDate',
        'paymentProcessor' => 'paymentProcessor',
        'settleCycle' => 'settleCycle',
        'reserveToDate' => 'reserveToDate',
        'lastUpdatedDate' => 'lastUpdatedDate',
        'holdAmt' => 'holdAmt',
        'holdDates' => 'holdDates'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'openingBalance' => 'setOpeningBalance',
        'orderActivity' => 'setOrderActivity',
        'walmartFulfillmentServices' => 'setWalmartFulfillmentServices',
        'otherActivities' => 'setOtherActivities',
        'reserve' => 'setReserve',
        'paidToYou' => 'setPaidToYou',
        'closingBalance' => 'setClosingBalance',
        'scheduledSettlementDate' => 'setScheduledSettlementDate',
        'paymentProcessor' => 'setPaymentProcessor',
        'settleCycle' => 'setSettleCycle',
        'reserveToDate' => 'setReserveToDate',
        'lastUpdatedDate' => 'setLastUpdatedDate',
        'holdAmt' => 'setHoldAmt',
        'holdDates' => 'setHoldDates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'openingBalance' => 'getOpeningBalance',
        'orderActivity' => 'getOrderActivity',
        'walmartFulfillmentServices' => 'getWalmartFulfillmentServices',
        'otherActivities' => 'getOtherActivities',
        'reserve' => 'getReserve',
        'paidToYou' => 'getPaidToYou',
        'closingBalance' => 'getClosingBalance',
        'scheduledSettlementDate' => 'getScheduledSettlementDate',
        'paymentProcessor' => 'getPaymentProcessor',
        'settleCycle' => 'getSettleCycle',
        'reserveToDate' => 'getReserveToDate',
        'lastUpdatedDate' => 'getLastUpdatedDate',
        'holdAmt' => 'getHoldAmt',
        'holdDates' => 'getHoldDates'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('openingBalance', $data ?? [], null);
        $this->setIfExists('orderActivity', $data ?? [], null);
        $this->setIfExists('walmartFulfillmentServices', $data ?? [], null);
        $this->setIfExists('otherActivities', $data ?? [], null);
        $this->setIfExists('reserve', $data ?? [], null);
        $this->setIfExists('paidToYou', $data ?? [], null);
        $this->setIfExists('closingBalance', $data ?? [], null);
        $this->setIfExists('scheduledSettlementDate', $data ?? [], null);
        $this->setIfExists('paymentProcessor', $data ?? [], null);
        $this->setIfExists('settleCycle', $data ?? [], null);
        $this->setIfExists('reserveToDate', $data ?? [], null);
        $this->setIfExists('lastUpdatedDate', $data ?? [], null);
        $this->setIfExists('holdAmt', $data ?? [], null);
        $this->setIfExists('holdDates', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];


        return $invalidProperties;
    }

    /**
     * Gets openingBalance
     *
     * @return float|null
    
     */
    public function getOpeningBalance()
    {
        return $this->container['openingBalance'];
    }

    /**
     * Sets openingBalance
     *
     * @param float|null $openingBalance openingBalance
     *
     * @return self
    
     */
    public function setOpeningBalance($openingBalance)
    {
        if (is_null($openingBalance)) {
            throw new \InvalidArgumentException('non-nullable openingBalance cannot be null');
        }

        $this->container['openingBalance'] = $openingBalance;
        return $this;
    }

    /**
     * Gets orderActivity
     *
     * @return float|null
    
     */
    public function getOrderActivity()
    {
        return $this->container['orderActivity'];
    }

    /**
     * Sets orderActivity
     *
     * @param float|null $orderActivity orderActivity
     *
     * @return self
    
     */
    public function setOrderActivity($orderActivity)
    {
        if (is_null($orderActivity)) {
            throw new \InvalidArgumentException('non-nullable orderActivity cannot be null');
        }

        $this->container['orderActivity'] = $orderActivity;
        return $this;
    }

    /**
     * Gets walmartFulfillmentServices
     *
     * @return float|null
    
     */
    public function getWalmartFulfillmentServices()
    {
        return $this->container['walmartFulfillmentServices'];
    }

    /**
     * Sets walmartFulfillmentServices
     *
     * @param float|null $walmartFulfillmentServices walmartFulfillmentServices
     *
     * @return self
    
     */
    public function setWalmartFulfillmentServices($walmartFulfillmentServices)
    {
        if (is_null($walmartFulfillmentServices)) {
            throw new \InvalidArgumentException('non-nullable walmartFulfillmentServices cannot be null');
        }

        $this->container['walmartFulfillmentServices'] = $walmartFulfillmentServices;
        return $this;
    }

    /**
     * Gets otherActivities
     *
     * @return float|null
    
     */
    public function getOtherActivities()
    {
        return $this->container['otherActivities'];
    }

    /**
     * Sets otherActivities
     *
     * @param float|null $otherActivities otherActivities
     *
     * @return self
    
     */
    public function setOtherActivities($otherActivities)
    {
        if (is_null($otherActivities)) {
            throw new \InvalidArgumentException('non-nullable otherActivities cannot be null');
        }

        $this->container['otherActivities'] = $otherActivities;
        return $this;
    }

    /**
     * Gets reserve
     *
     * @return float|null
    
     */
    public function getReserve()
    {
        return $this->container['reserve'];
    }

    /**
     * Sets reserve
     *
     * @param float|null $reserve reserve
     *
     * @return self
    
     */
    public function setReserve($reserve)
    {
        if (is_null($reserve)) {
            throw new \InvalidArgumentException('non-nullable reserve cannot be null');
        }

        $this->container['reserve'] = $reserve;
        return $this;
    }

    /**
     * Gets paidToYou
     *
     * @return float|null
    
     */
    public function getPaidToYou()
    {
        return $this->container['paidToYou'];
    }

    /**
     * Sets paidToYou
     *
     * @param float|null $paidToYou paidToYou
     *
     * @return self
    
     */
    public function setPaidToYou($paidToYou)
    {
        if (is_null($paidToYou)) {
            throw new \InvalidArgumentException('non-nullable paidToYou cannot be null');
        }

        $this->container['paidToYou'] = $paidToYou;
        return $this;
    }

    /**
     * Gets closingBalance
     *
     * @return float|null
    
     */
    public function getClosingBalance()
    {
        return $this->container['closingBalance'];
    }

    /**
     * Sets closingBalance
     *
     * @param float|null $closingBalance closingBalance
     *
     * @return self
    
     */
    public function setClosingBalance($closingBalance)
    {
        if (is_null($closingBalance)) {
            throw new \InvalidArgumentException('non-nullable closingBalance cannot be null');
        }

        $this->container['closingBalance'] = $closingBalance;
        return $this;
    }

    /**
     * Gets scheduledSettlementDate
     *
     * @return string|null
    
     */
    public function getScheduledSettlementDate()
    {
        return $this->container['scheduledSettlementDate'];
    }

    /**
     * Sets scheduledSettlementDate
     *
     * @param string|null $scheduledSettlementDate scheduledSettlementDate
     *
     * @return self
    
     */
    public function setScheduledSettlementDate($scheduledSettlementDate)
    {
        if (is_null($scheduledSettlementDate)) {
            throw new \InvalidArgumentException('non-nullable scheduledSettlementDate cannot be null');
        }

        $this->container['scheduledSettlementDate'] = $scheduledSettlementDate;
        return $this;
    }

    /**
     * Gets paymentProcessor
     *
     * @return string|null
    
     */
    public function getPaymentProcessor()
    {
        return $this->container['paymentProcessor'];
    }

    /**
     * Sets paymentProcessor
     *
     * @param string|null $paymentProcessor paymentProcessor
     *
     * @return self
    
     */
    public function setPaymentProcessor($paymentProcessor)
    {
        if (is_null($paymentProcessor)) {
            throw new \InvalidArgumentException('non-nullable paymentProcessor cannot be null');
        }

        $this->container['paymentProcessor'] = $paymentProcessor;
        return $this;
    }

    /**
     * Gets settleCycle
     *
     * @return string|null
    
     */
    public function getSettleCycle()
    {
        return $this->container['settleCycle'];
    }

    /**
     * Sets settleCycle
     *
     * @param string|null $settleCycle settleCycle
     *
     * @return self
    
     */
    public function setSettleCycle($settleCycle)
    {
        if (is_null($settleCycle)) {
            throw new \InvalidArgumentException('non-nullable settleCycle cannot be null');
        }

        $this->container['settleCycle'] = $settleCycle;
        return $this;
    }

    /**
     * Gets reserveToDate
     *
     * @return float|null
    
     */
    public function getReserveToDate()
    {
        return $this->container['reserveToDate'];
    }

    /**
     * Sets reserveToDate
     *
     * @param float|null $reserveToDate reserveToDate
     *
     * @return self
    
     */
    public function setReserveToDate($reserveToDate)
    {
        if (is_null($reserveToDate)) {
            throw new \InvalidArgumentException('non-nullable reserveToDate cannot be null');
        }

        $this->container['reserveToDate'] = $reserveToDate;
        return $this;
    }

    /**
     * Gets lastUpdatedDate
     *
     * @return string|null
    
     */
    public function getLastUpdatedDate()
    {
        return $this->container['lastUpdatedDate'];
    }

    /**
     * Sets lastUpdatedDate
     *
     * @param string|null $lastUpdatedDate lastUpdatedDate
     *
     * @return self
    
     */
    public function setLastUpdatedDate($lastUpdatedDate)
    {
        if (is_null($lastUpdatedDate)) {
            throw new \InvalidArgumentException('non-nullable lastUpdatedDate cannot be null');
        }

        $this->container['lastUpdatedDate'] = $lastUpdatedDate;
        return $this;
    }

    /**
     * Gets holdAmt
     *
     * @return float|null
    
     */
    public function getHoldAmt()
    {
        return $this->container['holdAmt'];
    }

    /**
     * Sets holdAmt
     *
     * @param float|null $holdAmt holdAmt
     *
     * @return self
    
     */
    public function setHoldAmt($holdAmt)
    {
        if (is_null($holdAmt)) {
            throw new \InvalidArgumentException('non-nullable holdAmt cannot be null');
        }

        $this->container['holdAmt'] = $holdAmt;
        return $this;
    }

    /**
     * Gets holdDates
     *
     * @return string|null
    
     */
    public function getHoldDates()
    {
        return $this->container['holdDates'];
    }

    /**
     * Sets holdDates
     *
     * @param string|null $holdDates holdDates
     *
     * @return self
    
     */
    public function setHoldDates($holdDates)
    {
        if (is_null($holdDates)) {
            throw new \InvalidArgumentException('non-nullable holdDates cannot be null');
        }

        $this->container['holdDates'] = $holdDates;
        return $this;
    }
}
