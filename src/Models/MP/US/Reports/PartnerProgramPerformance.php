<?php

/**
 * PartnerProgramPerformance
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Pregenerated Reports retiring on June 30, 2022 :
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\Reports;

use Walmart\Models\BaseModel;

/**
 * PartnerProgramPerformance Class Doc Comment
 *
 * @category Class

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class PartnerProgramPerformance extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PartnerProgramPerformance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'refundRateSellerFault' => 'float',
        'refundRateCustomerFault' => 'float',
        'ots' => 'float',
        'otd' => 'float',
        'vtr' => 'float',
        'cancellationSellerFault' => 'float',
        'cancellationCustomerFault' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'refundRateSellerFault' => null,
        'refundRateCustomerFault' => null,
        'ots' => null,
        'otd' => null,
        'vtr' => null,
        'cancellationSellerFault' => null,
        'cancellationCustomerFault' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'refundRateSellerFault' => false,
        'refundRateCustomerFault' => false,
        'ots' => false,
        'otd' => false,
        'vtr' => false,
        'cancellationSellerFault' => false,
        'cancellationCustomerFault' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'refundRateSellerFault' => 'refundRateSellerFault',
        'refundRateCustomerFault' => 'refundRateCustomerFault',
        'ots' => 'ots',
        'otd' => 'otd',
        'vtr' => 'vtr',
        'cancellationSellerFault' => 'cancellationSellerFault',
        'cancellationCustomerFault' => 'cancellationCustomerFault'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'refundRateSellerFault' => 'setRefundRateSellerFault',
        'refundRateCustomerFault' => 'setRefundRateCustomerFault',
        'ots' => 'setOts',
        'otd' => 'setOtd',
        'vtr' => 'setVtr',
        'cancellationSellerFault' => 'setCancellationSellerFault',
        'cancellationCustomerFault' => 'setCancellationCustomerFault'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'refundRateSellerFault' => 'getRefundRateSellerFault',
        'refundRateCustomerFault' => 'getRefundRateCustomerFault',
        'ots' => 'getOts',
        'otd' => 'getOtd',
        'vtr' => 'getVtr',
        'cancellationSellerFault' => 'getCancellationSellerFault',
        'cancellationCustomerFault' => 'getCancellationCustomerFault'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('refundRateSellerFault', $data ?? [], null);
        $this->setIfExists('refundRateCustomerFault', $data ?? [], null);
        $this->setIfExists('ots', $data ?? [], null);
        $this->setIfExists('otd', $data ?? [], null);
        $this->setIfExists('vtr', $data ?? [], null);
        $this->setIfExists('cancellationSellerFault', $data ?? [], null);
        $this->setIfExists('cancellationCustomerFault', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];


        return $invalidProperties;
    }

    /**
     * Gets refundRateSellerFault
     *
     * @return float|null
    
     */
    public function getRefundRateSellerFault()
    {
        return $this->container['refundRateSellerFault'];
    }

    /**
     * Sets refundRateSellerFault
     *
     * @param float|null $refundRateSellerFault refundRateSellerFault
     *
     * @return self
    
     */
    public function setRefundRateSellerFault($refundRateSellerFault)
    {
        if (is_null($refundRateSellerFault)) {
            throw new \InvalidArgumentException('non-nullable refundRateSellerFault cannot be null');
        }

        $this->container['refundRateSellerFault'] = $refundRateSellerFault;
        return $this;
    }

    /**
     * Gets refundRateCustomerFault
     *
     * @return float|null
    
     */
    public function getRefundRateCustomerFault()
    {
        return $this->container['refundRateCustomerFault'];
    }

    /**
     * Sets refundRateCustomerFault
     *
     * @param float|null $refundRateCustomerFault refundRateCustomerFault
     *
     * @return self
    
     */
    public function setRefundRateCustomerFault($refundRateCustomerFault)
    {
        if (is_null($refundRateCustomerFault)) {
            throw new \InvalidArgumentException('non-nullable refundRateCustomerFault cannot be null');
        }

        $this->container['refundRateCustomerFault'] = $refundRateCustomerFault;
        return $this;
    }

    /**
     * Gets ots
     *
     * @return float|null
    
     */
    public function getOts()
    {
        return $this->container['ots'];
    }

    /**
     * Sets ots
     *
     * @param float|null $ots ots
     *
     * @return self
    
     */
    public function setOts($ots)
    {
        if (is_null($ots)) {
            throw new \InvalidArgumentException('non-nullable ots cannot be null');
        }

        $this->container['ots'] = $ots;
        return $this;
    }

    /**
     * Gets otd
     *
     * @return float|null
    
     */
    public function getOtd()
    {
        return $this->container['otd'];
    }

    /**
     * Sets otd
     *
     * @param float|null $otd otd
     *
     * @return self
    
     */
    public function setOtd($otd)
    {
        if (is_null($otd)) {
            throw new \InvalidArgumentException('non-nullable otd cannot be null');
        }

        $this->container['otd'] = $otd;
        return $this;
    }

    /**
     * Gets vtr
     *
     * @return float|null
    
     */
    public function getVtr()
    {
        return $this->container['vtr'];
    }

    /**
     * Sets vtr
     *
     * @param float|null $vtr vtr
     *
     * @return self
    
     */
    public function setVtr($vtr)
    {
        if (is_null($vtr)) {
            throw new \InvalidArgumentException('non-nullable vtr cannot be null');
        }

        $this->container['vtr'] = $vtr;
        return $this;
    }

    /**
     * Gets cancellationSellerFault
     *
     * @return float|null
    
     */
    public function getCancellationSellerFault()
    {
        return $this->container['cancellationSellerFault'];
    }

    /**
     * Sets cancellationSellerFault
     *
     * @param float|null $cancellationSellerFault cancellationSellerFault
     *
     * @return self
    
     */
    public function setCancellationSellerFault($cancellationSellerFault)
    {
        if (is_null($cancellationSellerFault)) {
            throw new \InvalidArgumentException('non-nullable cancellationSellerFault cannot be null');
        }

        $this->container['cancellationSellerFault'] = $cancellationSellerFault;
        return $this;
    }

    /**
     * Gets cancellationCustomerFault
     *
     * @return float|null
    
     */
    public function getCancellationCustomerFault()
    {
        return $this->container['cancellationCustomerFault'];
    }

    /**
     * Sets cancellationCustomerFault
     *
     * @param float|null $cancellationCustomerFault cancellationCustomerFault
     *
     * @return self
    
     */
    public function setCancellationCustomerFault($cancellationCustomerFault)
    {
        if (is_null($cancellationCustomerFault)) {
            throw new \InvalidArgumentException('non-nullable cancellationCustomerFault cannot be null');
        }

        $this->container['cancellationCustomerFault'] = $cancellationCustomerFault;
        return $this;
    }
}
