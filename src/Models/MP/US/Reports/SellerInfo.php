<?php

/**
 * SellerInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Pregenerated Reports retiring on June 30, 2022 :
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\Reports;

use Walmart\Models\BaseModel;

/**
 * SellerInfo Class Doc Comment
 *
 * @category Class

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class SellerInfo extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'SellerInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'storeFrontUrl' => 'string',
        'sellerStatus' => 'string',
        'paymentStatus' => 'string',
        'tenure' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'storeFrontUrl' => null,
        'sellerStatus' => null,
        'paymentStatus' => null,
        'tenure' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'storeFrontUrl' => false,
        'sellerStatus' => false,
        'paymentStatus' => false,
        'tenure' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'storeFrontUrl' => 'storeFrontUrl',
        'sellerStatus' => 'sellerStatus',
        'paymentStatus' => 'paymentStatus',
        'tenure' => 'tenure'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'storeFrontUrl' => 'setStoreFrontUrl',
        'sellerStatus' => 'setSellerStatus',
        'paymentStatus' => 'setPaymentStatus',
        'tenure' => 'setTenure'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'storeFrontUrl' => 'getStoreFrontUrl',
        'sellerStatus' => 'getSellerStatus',
        'paymentStatus' => 'getPaymentStatus',
        'tenure' => 'getTenure'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('storeFrontUrl', $data ?? [], null);
        $this->setIfExists('sellerStatus', $data ?? [], null);
        $this->setIfExists('paymentStatus', $data ?? [], null);
        $this->setIfExists('tenure', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];


        return $invalidProperties;
    }

    /**
     * Gets storeFrontUrl
     *
     * @return string|null
    
     */
    public function getStoreFrontUrl()
    {
        return $this->container['storeFrontUrl'];
    }

    /**
     * Sets storeFrontUrl
     *
     * @param string|null $storeFrontUrl storeFrontUrl
     *
     * @return self
    
     */
    public function setStoreFrontUrl($storeFrontUrl)
    {
        if (is_null($storeFrontUrl)) {
            throw new \InvalidArgumentException('non-nullable storeFrontUrl cannot be null');
        }

        $this->container['storeFrontUrl'] = $storeFrontUrl;
        return $this;
    }

    /**
     * Gets sellerStatus
     *
     * @return string|null
    
     */
    public function getSellerStatus()
    {
        return $this->container['sellerStatus'];
    }

    /**
     * Sets sellerStatus
     *
     * @param string|null $sellerStatus sellerStatus
     *
     * @return self
    
     */
    public function setSellerStatus($sellerStatus)
    {
        if (is_null($sellerStatus)) {
            throw new \InvalidArgumentException('non-nullable sellerStatus cannot be null');
        }

        $this->container['sellerStatus'] = $sellerStatus;
        return $this;
    }

    /**
     * Gets paymentStatus
     *
     * @return string|null
    
     */
    public function getPaymentStatus()
    {
        return $this->container['paymentStatus'];
    }

    /**
     * Sets paymentStatus
     *
     * @param string|null $paymentStatus paymentStatus
     *
     * @return self
    
     */
    public function setPaymentStatus($paymentStatus)
    {
        if (is_null($paymentStatus)) {
            throw new \InvalidArgumentException('non-nullable paymentStatus cannot be null');
        }

        $this->container['paymentStatus'] = $paymentStatus;
        return $this;
    }

    /**
     * Gets tenure
     *
     * @return int|null
    
     */
    public function getTenure()
    {
        return $this->container['tenure'];
    }

    /**
     * Sets tenure
     *
     * @param int|null $tenure tenure
     *
     * @return self
    
     */
    public function setTenure($tenure)
    {
        if (is_null($tenure)) {
            throw new \InvalidArgumentException('non-nullable tenure cannot be null');
        }

        $this->container['tenure'] = $tenure;
        return $this;
    }
}
