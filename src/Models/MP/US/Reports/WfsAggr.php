<?php

/**
 * WfsAggr
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Pregenerated Reports retiring on June 30, 2022 :
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\Reports;

use Walmart\Models\BaseModel;

/**
 * WfsAggr Class Doc Comment
 *
 * @category Class

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class WfsAggr extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'WfsAggr';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'netPayable' => 'float',
        'wfsFullfillmentFee' => 'float',
        'wfsStorageFee' => 'float',
        'wfsAdjustment' => 'float',
        'wfsFee' => 'float',
        'inventoryRemovalOrder' => 'float',
        'inventoryDisposalOrder' => 'float',
        'wfsPrepServiceFee' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'netPayable' => null,
        'wfsFullfillmentFee' => null,
        'wfsStorageFee' => null,
        'wfsAdjustment' => null,
        'wfsFee' => null,
        'inventoryRemovalOrder' => null,
        'inventoryDisposalOrder' => null,
        'wfsPrepServiceFee' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'netPayable' => false,
        'wfsFullfillmentFee' => false,
        'wfsStorageFee' => false,
        'wfsAdjustment' => false,
        'wfsFee' => false,
        'inventoryRemovalOrder' => false,
        'inventoryDisposalOrder' => false,
        'wfsPrepServiceFee' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'netPayable' => 'netPayable',
        'wfsFullfillmentFee' => 'wfsFullfillmentFee',
        'wfsStorageFee' => 'wfsStorageFee',
        'wfsAdjustment' => 'wfsAdjustment',
        'wfsFee' => 'wfsFee',
        'inventoryRemovalOrder' => 'inventoryRemovalOrder',
        'inventoryDisposalOrder' => 'inventoryDisposalOrder',
        'wfsPrepServiceFee' => 'wfsPrepServiceFee'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'netPayable' => 'setNetPayable',
        'wfsFullfillmentFee' => 'setWfsFullfillmentFee',
        'wfsStorageFee' => 'setWfsStorageFee',
        'wfsAdjustment' => 'setWfsAdjustment',
        'wfsFee' => 'setWfsFee',
        'inventoryRemovalOrder' => 'setInventoryRemovalOrder',
        'inventoryDisposalOrder' => 'setInventoryDisposalOrder',
        'wfsPrepServiceFee' => 'setWfsPrepServiceFee'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'netPayable' => 'getNetPayable',
        'wfsFullfillmentFee' => 'getWfsFullfillmentFee',
        'wfsStorageFee' => 'getWfsStorageFee',
        'wfsAdjustment' => 'getWfsAdjustment',
        'wfsFee' => 'getWfsFee',
        'inventoryRemovalOrder' => 'getInventoryRemovalOrder',
        'inventoryDisposalOrder' => 'getInventoryDisposalOrder',
        'wfsPrepServiceFee' => 'getWfsPrepServiceFee'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('netPayable', $data ?? [], null);
        $this->setIfExists('wfsFullfillmentFee', $data ?? [], null);
        $this->setIfExists('wfsStorageFee', $data ?? [], null);
        $this->setIfExists('wfsAdjustment', $data ?? [], null);
        $this->setIfExists('wfsFee', $data ?? [], null);
        $this->setIfExists('inventoryRemovalOrder', $data ?? [], null);
        $this->setIfExists('inventoryDisposalOrder', $data ?? [], null);
        $this->setIfExists('wfsPrepServiceFee', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];


        return $invalidProperties;
    }

    /**
     * Gets netPayable
     *
     * @return float|null
    
     */
    public function getNetPayable()
    {
        return $this->container['netPayable'];
    }

    /**
     * Sets netPayable
     *
     * @param float|null $netPayable netPayable
     *
     * @return self
    
     */
    public function setNetPayable($netPayable)
    {
        if (is_null($netPayable)) {
            throw new \InvalidArgumentException('non-nullable netPayable cannot be null');
        }

        $this->container['netPayable'] = $netPayable;
        return $this;
    }

    /**
     * Gets wfsFullfillmentFee
     *
     * @return float|null
    
     */
    public function getWfsFullfillmentFee()
    {
        return $this->container['wfsFullfillmentFee'];
    }

    /**
     * Sets wfsFullfillmentFee
     *
     * @param float|null $wfsFullfillmentFee wfsFullfillmentFee
     *
     * @return self
    
     */
    public function setWfsFullfillmentFee($wfsFullfillmentFee)
    {
        if (is_null($wfsFullfillmentFee)) {
            throw new \InvalidArgumentException('non-nullable wfsFullfillmentFee cannot be null');
        }

        $this->container['wfsFullfillmentFee'] = $wfsFullfillmentFee;
        return $this;
    }

    /**
     * Gets wfsStorageFee
     *
     * @return float|null
    
     */
    public function getWfsStorageFee()
    {
        return $this->container['wfsStorageFee'];
    }

    /**
     * Sets wfsStorageFee
     *
     * @param float|null $wfsStorageFee wfsStorageFee
     *
     * @return self
    
     */
    public function setWfsStorageFee($wfsStorageFee)
    {
        if (is_null($wfsStorageFee)) {
            throw new \InvalidArgumentException('non-nullable wfsStorageFee cannot be null');
        }

        $this->container['wfsStorageFee'] = $wfsStorageFee;
        return $this;
    }

    /**
     * Gets wfsAdjustment
     *
     * @return float|null
    
     */
    public function getWfsAdjustment()
    {
        return $this->container['wfsAdjustment'];
    }

    /**
     * Sets wfsAdjustment
     *
     * @param float|null $wfsAdjustment wfsAdjustment
     *
     * @return self
    
     */
    public function setWfsAdjustment($wfsAdjustment)
    {
        if (is_null($wfsAdjustment)) {
            throw new \InvalidArgumentException('non-nullable wfsAdjustment cannot be null');
        }

        $this->container['wfsAdjustment'] = $wfsAdjustment;
        return $this;
    }

    /**
     * Gets wfsFee
     *
     * @return float|null
    
     */
    public function getWfsFee()
    {
        return $this->container['wfsFee'];
    }

    /**
     * Sets wfsFee
     *
     * @param float|null $wfsFee wfsFee
     *
     * @return self
    
     */
    public function setWfsFee($wfsFee)
    {
        if (is_null($wfsFee)) {
            throw new \InvalidArgumentException('non-nullable wfsFee cannot be null');
        }

        $this->container['wfsFee'] = $wfsFee;
        return $this;
    }

    /**
     * Gets inventoryRemovalOrder
     *
     * @return float|null
    
     */
    public function getInventoryRemovalOrder()
    {
        return $this->container['inventoryRemovalOrder'];
    }

    /**
     * Sets inventoryRemovalOrder
     *
     * @param float|null $inventoryRemovalOrder inventoryRemovalOrder
     *
     * @return self
    
     */
    public function setInventoryRemovalOrder($inventoryRemovalOrder)
    {
        if (is_null($inventoryRemovalOrder)) {
            throw new \InvalidArgumentException('non-nullable inventoryRemovalOrder cannot be null');
        }

        $this->container['inventoryRemovalOrder'] = $inventoryRemovalOrder;
        return $this;
    }

    /**
     * Gets inventoryDisposalOrder
     *
     * @return float|null
    
     */
    public function getInventoryDisposalOrder()
    {
        return $this->container['inventoryDisposalOrder'];
    }

    /**
     * Sets inventoryDisposalOrder
     *
     * @param float|null $inventoryDisposalOrder inventoryDisposalOrder
     *
     * @return self
    
     */
    public function setInventoryDisposalOrder($inventoryDisposalOrder)
    {
        if (is_null($inventoryDisposalOrder)) {
            throw new \InvalidArgumentException('non-nullable inventoryDisposalOrder cannot be null');
        }

        $this->container['inventoryDisposalOrder'] = $inventoryDisposalOrder;
        return $this;
    }

    /**
     * Gets wfsPrepServiceFee
     *
     * @return float|null
    
     */
    public function getWfsPrepServiceFee()
    {
        return $this->container['wfsPrepServiceFee'];
    }

    /**
     * Sets wfsPrepServiceFee
     *
     * @param float|null $wfsPrepServiceFee wfsPrepServiceFee
     *
     * @return self
    
     */
    public function setWfsPrepServiceFee($wfsPrepServiceFee)
    {
        if (is_null($wfsPrepServiceFee)) {
            throw new \InvalidArgumentException('non-nullable wfsPrepServiceFee cannot be null');
        }

        $this->container['wfsPrepServiceFee'] = $wfsPrepServiceFee;
        return $this;
    }
}
