<?php

/**
 * CurrentTrackingStatus
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Returns Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\Returns;

use Walmart\Models\BaseModel;

/**
 * CurrentTrackingStatus Class Doc Comment
 *
 * @category Class

 * @description Array of current tracking status of each quantity

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class CurrentTrackingStatus extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'CurrentTrackingStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'status' => 'string',
        'statusTime' => '\DateTime',
        'currentRefundStatus' => 'string',
        'quantity' => '\Walmart\Models\MP\US\Returns\Quantity'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'status' => null,
        'statusTime' => 'date-time',
        'currentRefundStatus' => null,
        'quantity' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'status' => false,
        'statusTime' => false,
        'currentRefundStatus' => false,
        'quantity' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'status' => 'status',
        'statusTime' => 'statusTime',
        'currentRefundStatus' => 'currentRefundStatus',
        'quantity' => 'quantity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'status' => 'setStatus',
        'statusTime' => 'setStatusTime',
        'currentRefundStatus' => 'setCurrentRefundStatus',
        'quantity' => 'setQuantity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'status' => 'getStatus',
        'statusTime' => 'getStatusTime',
        'currentRefundStatus' => 'getCurrentRefundStatus',
        'quantity' => 'getQuantity'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('statusTime', $data ?? [], null);
        $this->setIfExists('currentRefundStatus', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];


        return $invalidProperties;
    }

    /**
     * Gets status
     *
     * @return string|null
    
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Current status of return. (e.g., 'INITIATED')
     *
     * @return self
    
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }

        $this->container['status'] = $status;
        return $this;
    }

    /**
     * Gets statusTime
     *
     * @return \DateTime|null
    
     */
    public function getStatusTime()
    {
        return $this->container['statusTime'];
    }

    /**
     * Sets statusTime
     *
     * @param \DateTime|null $statusTime Timestamp of listed status change
     *
     * @return self
    
     */
    public function setStatusTime($statusTime)
    {
        if (is_null($statusTime)) {
            throw new \InvalidArgumentException('non-nullable statusTime cannot be null');
        }

        $this->container['statusTime'] = $statusTime;
        return $this;
    }

    /**
     * Gets currentRefundStatus
     *
     * @return string|null
    
     */
    public function getCurrentRefundStatus()
    {
        return $this->container['currentRefundStatus'];
    }

    /**
     * Sets currentRefundStatus
     *
     * @param string|null $currentRefundStatus Determines the current refund status of the return.
     *
     * @return self
    
     */
    public function setCurrentRefundStatus($currentRefundStatus)
    {
        if (is_null($currentRefundStatus)) {
            throw new \InvalidArgumentException('non-nullable currentRefundStatus cannot be null');
        }

        $this->container['currentRefundStatus'] = $currentRefundStatus;
        return $this;
    }

    /**
     * Gets quantity
     *
     * @return \Walmart\Models\MP\US\Returns\Quantity|null
    
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param \Walmart\Models\MP\US\Returns\Quantity|null $quantity quantity
     *
     * @return self
    
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }

        $this->container['quantity'] = $quantity;
        return $this;
    }
}
