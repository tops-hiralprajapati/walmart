<?php

/**
 * GetIrpItemsResponsePayload
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Reviews Acceleration
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\Reviews;

use Walmart\Models\BaseModel;

/**
 * GetIrpItemsResponsePayload Class Doc Comment
 *
 * @category Class

 * @description Response payload.

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class GetIrpItemsResponsePayload extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'GetIrpItemsResponsePayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'totalItems' => 'int',
        'fetchedItems' => 'int',
        'dateRange' => 'string',
        'items' => '\Walmart\Models\MP\US\Reviews\ItemsPayload[]',
        'scrollId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'totalItems' => 'int32',
        'fetchedItems' => 'int32',
        'dateRange' => null,
        'items' => null,
        'scrollId' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'totalItems' => false,
        'fetchedItems' => false,
        'dateRange' => false,
        'items' => false,
        'scrollId' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'totalItems' => 'totalItems',
        'fetchedItems' => 'fetchedItems',
        'dateRange' => 'dateRange',
        'items' => 'items',
        'scrollId' => 'scrollId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'totalItems' => 'setTotalItems',
        'fetchedItems' => 'setFetchedItems',
        'dateRange' => 'setDateRange',
        'items' => 'setItems',
        'scrollId' => 'setScrollId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'totalItems' => 'getTotalItems',
        'fetchedItems' => 'getFetchedItems',
        'dateRange' => 'getDateRange',
        'items' => 'getItems',
        'scrollId' => 'getScrollId'
    ];


    public const DATE_RANGE__7_DAYS = '7DAYS';

    public const DATE_RANGE__14_DAYS = '14DAYS';

    public const DATE_RANGE__30_DAYS = '30DAYS';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDateRangeAllowableValues()
    {
        return [
            self::DATE_RANGE__7_DAYS,
            self::DATE_RANGE__14_DAYS,
            self::DATE_RANGE__30_DAYS,
        ];
    }

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('totalItems', $data ?? [], null);
        $this->setIfExists('fetchedItems', $data ?? [], null);
        $this->setIfExists('dateRange', $data ?? [], '7DAYS');
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('scrollId', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDateRangeAllowableValues();
        if (!is_null($this->container['dateRange']) && !in_array($this->container['dateRange'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dateRange', must be one of '%s'",
                $this->container['dateRange'],
                implode("', '", $allowedValues)
            );
        }


        return $invalidProperties;
    }

    /**
     * Gets totalItems
     *
     * @return int|null
    
     */
    public function getTotalItems()
    {
        return $this->container['totalItems'];
    }

    /**
     * Sets totalItems
     *
     * @param int|null $totalItems The total of items found.
     *
     * @return self
    
     */
    public function setTotalItems($totalItems)
    {
        if (is_null($totalItems)) {
            throw new \InvalidArgumentException('non-nullable totalItems cannot be null');
        }

        $this->container['totalItems'] = $totalItems;
        return $this;
    }

    /**
     * Gets fetchedItems
     *
     * @return int|null
    
     */
    public function getFetchedItems()
    {
        return $this->container['fetchedItems'];
    }

    /**
     * Sets fetchedItems
     *
     * @param int|null $fetchedItems The total of items fetched.
     *
     * @return self
    
     */
    public function setFetchedItems($fetchedItems)
    {
        if (is_null($fetchedItems)) {
            throw new \InvalidArgumentException('non-nullable fetchedItems cannot be null');
        }

        $this->container['fetchedItems'] = $fetchedItems;
        return $this;
    }

    /**
     * Gets dateRange
     *
     * @return string|null
    
     */
    public function getDateRange()
    {
        return $this->container['dateRange'];
    }

    /**
     * Sets dateRange
     *
     * @param string|null $dateRange Date range to filter impressions, page views and sales.
     *
     * @return self
    
     */
    public function setDateRange($dateRange)
    {
        if (is_null($dateRange)) {
            throw new \InvalidArgumentException('non-nullable dateRange cannot be null');
        }
        $allowedValues = $this->getDateRangeAllowableValues();
        if (!in_array($dateRange, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dateRange', must be one of '%s'",
                    $dateRange,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['dateRange'] = $dateRange;
        return $this;
    }

    /**
     * Gets items
     *
     * @return \Walmart\Models\MP\US\Reviews\ItemsPayload[]|null
    
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Walmart\Models\MP\US\Reviews\ItemsPayload[]|null $items items
     *
     * @return self
    
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }

        $this->container['items'] = $items;
        return $this;
    }

    /**
     * Gets scrollId
     *
     * @return string|null
    
     */
    public function getScrollId()
    {
        return $this->container['scrollId'];
    }

    /**
     * Sets scrollId
     *
     * @param string|null $scrollId Specifies the searchId to fetch the subsequent set of results.
     *
     * @return self
    
     */
    public function setScrollId($scrollId)
    {
        if (is_null($scrollId)) {
            throw new \InvalidArgumentException('non-nullable scrollId cannot be null');
        }

        $this->container['scrollId'] = $scrollId;
        return $this;
    }
}
