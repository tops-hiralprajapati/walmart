<?php

/**
 * ItemsPayload
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Reviews Acceleration
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\Reviews;

use Walmart\Models\BaseModel;

/**
 * ItemsPayload Class Doc Comment
 *
 * @category Class

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class ItemsPayload extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ItemsPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'itemId' => 'string',
        'itemName' => 'string',
        'sales' => 'int',
        'currentReviews' => 'int',
        'impressions' => 'int',
        'currentPageViews' => 'int',
        'reviewsCollected' => 'int',
        'sku' => 'string',
        'itemStatus' => 'string',
        'itemPriority' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'itemId' => null,
        'itemName' => null,
        'sales' => 'int32',
        'currentReviews' => 'int32',
        'impressions' => 'int32',
        'currentPageViews' => 'int32',
        'reviewsCollected' => 'int32',
        'sku' => null,
        'itemStatus' => null,
        'itemPriority' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'itemId' => false,
        'itemName' => false,
        'sales' => false,
        'currentReviews' => false,
        'impressions' => false,
        'currentPageViews' => false,
        'reviewsCollected' => false,
        'sku' => false,
        'itemStatus' => false,
        'itemPriority' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'itemId' => 'itemId',
        'itemName' => 'itemName',
        'sales' => 'sales',
        'currentReviews' => 'currentReviews',
        'impressions' => 'impressions',
        'currentPageViews' => 'currentPageViews',
        'reviewsCollected' => 'reviewsCollected',
        'sku' => 'sku',
        'itemStatus' => 'itemStatus',
        'itemPriority' => 'itemPriority'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'itemId' => 'setItemId',
        'itemName' => 'setItemName',
        'sales' => 'setSales',
        'currentReviews' => 'setCurrentReviews',
        'impressions' => 'setImpressions',
        'currentPageViews' => 'setCurrentPageViews',
        'reviewsCollected' => 'setReviewsCollected',
        'sku' => 'setSku',
        'itemStatus' => 'setItemStatus',
        'itemPriority' => 'setItemPriority'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'itemId' => 'getItemId',
        'itemName' => 'getItemName',
        'sales' => 'getSales',
        'currentReviews' => 'getCurrentReviews',
        'impressions' => 'getImpressions',
        'currentPageViews' => 'getCurrentPageViews',
        'reviewsCollected' => 'getReviewsCollected',
        'sku' => 'getSku',
        'itemStatus' => 'getItemStatus',
        'itemPriority' => 'getItemPriority'
    ];


    public const ITEM_STATUS_COMPLETE = 'COMPLETE';

    public const ITEM_STATUS_ELIGIBLE = 'ELIGIBLE';

    public const ITEM_STATUS_ENROLLED = 'ENROLLED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getItemStatusAllowableValues()
    {
        return [
            self::ITEM_STATUS_COMPLETE,
            self::ITEM_STATUS_ELIGIBLE,
            self::ITEM_STATUS_ENROLLED,
        ];
    }

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('itemId', $data ?? [], null);
        $this->setIfExists('itemName', $data ?? [], null);
        $this->setIfExists('sales', $data ?? [], null);
        $this->setIfExists('currentReviews', $data ?? [], null);
        $this->setIfExists('impressions', $data ?? [], null);
        $this->setIfExists('currentPageViews', $data ?? [], null);
        $this->setIfExists('reviewsCollected', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('itemStatus', $data ?? [], null);
        $this->setIfExists('itemPriority', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getItemStatusAllowableValues();
        if (!is_null($this->container['itemStatus']) && !in_array($this->container['itemStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'itemStatus', must be one of '%s'",
                $this->container['itemStatus'],
                implode("', '", $allowedValues)
            );
        }


        return $invalidProperties;
    }

    /**
     * Gets itemId
     *
     * @return string|null
    
     */
    public function getItemId()
    {
        return $this->container['itemId'];
    }

    /**
     * Sets itemId
     *
     * @param string|null $itemId Specifies the item identifier.
     *
     * @return self
    
     */
    public function setItemId($itemId)
    {
        if (is_null($itemId)) {
            throw new \InvalidArgumentException('non-nullable itemId cannot be null');
        }

        $this->container['itemId'] = $itemId;
        return $this;
    }

    /**
     * Gets itemName
     *
     * @return string|null
    
     */
    public function getItemName()
    {
        return $this->container['itemName'];
    }

    /**
     * Sets itemName
     *
     * @param string|null $itemName Name of the item.
     *
     * @return self
    
     */
    public function setItemName($itemName)
    {
        if (is_null($itemName)) {
            throw new \InvalidArgumentException('non-nullable itemName cannot be null');
        }

        $this->container['itemName'] = $itemName;
        return $this;
    }

    /**
     * Gets sales
     *
     * @return int|null
    
     */
    public function getSales()
    {
        return $this->container['sales'];
    }

    /**
     * Sets sales
     *
     * @param int|null $sales Units sold during the specified date range. Defaults range is for last 7 days.
     *
     * @return self
    
     */
    public function setSales($sales)
    {
        if (is_null($sales)) {
            throw new \InvalidArgumentException('non-nullable sales cannot be null');
        }

        $this->container['sales'] = $sales;
        return $this;
    }

    /**
     * Gets currentReviews
     *
     * @return int|null
    
     */
    public function getCurrentReviews()
    {
        return $this->container['currentReviews'];
    }

    /**
     * Sets currentReviews
     *
     * @param int|null $currentReviews Current number of reviews on the item.
     *
     * @return self
    
     */
    public function setCurrentReviews($currentReviews)
    {
        if (is_null($currentReviews)) {
            throw new \InvalidArgumentException('non-nullable currentReviews cannot be null');
        }

        $this->container['currentReviews'] = $currentReviews;
        return $this;
    }

    /**
     * Gets impressions
     *
     * @return int|null
    
     */
    public function getImpressions()
    {
        return $this->container['impressions'];
    }

    /**
     * Sets impressions
     *
     * @param int|null $impressions The number of times item showed up in search results in the requested date range. Defaults to last 7 days.
     *
     * @return self
    
     */
    public function setImpressions($impressions)
    {
        if (is_null($impressions)) {
            throw new \InvalidArgumentException('non-nullable impressions cannot be null');
        }

        $this->container['impressions'] = $impressions;
        return $this;
    }

    /**
     * Gets currentPageViews
     *
     * @return int|null
    
     */
    public function getCurrentPageViews()
    {
        return $this->container['currentPageViews'];
    }

    /**
     * Sets currentPageViews
     *
     * @param int|null $currentPageViews The number of views on the item page in the requested date range. Defaults to last 7 days.
     *
     * @return self
    
     */
    public function setCurrentPageViews($currentPageViews)
    {
        if (is_null($currentPageViews)) {
            throw new \InvalidArgumentException('non-nullable currentPageViews cannot be null');
        }

        $this->container['currentPageViews'] = $currentPageViews;
        return $this;
    }

    /**
     * Gets reviewsCollected
     *
     * @return int|null
    
     */
    public function getReviewsCollected()
    {
        return $this->container['reviewsCollected'];
    }

    /**
     * Sets reviewsCollected
     *
     * @param int|null $reviewsCollected The number of reviews collected for the item through IRP.
     *
     * @return self
    
     */
    public function setReviewsCollected($reviewsCollected)
    {
        if (is_null($reviewsCollected)) {
            throw new \InvalidArgumentException('non-nullable reviewsCollected cannot be null');
        }

        $this->container['reviewsCollected'] = $reviewsCollected;
        return $this;
    }

    /**
     * Gets sku
     *
     * @return string|null
    
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string|null $sku Specifies the item identified. This value is defined by the seller.
     *
     * @return self
    
     */
    public function setSku($sku)
    {
        if (is_null($sku)) {
            throw new \InvalidArgumentException('non-nullable sku cannot be null');
        }

        $this->container['sku'] = $sku;
        return $this;
    }

    /**
     * Gets itemStatus
     *
     * @return string|null
    
     */
    public function getItemStatus()
    {
        return $this->container['itemStatus'];
    }

    /**
     * Sets itemStatus
     *
     * @param string|null $itemStatus Current status of the item in IRP.
     *
     * @return self
    
     */
    public function setItemStatus($itemStatus)
    {
        if (is_null($itemStatus)) {
            throw new \InvalidArgumentException('non-nullable itemStatus cannot be null');
        }
        $allowedValues = $this->getItemStatusAllowableValues();
        if (!in_array($itemStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'itemStatus', must be one of '%s'",
                    $itemStatus,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['itemStatus'] = $itemStatus;
        return $this;
    }

    /**
     * Gets itemPriority
     *
     * @return int|null
    
     */
    public function getItemPriority()
    {
        return $this->container['itemPriority'];
    }

    /**
     * Sets itemPriority
     *
     * @param int|null $itemPriority Priority of the item as recommended by Walmart.
     *
     * @return self
    
     */
    public function setItemPriority($itemPriority)
    {
        if (is_null($itemPriority)) {
            throw new \InvalidArgumentException('non-nullable itemPriority cannot be null');
        }

        $this->container['itemPriority'] = $itemPriority;
        return $this;
    }
}
