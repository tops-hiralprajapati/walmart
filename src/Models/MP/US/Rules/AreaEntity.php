<?php

/**
 * AreaEntity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Rules Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\Rules;

use Walmart\Models\BaseModel;

/**
 * AreaEntity Class Doc Comment
 *
 * @category Class

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class AreaEntity extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'AreaEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'states' => '\Walmart\Models\MP\US\Rules\State[]',
        'regionCode' => 'string',
        'regionName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'states' => null,
        'regionCode' => null,
        'regionName' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'states' => false,
        'regionCode' => false,
        'regionName' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'states' => 'states',
        'regionCode' => 'regionCode',
        'regionName' => 'regionName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'states' => 'setStates',
        'regionCode' => 'setRegionCode',
        'regionName' => 'setRegionName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'states' => 'getStates',
        'regionCode' => 'getRegionCode',
        'regionName' => 'getRegionName'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('states', $data ?? [], null);
        $this->setIfExists('regionCode', $data ?? [], null);
        $this->setIfExists('regionName', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];


        return $invalidProperties;
    }

    /**
     * Gets states
     *
     * @return \Walmart\Models\MP\US\Rules\State[]|null
    
     */
    public function getStates()
    {
        return $this->container['states'];
    }

    /**
     * Sets states
     *
     * @param \Walmart\Models\MP\US\Rules\State[]|null $states states.
     *
     * @return self
    
     */
    public function setStates($states)
    {
        if (is_null($states)) {
            throw new \InvalidArgumentException('non-nullable states cannot be null');
        }

        $this->container['states'] = $states;
        return $this;
    }

    /**
     * Gets regionCode
     *
     * @return string|null
    
     */
    public function getRegionCode()
    {
        return $this->container['regionCode'];
    }

    /**
     * Sets regionCode
     *
     * @param string|null $regionCode regionCode
     *
     * @return self
    
     */
    public function setRegionCode($regionCode)
    {
        if (is_null($regionCode)) {
            throw new \InvalidArgumentException('non-nullable regionCode cannot be null');
        }

        $this->container['regionCode'] = $regionCode;
        return $this;
    }

    /**
     * Gets regionName
     *
     * @return string|null
    
     */
    public function getRegionName()
    {
        return $this->container['regionName'];
    }

    /**
     * Sets regionName
     *
     * @param string|null $regionName regionName
     *
     * @return self
    
     */
    public function setRegionName($regionName)
    {
        if (is_null($regionName)) {
            throw new \InvalidArgumentException('non-nullable regionName cannot be null');
        }

        $this->container['regionName'] = $regionName;
        return $this;
    }
}
