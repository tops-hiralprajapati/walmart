<?php

/**
 * TieredShippingCharge
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Settings Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\Settings;

use Walmart\Models\BaseModel;

/**
 * TieredShippingCharge Class Doc Comment
 *
 * @category Class

 * @description Tiered Shipping Charges

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class TieredShippingCharge extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'TieredShippingCharge';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'minLimit' => 'float',
        'maxLimit' => 'float',
        'shipCharge' => '\Walmart\Models\MP\US\Settings\ShipCharge'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'minLimit' => null,
        'maxLimit' => null,
        'shipCharge' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'minLimit' => false,
        'maxLimit' => false,
        'shipCharge' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'minLimit' => 'minLimit',
        'maxLimit' => 'maxLimit',
        'shipCharge' => 'shipCharge'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'minLimit' => 'setMinLimit',
        'maxLimit' => 'setMaxLimit',
        'shipCharge' => 'setShipCharge'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'minLimit' => 'getMinLimit',
        'maxLimit' => 'getMaxLimit',
        'shipCharge' => 'getShipCharge'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('minLimit', $data ?? [], null);
        $this->setIfExists('maxLimit', $data ?? [], null);
        $this->setIfExists('shipCharge', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['minLimit'] === null) {
            $invalidProperties[] = "'minLimit' can't be null";
        }
        if ($this->container['maxLimit'] === null) {
            $invalidProperties[] = "'maxLimit' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Gets minLimit
     *
     * @return float
    
     */
    public function getMinLimit()
    {
        return $this->container['minLimit'];
    }

    /**
     * Sets minLimit
     *
     * @param float $minLimit Minimum Limit
     *
     * @return self
    
     */
    public function setMinLimit($minLimit)
    {
        if (is_null($minLimit)) {
            throw new \InvalidArgumentException('non-nullable minLimit cannot be null');
        }

        $this->container['minLimit'] = $minLimit;
        return $this;
    }

    /**
     * Gets maxLimit
     *
     * @return float
    
     */
    public function getMaxLimit()
    {
        return $this->container['maxLimit'];
    }

    /**
     * Sets maxLimit
     *
     * @param float $maxLimit Maximum Limit
     *
     * @return self
    
     */
    public function setMaxLimit($maxLimit)
    {
        if (is_null($maxLimit)) {
            throw new \InvalidArgumentException('non-nullable maxLimit cannot be null');
        }

        $this->container['maxLimit'] = $maxLimit;
        return $this;
    }

    /**
     * Gets shipCharge
     *
     * @return \Walmart\Models\MP\US\Settings\ShipCharge|null
    
     */
    public function getShipCharge()
    {
        return $this->container['shipCharge'];
    }

    /**
     * Sets shipCharge
     *
     * @param \Walmart\Models\MP\US\Settings\ShipCharge|null $shipCharge shipCharge
     *
     * @return self
    
     */
    public function setShipCharge($shipCharge)
    {
        if (is_null($shipCharge)) {
            throw new \InvalidArgumentException('non-nullable shipCharge cannot be null');
        }

        $this->container['shipCharge'] = $shipCharge;
        return $this;
    }
}
