<?php

/**
 * Payload
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Utilities Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\Utilities;

use Walmart\Models\BaseModel;

/**
 * Payload Class Doc Comment
 *
 * @category Class

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class Payload extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Payload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'superDepartment' => 'string',
        'superDepartmentId' => 'string',
        'departments' => '\Walmart\Models\MP\US\Utilities\Department[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'superDepartment' => null,
        'superDepartmentId' => null,
        'departments' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'superDepartment' => false,
        'superDepartmentId' => false,
        'departments' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'superDepartment' => 'superDepartment',
        'superDepartmentId' => 'superDepartmentId',
        'departments' => 'departments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'superDepartment' => 'setSuperDepartment',
        'superDepartmentId' => 'setSuperDepartmentId',
        'departments' => 'setDepartments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'superDepartment' => 'getSuperDepartment',
        'superDepartmentId' => 'getSuperDepartmentId',
        'departments' => 'getDepartments'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('superDepartment', $data ?? [], null);
        $this->setIfExists('superDepartmentId', $data ?? [], null);
        $this->setIfExists('departments', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];


        return $invalidProperties;
    }

    /**
     * Gets superDepartment
     *
     * @return string|null
    
     */
    public function getSuperDepartment()
    {
        return $this->container['superDepartment'];
    }

    /**
     * Sets superDepartment
     *
     * @param string|null $superDepartment The super-department name for which the department have to be fetched
     *
     * @return self
    
     */
    public function setSuperDepartment($superDepartment)
    {
        if (is_null($superDepartment)) {
            throw new \InvalidArgumentException('non-nullable superDepartment cannot be null');
        }

        $this->container['superDepartment'] = $superDepartment;
        return $this;
    }

    /**
     * Gets superDepartmentId
     *
     * @return string|null
    
     */
    public function getSuperDepartmentId()
    {
        return $this->container['superDepartmentId'];
    }

    /**
     * Sets superDepartmentId
     *
     * @param string|null $superDepartmentId The super-department id for which the department have to be fetched
     *
     * @return self
    
     */
    public function setSuperDepartmentId($superDepartmentId)
    {
        if (is_null($superDepartmentId)) {
            throw new \InvalidArgumentException('non-nullable superDepartmentId cannot be null');
        }

        $this->container['superDepartmentId'] = $superDepartmentId;
        return $this;
    }

    /**
     * Gets departments
     *
     * @return \Walmart\Models\MP\US\Utilities\Department[]|null
    
     */
    public function getDepartments()
    {
        return $this->container['departments'];
    }

    /**
     * Sets departments
     *
     * @param \Walmart\Models\MP\US\Utilities\Department[]|null $departments departments
     *
     * @return self
    
     */
    public function setDepartments($departments)
    {
        if (is_null($departments)) {
            throw new \InvalidArgumentException('non-nullable departments cannot be null');
        }

        $this->container['departments'] = $departments;
        return $this;
    }
}
