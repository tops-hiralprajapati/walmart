<?php

/**
 * StatusAPIResponseDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Utilities Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\Utilities;

use Walmart\Models\BaseModel;

/**
 * StatusAPIResponseDTO Class Doc Comment
 *
 * @category Class

 * @description A-List of all API statuses

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class StatusAPIResponseDTO extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'StatusAPIResponseDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'apiGroup' => 'string',
        'status' => 'string',
        'lastUpdatedTime' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'apiGroup' => null,
        'status' => null,
        'lastUpdatedTime' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'apiGroup' => false,
        'status' => false,
        'lastUpdatedTime' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'apiGroup' => 'apiGroup',
        'status' => 'status',
        'lastUpdatedTime' => 'lastUpdatedTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'apiGroup' => 'setApiGroup',
        'status' => 'setStatus',
        'lastUpdatedTime' => 'setLastUpdatedTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'apiGroup' => 'getApiGroup',
        'status' => 'getStatus',
        'lastUpdatedTime' => 'getLastUpdatedTime'
    ];


    public const API_GROUP_RETURNS = 'Returns';

    public const API_GROUP_ITEMS = 'Items';

    public const API_GROUP_SANDBOX = 'Sandbox';

    public const API_GROUP_LAGTIME = 'Lagtime';

    public const API_GROUP_PROMOS = 'Promos';

    public const API_GROUP_ORDERS = 'Orders';

    public const API_GROUP_AUTHENTICATION = 'Authentication';

    public const API_GROUP_PRICE = 'Price';

    public const API_GROUP_REFUNDS = 'Refunds';

    public const API_GROUP_AUTHORIZATION = 'Authorization';

    public const API_GROUP_INVENTORY = 'Inventory';

    public const STATUS_OPERATIONAL = 'OPERATIONAL';

    public const STATUS_SERVICE_DEGRADATION = 'SERVICE_DEGRADATION';

    public const STATUS_SERVICE_OUTAGE = 'SERVICE_OUTAGE';

    public const STATUS_UNKNOWN = 'UNKNOWN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApiGroupAllowableValues()
    {
        return [
            self::API_GROUP_RETURNS,
            self::API_GROUP_ITEMS,
            self::API_GROUP_SANDBOX,
            self::API_GROUP_LAGTIME,
            self::API_GROUP_PROMOS,
            self::API_GROUP_ORDERS,
            self::API_GROUP_AUTHENTICATION,
            self::API_GROUP_PRICE,
            self::API_GROUP_REFUNDS,
            self::API_GROUP_AUTHORIZATION,
            self::API_GROUP_INVENTORY,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_OPERATIONAL,
            self::STATUS_SERVICE_DEGRADATION,
            self::STATUS_SERVICE_OUTAGE,
            self::STATUS_UNKNOWN,
        ];
    }

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('apiGroup', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('lastUpdatedTime', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getApiGroupAllowableValues();
        if (!is_null($this->container['apiGroup']) && !in_array($this->container['apiGroup'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'apiGroup', must be one of '%s'",
                $this->container['apiGroup'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }


        return $invalidProperties;
    }

    /**
     * Gets apiGroup
     *
     * @return string|null
    
     */
    public function getApiGroup()
    {
        return $this->container['apiGroup'];
    }

    /**
     * Sets apiGroup
     *
     * @param string|null $apiGroup The marketplace api group
     *
     * @return self
    
     */
    public function setApiGroup($apiGroup)
    {
        if (is_null($apiGroup)) {
            throw new \InvalidArgumentException('non-nullable apiGroup cannot be null');
        }
        $allowedValues = $this->getApiGroupAllowableValues();
        if (!in_array($apiGroup, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'apiGroup', must be one of '%s'",
                    $apiGroup,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['apiGroup'] = $apiGroup;
        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
    
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The current status of marketplace api group
     *
     * @return self
    
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['status'] = $status;
        return $this;
    }

    /**
     * Gets lastUpdatedTime
     *
     * @return string|null
    
     */
    public function getLastUpdatedTime()
    {
        return $this->container['lastUpdatedTime'];
    }

    /**
     * Sets lastUpdatedTime
     *
     * @param string|null $lastUpdatedTime The time at which the status of api group collected. This datetime field is in the ISO 8601 format.
     *
     * @return self
    
     */
    public function setLastUpdatedTime($lastUpdatedTime)
    {
        if (is_null($lastUpdatedTime)) {
            throw new \InvalidArgumentException('non-nullable lastUpdatedTime cannot be null');
        }

        $this->container['lastUpdatedTime'] = $lastUpdatedTime;
        return $this;
    }
}
