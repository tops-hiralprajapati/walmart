<?php

/**
 * PhoneValidity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Order Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\Supplier\US\DSVOrders;

use Walmart\Models\BaseModel;

/**
 * PhoneValidity Class Doc Comment
 *
 * @category Class

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class PhoneValidity extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PhoneValidity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'validationType' => 'string',
        'validationStatus' => 'string',
        'validatedDate' => '\DateTime',
        'validatedBy' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'validationType' => null,
        'validationStatus' => null,
        'validatedDate' => 'date-time',
        'validatedBy' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'validationType' => false,
        'validationStatus' => false,
        'validatedDate' => false,
        'validatedBy' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'validationType' => 'validationType',
        'validationStatus' => 'validationStatus',
        'validatedDate' => 'validatedDate',
        'validatedBy' => 'validatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'validationType' => 'setValidationType',
        'validationStatus' => 'setValidationStatus',
        'validatedDate' => 'setValidatedDate',
        'validatedBy' => 'setValidatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'validationType' => 'getValidationType',
        'validationStatus' => 'getValidationStatus',
        'validatedDate' => 'getValidatedDate',
        'validatedBy' => 'getValidatedBy'
    ];


    public const VALIDATION_TYPE_SMS = 'SMS';

    public const VALIDATION_TYPE_IVR = 'IVR';

    public const VALIDATION_TYPE_CALL = 'CALL';

    public const VALIDATION_TYPE_UNKNOWN = 'UNKNOWN';

    public const VALIDATION_STATUS_SUCCESS = 'SUCCESS';

    public const VALIDATION_STATUS_FAILURE = 'FAILURE';

    public const VALIDATION_STATUS_SKIPPED = 'SKIPPED';

    public const VALIDATION_STATUS_UNKNOWN = 'UNKNOWN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getValidationTypeAllowableValues()
    {
        return [
            self::VALIDATION_TYPE_SMS,
            self::VALIDATION_TYPE_IVR,
            self::VALIDATION_TYPE_CALL,
            self::VALIDATION_TYPE_UNKNOWN,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getValidationStatusAllowableValues()
    {
        return [
            self::VALIDATION_STATUS_SUCCESS,
            self::VALIDATION_STATUS_FAILURE,
            self::VALIDATION_STATUS_SKIPPED,
            self::VALIDATION_STATUS_UNKNOWN,
        ];
    }

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('validationType', $data ?? [], null);
        $this->setIfExists('validationStatus', $data ?? [], null);
        $this->setIfExists('validatedDate', $data ?? [], null);
        $this->setIfExists('validatedBy', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getValidationTypeAllowableValues();
        if (!is_null($this->container['validationType']) && !in_array($this->container['validationType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'validationType', must be one of '%s'",
                $this->container['validationType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getValidationStatusAllowableValues();
        if (!is_null($this->container['validationStatus']) && !in_array($this->container['validationStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'validationStatus', must be one of '%s'",
                $this->container['validationStatus'],
                implode("', '", $allowedValues)
            );
        }


        return $invalidProperties;
    }

    /**
     * Gets validationType
     *
     * @return string|null
    
     */
    public function getValidationType()
    {
        return $this->container['validationType'];
    }

    /**
     * Sets validationType
     *
     * @param string|null $validationType validationType
     *
     * @return self
    
     */
    public function setValidationType($validationType)
    {
        if (is_null($validationType)) {
            throw new \InvalidArgumentException('non-nullable validationType cannot be null');
        }
        $allowedValues = $this->getValidationTypeAllowableValues();
        if (!in_array($validationType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'validationType', must be one of '%s'",
                    $validationType,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['validationType'] = $validationType;
        return $this;
    }

    /**
     * Gets validationStatus
     *
     * @return string|null
    
     */
    public function getValidationStatus()
    {
        return $this->container['validationStatus'];
    }

    /**
     * Sets validationStatus
     *
     * @param string|null $validationStatus validationStatus
     *
     * @return self
    
     */
    public function setValidationStatus($validationStatus)
    {
        if (is_null($validationStatus)) {
            throw new \InvalidArgumentException('non-nullable validationStatus cannot be null');
        }
        $allowedValues = $this->getValidationStatusAllowableValues();
        if (!in_array($validationStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'validationStatus', must be one of '%s'",
                    $validationStatus,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['validationStatus'] = $validationStatus;
        return $this;
    }

    /**
     * Gets validatedDate
     *
     * @return \DateTime|null
    
     */
    public function getValidatedDate()
    {
        return $this->container['validatedDate'];
    }

    /**
     * Sets validatedDate
     *
     * @param \DateTime|null $validatedDate validatedDate
     *
     * @return self
    
     */
    public function setValidatedDate($validatedDate)
    {
        if (is_null($validatedDate)) {
            throw new \InvalidArgumentException('non-nullable validatedDate cannot be null');
        }

        $this->container['validatedDate'] = $validatedDate;
        return $this;
    }

    /**
     * Gets validatedBy
     *
     * @return string|null
    
     */
    public function getValidatedBy()
    {
        return $this->container['validatedBy'];
    }

    /**
     * Sets validatedBy
     *
     * @param string|null $validatedBy validatedBy
     *
     * @return self
    
     */
    public function setValidatedBy($validatedBy)
    {
        if (is_null($validatedBy)) {
            throw new \InvalidArgumentException('non-nullable validatedBy cannot be null');
        }

        $this->container['validatedBy'] = $validatedBy;
        return $this;
    }
}
